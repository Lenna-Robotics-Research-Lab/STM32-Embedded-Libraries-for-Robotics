
MODBUS-Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a30  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08005bb8  08005bb8  00015bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005dd0  08005dd0  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  08005dd0  08005dd0  00015dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005dd8  08005dd8  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005dd8  08005dd8  00015dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ddc  08005ddc  00015ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08005de0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d8  2**0
                  CONTENTS
 10 .bss          00003924  200001d8  200001d8  000201d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20003afc  20003afc  000201d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000099dc  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001942  00000000  00000000  00029be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000748  00000000  00000000  0002b528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006a0  00000000  00000000  0002bc70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f946  00000000  00000000  0002c310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b8b1  00000000  00000000  0004bc56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000beea6  00000000  00000000  00057507  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001163ad  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001c18  00000000  00000000  00116400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001d8 	.word	0x200001d8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005ba0 	.word	0x08005ba0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001dc 	.word	0x200001dc
 80001c4:	08005ba0 	.word	0x08005ba0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004d2:	2300      	movs	r3, #0
 80004d4:	607b      	str	r3, [r7, #4]
 80004d6:	4b10      	ldr	r3, [pc, #64]	; (8000518 <MX_GPIO_Init+0x4c>)
 80004d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004da:	4a0f      	ldr	r2, [pc, #60]	; (8000518 <MX_GPIO_Init+0x4c>)
 80004dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004e0:	6313      	str	r3, [r2, #48]	; 0x30
 80004e2:	4b0d      	ldr	r3, [pc, #52]	; (8000518 <MX_GPIO_Init+0x4c>)
 80004e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004ea:	607b      	str	r3, [r7, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ee:	2300      	movs	r3, #0
 80004f0:	603b      	str	r3, [r7, #0]
 80004f2:	4b09      	ldr	r3, [pc, #36]	; (8000518 <MX_GPIO_Init+0x4c>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	4a08      	ldr	r2, [pc, #32]	; (8000518 <MX_GPIO_Init+0x4c>)
 80004f8:	f043 0301 	orr.w	r3, r3, #1
 80004fc:	6313      	str	r3, [r2, #48]	; 0x30
 80004fe:	4b06      	ldr	r3, [pc, #24]	; (8000518 <MX_GPIO_Init+0x4c>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	f003 0301 	and.w	r3, r3, #1
 8000506:	603b      	str	r3, [r7, #0]
 8000508:	683b      	ldr	r3, [r7, #0]

}
 800050a:	bf00      	nop
 800050c:	370c      	adds	r7, #12
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	40023800 	.word	0x40023800

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b590      	push	{r4, r7, lr}
 800051e:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
 8000522:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000524:	f003 fb54 	bl	8003bd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000528:	f000 fb1e 	bl	8000b68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052c:	f7ff ffce 	bl	80004cc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000530:	f003 fa98 	bl	8003a64 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, data, 8);
 8000534:	2208      	movs	r2, #8
 8000536:	499d      	ldr	r1, [pc, #628]	; (80007ac <main+0x290>)
 8000538:	489d      	ldr	r0, [pc, #628]	; (80007b0 <main+0x294>)
 800053a:	f004 fbe5 	bl	8004d08 <HAL_UART_Receive_IT>
  HAL_UART_Transmit_IT(&huart1, response_array, sending_byte_count);
 800053e:	4b9d      	ldr	r3, [pc, #628]	; (80007b4 <main+0x298>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	b29b      	uxth	r3, r3
 8000544:	461a      	mov	r2, r3
 8000546:	499c      	ldr	r1, [pc, #624]	; (80007b8 <main+0x29c>)
 8000548:	4899      	ldr	r0, [pc, #612]	; (80007b0 <main+0x294>)
 800054a:	f004 fb98 	bl	8004c7e <HAL_UART_Transmit_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
		int temp_count = 0;
 800054e:	2300      	movs	r3, #0
 8000550:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
	  unsigned int temp_regs[256];// sending register
		uint16_t temp_cmd;//writing single register
    if(data[0] == Slave_Address || data[0] == 0x00){
 8000554:	4b95      	ldr	r3, [pc, #596]	; (80007ac <main+0x290>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	2b01      	cmp	r3, #1
 800055a:	d004      	beq.n	8000566 <main+0x4a>
 800055c:	4b93      	ldr	r3, [pc, #588]	; (80007ac <main+0x290>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	f040 82df 	bne.w	8000b24 <main+0x608>
		  test_1 = 1;
 8000566:	4b95      	ldr	r3, [pc, #596]	; (80007bc <main+0x2a0>)
 8000568:	2201      	movs	r2, #1
 800056a:	601a      	str	r2, [r3, #0]
			if(data[1] == 0x01||data[1] == 0x02 || data[1] == 0x03 || data[1] == 0x04 || data[1] == 0x05 || data[1] == 0x06){
 800056c:	4b8f      	ldr	r3, [pc, #572]	; (80007ac <main+0x290>)
 800056e:	785b      	ldrb	r3, [r3, #1]
 8000570:	2b01      	cmp	r3, #1
 8000572:	d013      	beq.n	800059c <main+0x80>
 8000574:	4b8d      	ldr	r3, [pc, #564]	; (80007ac <main+0x290>)
 8000576:	785b      	ldrb	r3, [r3, #1]
 8000578:	2b02      	cmp	r3, #2
 800057a:	d00f      	beq.n	800059c <main+0x80>
 800057c:	4b8b      	ldr	r3, [pc, #556]	; (80007ac <main+0x290>)
 800057e:	785b      	ldrb	r3, [r3, #1]
 8000580:	2b03      	cmp	r3, #3
 8000582:	d00b      	beq.n	800059c <main+0x80>
 8000584:	4b89      	ldr	r3, [pc, #548]	; (80007ac <main+0x290>)
 8000586:	785b      	ldrb	r3, [r3, #1]
 8000588:	2b04      	cmp	r3, #4
 800058a:	d007      	beq.n	800059c <main+0x80>
 800058c:	4b87      	ldr	r3, [pc, #540]	; (80007ac <main+0x290>)
 800058e:	785b      	ldrb	r3, [r3, #1]
 8000590:	2b05      	cmp	r3, #5
 8000592:	d003      	beq.n	800059c <main+0x80>
 8000594:	4b85      	ldr	r3, [pc, #532]	; (80007ac <main+0x290>)
 8000596:	785b      	ldrb	r3, [r3, #1]
 8000598:	2b06      	cmp	r3, #6
 800059a:	d10f      	bne.n	80005bc <main+0xa0>
			  sent_CRC = (data[7]<<8|data[6]);//-1 and -2 change for the simply modbus test
 800059c:	4b83      	ldr	r3, [pc, #524]	; (80007ac <main+0x290>)
 800059e:	79db      	ldrb	r3, [r3, #7]
 80005a0:	021b      	lsls	r3, r3, #8
 80005a2:	b21a      	sxth	r2, r3
 80005a4:	4b81      	ldr	r3, [pc, #516]	; (80007ac <main+0x290>)
 80005a6:	799b      	ldrb	r3, [r3, #6]
 80005a8:	b21b      	sxth	r3, r3
 80005aa:	4313      	orrs	r3, r2
 80005ac:	b21b      	sxth	r3, r3
 80005ae:	b29a      	uxth	r2, r3
 80005b0:	4b83      	ldr	r3, [pc, #524]	; (80007c0 <main+0x2a4>)
 80005b2:	801a      	strh	r2, [r3, #0]
        num	= 6;//for	calculating the slave crc
 80005b4:	4b83      	ldr	r3, [pc, #524]	; (80007c4 <main+0x2a8>)
 80005b6:	2206      	movs	r2, #6
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	e01e      	b.n	80005fa <main+0xde>
		  }else if(data[1] == 0x0F||data[1] == 0x10){
 80005bc:	4b7b      	ldr	r3, [pc, #492]	; (80007ac <main+0x290>)
 80005be:	785b      	ldrb	r3, [r3, #1]
 80005c0:	2b0f      	cmp	r3, #15
 80005c2:	d003      	beq.n	80005cc <main+0xb0>
 80005c4:	4b79      	ldr	r3, [pc, #484]	; (80007ac <main+0x290>)
 80005c6:	785b      	ldrb	r3, [r3, #1]
 80005c8:	2b10      	cmp	r3, #16
 80005ca:	d116      	bne.n	80005fa <main+0xde>
			  sent_CRC = (data[8 + data[6]]<<8|data[7+data[6]]);
 80005cc:	4b77      	ldr	r3, [pc, #476]	; (80007ac <main+0x290>)
 80005ce:	799b      	ldrb	r3, [r3, #6]
 80005d0:	3308      	adds	r3, #8
 80005d2:	4a76      	ldr	r2, [pc, #472]	; (80007ac <main+0x290>)
 80005d4:	5cd3      	ldrb	r3, [r2, r3]
 80005d6:	021b      	lsls	r3, r3, #8
 80005d8:	b21a      	sxth	r2, r3
 80005da:	4b74      	ldr	r3, [pc, #464]	; (80007ac <main+0x290>)
 80005dc:	799b      	ldrb	r3, [r3, #6]
 80005de:	3307      	adds	r3, #7
 80005e0:	4972      	ldr	r1, [pc, #456]	; (80007ac <main+0x290>)
 80005e2:	5ccb      	ldrb	r3, [r1, r3]
 80005e4:	b21b      	sxth	r3, r3
 80005e6:	4313      	orrs	r3, r2
 80005e8:	b21b      	sxth	r3, r3
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	4b74      	ldr	r3, [pc, #464]	; (80007c0 <main+0x2a4>)
 80005ee:	801a      	strh	r2, [r3, #0]
        num = 7 + data[6];	//for	calculating the slave crc
 80005f0:	4b6e      	ldr	r3, [pc, #440]	; (80007ac <main+0x290>)
 80005f2:	799b      	ldrb	r3, [r3, #6]
 80005f4:	3307      	adds	r3, #7
 80005f6:	4a73      	ldr	r2, [pc, #460]	; (80007c4 <main+0x2a8>)
 80005f8:	6013      	str	r3, [r2, #0]
			}
			slave_CRC = crc16(data,num);
 80005fa:	4b72      	ldr	r3, [pc, #456]	; (80007c4 <main+0x2a8>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	b29b      	uxth	r3, r3
 8000600:	4619      	mov	r1, r3
 8000602:	486a      	ldr	r0, [pc, #424]	; (80007ac <main+0x290>)
 8000604:	f000 fb84 	bl	8000d10 <crc16>
 8000608:	4603      	mov	r3, r0
 800060a:	461a      	mov	r2, r3
 800060c:	4b6e      	ldr	r3, [pc, #440]	; (80007c8 <main+0x2ac>)
 800060e:	801a      	strh	r2, [r3, #0]

			if(sent_CRC == slave_CRC){
 8000610:	4b6b      	ldr	r3, [pc, #428]	; (80007c0 <main+0x2a4>)
 8000612:	881a      	ldrh	r2, [r3, #0]
 8000614:	4b6c      	ldr	r3, [pc, #432]	; (80007c8 <main+0x2ac>)
 8000616:	881b      	ldrh	r3, [r3, #0]
 8000618:	429a      	cmp	r2, r3
 800061a:	f040 8283 	bne.w	8000b24 <main+0x608>
				//CRC calculation is the same
				test_2 = 1;
 800061e:	4b6b      	ldr	r3, [pc, #428]	; (80007cc <main+0x2b0>)
 8000620:	2201      	movs	r2, #1
 8000622:	601a      	str	r2, [r3, #0]
				switch(data[1]){
 8000624:	4b61      	ldr	r3, [pc, #388]	; (80007ac <main+0x290>)
 8000626:	785b      	ldrb	r3, [r3, #1]
 8000628:	3b01      	subs	r3, #1
 800062a:	2b0f      	cmp	r3, #15
 800062c:	f200 8252 	bhi.w	8000ad4 <main+0x5b8>
 8000630:	a201      	add	r2, pc, #4	; (adr r2, 8000638 <main+0x11c>)
 8000632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000636:	bf00      	nop
 8000638:	08000679 	.word	0x08000679
 800063c:	080006c7 	.word	0x080006c7
 8000640:	0800070f 	.word	0x0800070f
 8000644:	080007f5 	.word	0x080007f5
 8000648:	08000891 	.word	0x08000891
 800064c:	080008d7 	.word	0x080008d7
 8000650:	0800091d 	.word	0x0800091d
 8000654:	08000ad5 	.word	0x08000ad5
 8000658:	08000ad5 	.word	0x08000ad5
 800065c:	08000ad5 	.word	0x08000ad5
 8000660:	08000ad5 	.word	0x08000ad5
 8000664:	08000ad5 	.word	0x08000ad5
 8000668:	08000ad5 	.word	0x08000ad5
 800066c:	08000ad5 	.word	0x08000ad5
 8000670:	0800092d 	.word	0x0800092d
 8000674:	080009e3 	.word	0x080009e3
					case 0x01:
						test_3 = 1;
 8000678:	4b55      	ldr	r3, [pc, #340]	; (80007d0 <main+0x2b4>)
 800067a:	2201      	movs	r2, #1
 800067c:	601a      	str	r2, [r3, #0]
						start_addr = (data[2]<<8 | data[3]);
 800067e:	4b4b      	ldr	r3, [pc, #300]	; (80007ac <main+0x290>)
 8000680:	789b      	ldrb	r3, [r3, #2]
 8000682:	021b      	lsls	r3, r3, #8
 8000684:	b21a      	sxth	r2, r3
 8000686:	4b49      	ldr	r3, [pc, #292]	; (80007ac <main+0x290>)
 8000688:	78db      	ldrb	r3, [r3, #3]
 800068a:	b21b      	sxth	r3, r3
 800068c:	4313      	orrs	r3, r2
 800068e:	b21b      	sxth	r3, r3
 8000690:	b29a      	uxth	r2, r3
 8000692:	4b50      	ldr	r3, [pc, #320]	; (80007d4 <main+0x2b8>)
 8000694:	801a      	strh	r2, [r3, #0]
					  quantitiy_of_coils = (data[4]<<8 | data[5]);
 8000696:	4b45      	ldr	r3, [pc, #276]	; (80007ac <main+0x290>)
 8000698:	791b      	ldrb	r3, [r3, #4]
 800069a:	021b      	lsls	r3, r3, #8
 800069c:	b21a      	sxth	r2, r3
 800069e:	4b43      	ldr	r3, [pc, #268]	; (80007ac <main+0x290>)
 80006a0:	795b      	ldrb	r3, [r3, #5]
 80006a2:	b21b      	sxth	r3, r3
 80006a4:	4313      	orrs	r3, r2
 80006a6:	b21b      	sxth	r3, r3
 80006a8:	b29a      	uxth	r2, r3
 80006aa:	4b4b      	ldr	r3, [pc, #300]	; (80007d8 <main+0x2bc>)
 80006ac:	801a      	strh	r2, [r3, #0]
					  read_coils(start_addr,quantitiy_of_coils,coils,response_array);
 80006ae:	4b49      	ldr	r3, [pc, #292]	; (80007d4 <main+0x2b8>)
 80006b0:	8818      	ldrh	r0, [r3, #0]
 80006b2:	4b49      	ldr	r3, [pc, #292]	; (80007d8 <main+0x2bc>)
 80006b4:	8819      	ldrh	r1, [r3, #0]
 80006b6:	4b40      	ldr	r3, [pc, #256]	; (80007b8 <main+0x29c>)
 80006b8:	4a48      	ldr	r2, [pc, #288]	; (80007dc <main+0x2c0>)
 80006ba:	f000 fb5f 	bl	8000d7c <read_coils>
					  flag2 = 1;
 80006be:	4b48      	ldr	r3, [pc, #288]	; (80007e0 <main+0x2c4>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	601a      	str	r2, [r3, #0]
					  break;
 80006c4:	e218      	b.n	8000af8 <main+0x5dc>
					case 0x02:
						start_addr = (data[2]<<8 | data[3]);
 80006c6:	4b39      	ldr	r3, [pc, #228]	; (80007ac <main+0x290>)
 80006c8:	789b      	ldrb	r3, [r3, #2]
 80006ca:	021b      	lsls	r3, r3, #8
 80006cc:	b21a      	sxth	r2, r3
 80006ce:	4b37      	ldr	r3, [pc, #220]	; (80007ac <main+0x290>)
 80006d0:	78db      	ldrb	r3, [r3, #3]
 80006d2:	b21b      	sxth	r3, r3
 80006d4:	4313      	orrs	r3, r2
 80006d6:	b21b      	sxth	r3, r3
 80006d8:	b29a      	uxth	r2, r3
 80006da:	4b3e      	ldr	r3, [pc, #248]	; (80007d4 <main+0x2b8>)
 80006dc:	801a      	strh	r2, [r3, #0]
					  quantitiy_of_discrete_inputs = (data[4]<<8 | data[5]);
 80006de:	4b33      	ldr	r3, [pc, #204]	; (80007ac <main+0x290>)
 80006e0:	791b      	ldrb	r3, [r3, #4]
 80006e2:	021b      	lsls	r3, r3, #8
 80006e4:	b21a      	sxth	r2, r3
 80006e6:	4b31      	ldr	r3, [pc, #196]	; (80007ac <main+0x290>)
 80006e8:	795b      	ldrb	r3, [r3, #5]
 80006ea:	b21b      	sxth	r3, r3
 80006ec:	4313      	orrs	r3, r2
 80006ee:	b21b      	sxth	r3, r3
 80006f0:	b29a      	uxth	r2, r3
 80006f2:	4b3c      	ldr	r3, [pc, #240]	; (80007e4 <main+0x2c8>)
 80006f4:	801a      	strh	r2, [r3, #0]
					  read_descrete_data(start_addr,quantitiy_of_discrete_inputs,discrete_inputs,response_array);
 80006f6:	4b37      	ldr	r3, [pc, #220]	; (80007d4 <main+0x2b8>)
 80006f8:	8818      	ldrh	r0, [r3, #0]
 80006fa:	4b3a      	ldr	r3, [pc, #232]	; (80007e4 <main+0x2c8>)
 80006fc:	8819      	ldrh	r1, [r3, #0]
 80006fe:	4b2e      	ldr	r3, [pc, #184]	; (80007b8 <main+0x29c>)
 8000700:	4a39      	ldr	r2, [pc, #228]	; (80007e8 <main+0x2cc>)
 8000702:	f000 fd45 	bl	8001190 <read_descrete_data>
					  flag2 = 1;
 8000706:	4b36      	ldr	r3, [pc, #216]	; (80007e0 <main+0x2c4>)
 8000708:	2201      	movs	r2, #1
 800070a:	601a      	str	r2, [r3, #0]
					  break;
 800070c:	e1f4      	b.n	8000af8 <main+0x5dc>
					case 0x03:
						start_addr = (data[2]<<8 | data[3]);
 800070e:	4b27      	ldr	r3, [pc, #156]	; (80007ac <main+0x290>)
 8000710:	789b      	ldrb	r3, [r3, #2]
 8000712:	021b      	lsls	r3, r3, #8
 8000714:	b21a      	sxth	r2, r3
 8000716:	4b25      	ldr	r3, [pc, #148]	; (80007ac <main+0x290>)
 8000718:	78db      	ldrb	r3, [r3, #3]
 800071a:	b21b      	sxth	r3, r3
 800071c:	4313      	orrs	r3, r2
 800071e:	b21b      	sxth	r3, r3
 8000720:	b29a      	uxth	r2, r3
 8000722:	4b2c      	ldr	r3, [pc, #176]	; (80007d4 <main+0x2b8>)
 8000724:	801a      	strh	r2, [r3, #0]
					  quantitiy_of_regs = (data[4]<<8 | data[5]);
 8000726:	4b21      	ldr	r3, [pc, #132]	; (80007ac <main+0x290>)
 8000728:	791b      	ldrb	r3, [r3, #4]
 800072a:	021b      	lsls	r3, r3, #8
 800072c:	b21a      	sxth	r2, r3
 800072e:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <main+0x290>)
 8000730:	795b      	ldrb	r3, [r3, #5]
 8000732:	b21b      	sxth	r3, r3
 8000734:	4313      	orrs	r3, r2
 8000736:	b21b      	sxth	r3, r3
 8000738:	b29a      	uxth	r2, r3
 800073a:	4b2c      	ldr	r3, [pc, #176]	; (80007ec <main+0x2d0>)
 800073c:	801a      	strh	r2, [r3, #0]
            temp_count =0;
 800073e:	2300      	movs	r3, #0
 8000740:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
					  for(int i=6;i<sizeof(data)/sizeof(data[0]);i+=2){
 8000744:	2306      	movs	r3, #6
 8000746:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
 800074a:	e01e      	b.n	800078a <main+0x26e>
							temp_regs[temp_count] = (data[i]<<8|data[i+1]);
 800074c:	4a17      	ldr	r2, [pc, #92]	; (80007ac <main+0x290>)
 800074e:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8000752:	4413      	add	r3, r2
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	021b      	lsls	r3, r3, #8
 8000758:	f8d7 2410 	ldr.w	r2, [r7, #1040]	; 0x410
 800075c:	3201      	adds	r2, #1
 800075e:	4913      	ldr	r1, [pc, #76]	; (80007ac <main+0x290>)
 8000760:	5c8a      	ldrb	r2, [r1, r2]
 8000762:	4313      	orrs	r3, r2
 8000764:	4619      	mov	r1, r3
 8000766:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800076a:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800076e:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 8000772:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
              temp_count++;
 8000776:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 800077a:	3301      	adds	r3, #1
 800077c:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
					  for(int i=6;i<sizeof(data)/sizeof(data[0]);i+=2){
 8000780:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8000784:	3302      	adds	r3, #2
 8000786:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
 800078a:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 800078e:	2bff      	cmp	r3, #255	; 0xff
 8000790:	d9dc      	bls.n	800074c <main+0x230>
						}
						read_holding_registers(start_addr,quantitiy_of_regs,HoldingRegisters,response_array);
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <main+0x2b8>)
 8000794:	8818      	ldrh	r0, [r3, #0]
 8000796:	4b15      	ldr	r3, [pc, #84]	; (80007ec <main+0x2d0>)
 8000798:	8819      	ldrh	r1, [r3, #0]
 800079a:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <main+0x29c>)
 800079c:	4a14      	ldr	r2, [pc, #80]	; (80007f0 <main+0x2d4>)
 800079e:	f000 fefd 	bl	800159c <read_holding_registers>
					  flag2 = 1;
 80007a2:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <main+0x2c4>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	601a      	str	r2, [r3, #0]
						break;
 80007a8:	e1a6      	b.n	8000af8 <main+0x5dc>
 80007aa:	bf00      	nop
 80007ac:	200001f4 	.word	0x200001f4
 80007b0:	20003ab4 	.word	0x20003ab4
 80007b4:	200003f8 	.word	0x200003f8
 80007b8:	200002f4 	.word	0x200002f4
 80007bc:	20002b28 	.word	0x20002b28
 80007c0:	20002b3a 	.word	0x20002b3a
 80007c4:	20003ab0 	.word	0x20003ab0
 80007c8:	20002b38 	.word	0x20002b38
 80007cc:	20002b2c 	.word	0x20002b2c
 80007d0:	20002b30 	.word	0x20002b30
 80007d4:	20002b44 	.word	0x20002b44
 80007d8:	20002b46 	.word	0x20002b46
 80007dc:	20000194 	.word	0x20000194
 80007e0:	20002b1c 	.word	0x20002b1c
 80007e4:	20002b4a 	.word	0x20002b4a
 80007e8:	20002340 	.word	0x20002340
 80007ec:	20002b48 	.word	0x20002b48
 80007f0:	20000000 	.word	0x20000000
					case 0x04:
						start_addr = (data[2]<<8 | data[3]);
 80007f4:	4b8d      	ldr	r3, [pc, #564]	; (8000a2c <main+0x510>)
 80007f6:	789b      	ldrb	r3, [r3, #2]
 80007f8:	021b      	lsls	r3, r3, #8
 80007fa:	b21a      	sxth	r2, r3
 80007fc:	4b8b      	ldr	r3, [pc, #556]	; (8000a2c <main+0x510>)
 80007fe:	78db      	ldrb	r3, [r3, #3]
 8000800:	b21b      	sxth	r3, r3
 8000802:	4313      	orrs	r3, r2
 8000804:	b21b      	sxth	r3, r3
 8000806:	b29a      	uxth	r2, r3
 8000808:	4b89      	ldr	r3, [pc, #548]	; (8000a30 <main+0x514>)
 800080a:	801a      	strh	r2, [r3, #0]
					  quantitiy_of_input_regs = (data[4]<<8 | data[5]);
 800080c:	4b87      	ldr	r3, [pc, #540]	; (8000a2c <main+0x510>)
 800080e:	791b      	ldrb	r3, [r3, #4]
 8000810:	021b      	lsls	r3, r3, #8
 8000812:	b21a      	sxth	r2, r3
 8000814:	4b85      	ldr	r3, [pc, #532]	; (8000a2c <main+0x510>)
 8000816:	795b      	ldrb	r3, [r3, #5]
 8000818:	b21b      	sxth	r3, r3
 800081a:	4313      	orrs	r3, r2
 800081c:	b21b      	sxth	r3, r3
 800081e:	b29a      	uxth	r2, r3
 8000820:	4b84      	ldr	r3, [pc, #528]	; (8000a34 <main+0x518>)
 8000822:	801a      	strh	r2, [r3, #0]
            temp_count =0;
 8000824:	2300      	movs	r3, #0
 8000826:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
					  for(int i=6;i<sizeof(data)/sizeof(data[0]);i+=2){
 800082a:	2306      	movs	r3, #6
 800082c:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 8000830:	e01e      	b.n	8000870 <main+0x354>
							temp_regs[temp_count] = (data[i]<<8|data[i+1]);
 8000832:	4a7e      	ldr	r2, [pc, #504]	; (8000a2c <main+0x510>)
 8000834:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8000838:	4413      	add	r3, r2
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	021b      	lsls	r3, r3, #8
 800083e:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
 8000842:	3201      	adds	r2, #1
 8000844:	4979      	ldr	r1, [pc, #484]	; (8000a2c <main+0x510>)
 8000846:	5c8a      	ldrb	r2, [r1, r2]
 8000848:	4313      	orrs	r3, r2
 800084a:	4619      	mov	r1, r3
 800084c:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8000850:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8000854:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 8000858:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
              temp_count++;
 800085c:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8000860:	3301      	adds	r3, #1
 8000862:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
					  for(int i=6;i<sizeof(data)/sizeof(data[0]);i+=2){
 8000866:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 800086a:	3302      	adds	r3, #2
 800086c:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 8000870:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8000874:	2bff      	cmp	r3, #255	; 0xff
 8000876:	d9dc      	bls.n	8000832 <main+0x316>
						}
						read_input_registers(start_addr,quantitiy_of_input_regs,input_registers,response_array);
 8000878:	4b6d      	ldr	r3, [pc, #436]	; (8000a30 <main+0x514>)
 800087a:	8818      	ldrh	r0, [r3, #0]
 800087c:	4b6d      	ldr	r3, [pc, #436]	; (8000a34 <main+0x518>)
 800087e:	8819      	ldrh	r1, [r3, #0]
 8000880:	4b6d      	ldr	r3, [pc, #436]	; (8000a38 <main+0x51c>)
 8000882:	4a6e      	ldr	r2, [pc, #440]	; (8000a3c <main+0x520>)
 8000884:	f000 ff5a 	bl	800173c <read_input_registers>
					  flag2 = 1;
 8000888:	4b6d      	ldr	r3, [pc, #436]	; (8000a40 <main+0x524>)
 800088a:	2201      	movs	r2, #1
 800088c:	601a      	str	r2, [r3, #0]
						break;
 800088e:	e133      	b.n	8000af8 <main+0x5dc>
					case 0x05:
						start_addr = (data[2]<<8 | data[3]);
 8000890:	4b66      	ldr	r3, [pc, #408]	; (8000a2c <main+0x510>)
 8000892:	789b      	ldrb	r3, [r3, #2]
 8000894:	021b      	lsls	r3, r3, #8
 8000896:	b21a      	sxth	r2, r3
 8000898:	4b64      	ldr	r3, [pc, #400]	; (8000a2c <main+0x510>)
 800089a:	78db      	ldrb	r3, [r3, #3]
 800089c:	b21b      	sxth	r3, r3
 800089e:	4313      	orrs	r3, r2
 80008a0:	b21b      	sxth	r3, r3
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	4b62      	ldr	r3, [pc, #392]	; (8000a30 <main+0x514>)
 80008a6:	801a      	strh	r2, [r3, #0]
				    temp_cmd = (data[4]<<8 | data[5]);
 80008a8:	4b60      	ldr	r3, [pc, #384]	; (8000a2c <main+0x510>)
 80008aa:	791b      	ldrb	r3, [r3, #4]
 80008ac:	021b      	lsls	r3, r3, #8
 80008ae:	b21a      	sxth	r2, r3
 80008b0:	4b5e      	ldr	r3, [pc, #376]	; (8000a2c <main+0x510>)
 80008b2:	795b      	ldrb	r3, [r3, #5]
 80008b4:	b21b      	sxth	r3, r3
 80008b6:	4313      	orrs	r3, r2
 80008b8:	b21b      	sxth	r3, r3
 80008ba:	f8a7 3402 	strh.w	r3, [r7, #1026]	; 0x402
					  write_single_coil(start_addr,temp_cmd,coils,response_array);
 80008be:	4b5c      	ldr	r3, [pc, #368]	; (8000a30 <main+0x514>)
 80008c0:	8818      	ldrh	r0, [r3, #0]
 80008c2:	f8b7 1402 	ldrh.w	r1, [r7, #1026]	; 0x402
 80008c6:	4b5c      	ldr	r3, [pc, #368]	; (8000a38 <main+0x51c>)
 80008c8:	4a5e      	ldr	r2, [pc, #376]	; (8000a44 <main+0x528>)
 80008ca:	f001 f807 	bl	80018dc <write_single_coil>
					  flag2 = 1;
 80008ce:	4b5c      	ldr	r3, [pc, #368]	; (8000a40 <main+0x524>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	601a      	str	r2, [r3, #0]
					  break;
 80008d4:	e110      	b.n	8000af8 <main+0x5dc>
					case 0x06:
						start_addr = (data[2]<<8 | data[3]);
 80008d6:	4b55      	ldr	r3, [pc, #340]	; (8000a2c <main+0x510>)
 80008d8:	789b      	ldrb	r3, [r3, #2]
 80008da:	021b      	lsls	r3, r3, #8
 80008dc:	b21a      	sxth	r2, r3
 80008de:	4b53      	ldr	r3, [pc, #332]	; (8000a2c <main+0x510>)
 80008e0:	78db      	ldrb	r3, [r3, #3]
 80008e2:	b21b      	sxth	r3, r3
 80008e4:	4313      	orrs	r3, r2
 80008e6:	b21b      	sxth	r3, r3
 80008e8:	b29a      	uxth	r2, r3
 80008ea:	4b51      	ldr	r3, [pc, #324]	; (8000a30 <main+0x514>)
 80008ec:	801a      	strh	r2, [r3, #0]
					  temp_cmd = (data[4]<<8 | data[5]);
 80008ee:	4b4f      	ldr	r3, [pc, #316]	; (8000a2c <main+0x510>)
 80008f0:	791b      	ldrb	r3, [r3, #4]
 80008f2:	021b      	lsls	r3, r3, #8
 80008f4:	b21a      	sxth	r2, r3
 80008f6:	4b4d      	ldr	r3, [pc, #308]	; (8000a2c <main+0x510>)
 80008f8:	795b      	ldrb	r3, [r3, #5]
 80008fa:	b21b      	sxth	r3, r3
 80008fc:	4313      	orrs	r3, r2
 80008fe:	b21b      	sxth	r3, r3
 8000900:	f8a7 3402 	strh.w	r3, [r7, #1026]	; 0x402
					  write_single_register(start_addr,temp_cmd,HoldingRegisters,response_array);
 8000904:	4b4a      	ldr	r3, [pc, #296]	; (8000a30 <main+0x514>)
 8000906:	8818      	ldrh	r0, [r3, #0]
 8000908:	f8b7 1402 	ldrh.w	r1, [r7, #1026]	; 0x402
 800090c:	4b4a      	ldr	r3, [pc, #296]	; (8000a38 <main+0x51c>)
 800090e:	4a4e      	ldr	r2, [pc, #312]	; (8000a48 <main+0x52c>)
 8000910:	f001 f89c 	bl	8001a4c <write_single_register>
					  flag2 = 1;
 8000914:	4b4a      	ldr	r3, [pc, #296]	; (8000a40 <main+0x524>)
 8000916:	2201      	movs	r2, #1
 8000918:	601a      	str	r2, [r3, #0]
					  break;
 800091a:	e0ed      	b.n	8000af8 <main+0x5dc>
					case 0x07:
						read_exception_status(exception_coils,response_array);
 800091c:	4946      	ldr	r1, [pc, #280]	; (8000a38 <main+0x51c>)
 800091e:	484b      	ldr	r0, [pc, #300]	; (8000a4c <main+0x530>)
 8000920:	f001 f924 	bl	8001b6c <read_exception_status>
					  flag2 = 1;
 8000924:	4b46      	ldr	r3, [pc, #280]	; (8000a40 <main+0x524>)
 8000926:	2201      	movs	r2, #1
 8000928:	601a      	str	r2, [r3, #0]
						break;
 800092a:	e0e5      	b.n	8000af8 <main+0x5dc>
					case 0x0F:
						start_addr = (data[2]<<8 | data[3]);
 800092c:	4b3f      	ldr	r3, [pc, #252]	; (8000a2c <main+0x510>)
 800092e:	789b      	ldrb	r3, [r3, #2]
 8000930:	021b      	lsls	r3, r3, #8
 8000932:	b21a      	sxth	r2, r3
 8000934:	4b3d      	ldr	r3, [pc, #244]	; (8000a2c <main+0x510>)
 8000936:	78db      	ldrb	r3, [r3, #3]
 8000938:	b21b      	sxth	r3, r3
 800093a:	4313      	orrs	r3, r2
 800093c:	b21b      	sxth	r3, r3
 800093e:	b29a      	uxth	r2, r3
 8000940:	4b3b      	ldr	r3, [pc, #236]	; (8000a30 <main+0x514>)
 8000942:	801a      	strh	r2, [r3, #0]
					  num_of_coils_for_multi_coil = (data[4]<<8 | data[5]);
 8000944:	4b39      	ldr	r3, [pc, #228]	; (8000a2c <main+0x510>)
 8000946:	791b      	ldrb	r3, [r3, #4]
 8000948:	021b      	lsls	r3, r3, #8
 800094a:	b21a      	sxth	r2, r3
 800094c:	4b37      	ldr	r3, [pc, #220]	; (8000a2c <main+0x510>)
 800094e:	795b      	ldrb	r3, [r3, #5]
 8000950:	b21b      	sxth	r3, r3
 8000952:	4313      	orrs	r3, r2
 8000954:	b21b      	sxth	r3, r3
 8000956:	b29a      	uxth	r2, r3
 8000958:	4b3d      	ldr	r3, [pc, #244]	; (8000a50 <main+0x534>)
 800095a:	801a      	strh	r2, [r3, #0]
					  bytes_for_multi_coil = data[6];
 800095c:	4b33      	ldr	r3, [pc, #204]	; (8000a2c <main+0x510>)
 800095e:	799b      	ldrb	r3, [r3, #6]
 8000960:	b29a      	uxth	r2, r3
 8000962:	4b3c      	ldr	r3, [pc, #240]	; (8000a54 <main+0x538>)
 8000964:	801a      	strh	r2, [r3, #0]
					  temp_count =0;
 8000966:	2300      	movs	r3, #0
 8000968:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
					  for(int i=7;i<num;i+=2){
 800096c:	2307      	movs	r3, #7
 800096e:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 8000972:	e01e      	b.n	80009b2 <main+0x496>
						  temp_coils[temp_count] =  (data[i]<<8|data[i+1]);
 8000974:	4a2d      	ldr	r2, [pc, #180]	; (8000a2c <main+0x510>)
 8000976:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 800097a:	4413      	add	r3, r2
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	021b      	lsls	r3, r3, #8
 8000980:	b21a      	sxth	r2, r3
 8000982:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8000986:	3301      	adds	r3, #1
 8000988:	4928      	ldr	r1, [pc, #160]	; (8000a2c <main+0x510>)
 800098a:	5ccb      	ldrb	r3, [r1, r3]
 800098c:	b21b      	sxth	r3, r3
 800098e:	4313      	orrs	r3, r2
 8000990:	b21b      	sxth	r3, r3
 8000992:	b299      	uxth	r1, r3
 8000994:	4a30      	ldr	r2, [pc, #192]	; (8000a58 <main+0x53c>)
 8000996:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 800099a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
							temp_count++;
 800099e:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 80009a2:	3301      	adds	r3, #1
 80009a4:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
					  for(int i=7;i<num;i+=2){
 80009a8:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80009ac:	3302      	adds	r3, #2
 80009ae:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 80009b2:	4b2a      	ldr	r3, [pc, #168]	; (8000a5c <main+0x540>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 80009ba:	429a      	cmp	r2, r3
 80009bc:	dbda      	blt.n	8000974 <main+0x458>
						}
						write_multiple_coils(start_addr,num_of_coils_for_multi_coil,bytes_for_multi_coil,temp_coils,coils,response_array);
 80009be:	4b1c      	ldr	r3, [pc, #112]	; (8000a30 <main+0x514>)
 80009c0:	8818      	ldrh	r0, [r3, #0]
 80009c2:	4b23      	ldr	r3, [pc, #140]	; (8000a50 <main+0x534>)
 80009c4:	8819      	ldrh	r1, [r3, #0]
 80009c6:	4b23      	ldr	r3, [pc, #140]	; (8000a54 <main+0x538>)
 80009c8:	881b      	ldrh	r3, [r3, #0]
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <main+0x51c>)
 80009ce:	9301      	str	r3, [sp, #4]
 80009d0:	4b1c      	ldr	r3, [pc, #112]	; (8000a44 <main+0x528>)
 80009d2:	9300      	str	r3, [sp, #0]
 80009d4:	4b20      	ldr	r3, [pc, #128]	; (8000a58 <main+0x53c>)
 80009d6:	f001 f913 	bl	8001c00 <write_multiple_coils>
					  flag2 = 1;
 80009da:	4b19      	ldr	r3, [pc, #100]	; (8000a40 <main+0x524>)
 80009dc:	2201      	movs	r2, #1
 80009de:	601a      	str	r2, [r3, #0]
					  break;
 80009e0:	e08a      	b.n	8000af8 <main+0x5dc>
					case 0x10:
						start_addr = (data[2]<<8 | data[3]);
 80009e2:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <main+0x510>)
 80009e4:	789b      	ldrb	r3, [r3, #2]
 80009e6:	021b      	lsls	r3, r3, #8
 80009e8:	b21a      	sxth	r2, r3
 80009ea:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <main+0x510>)
 80009ec:	78db      	ldrb	r3, [r3, #3]
 80009ee:	b21b      	sxth	r3, r3
 80009f0:	4313      	orrs	r3, r2
 80009f2:	b21b      	sxth	r3, r3
 80009f4:	b29a      	uxth	r2, r3
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <main+0x514>)
 80009f8:	801a      	strh	r2, [r3, #0]
					  num_of_regs_for_multi_reg = (data[4]<<8 | data[5]);
 80009fa:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <main+0x510>)
 80009fc:	791b      	ldrb	r3, [r3, #4]
 80009fe:	021b      	lsls	r3, r3, #8
 8000a00:	b21a      	sxth	r2, r3
 8000a02:	4b0a      	ldr	r3, [pc, #40]	; (8000a2c <main+0x510>)
 8000a04:	795b      	ldrb	r3, [r3, #5]
 8000a06:	b21b      	sxth	r3, r3
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	b21b      	sxth	r3, r3
 8000a0c:	b29a      	uxth	r2, r3
 8000a0e:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <main+0x544>)
 8000a10:	801a      	strh	r2, [r3, #0]
					  bytes_for_multi_reg = data[6];
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <main+0x510>)
 8000a14:	799b      	ldrb	r3, [r3, #6]
 8000a16:	b29a      	uxth	r2, r3
 8000a18:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <main+0x548>)
 8000a1a:	801a      	strh	r2, [r3, #0]
					  temp_count =0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
					  for(int i=7;i<num;i+=2){
 8000a22:	2307      	movs	r3, #7
 8000a24:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 8000a28:	e03d      	b.n	8000aa6 <main+0x58a>
 8000a2a:	bf00      	nop
 8000a2c:	200001f4 	.word	0x200001f4
 8000a30:	20002b44 	.word	0x20002b44
 8000a34:	20002b4c 	.word	0x20002b4c
 8000a38:	200002f4 	.word	0x200002f4
 8000a3c:	20000400 	.word	0x20000400
 8000a40:	20002b1c 	.word	0x20002b1c
 8000a44:	20000194 	.word	0x20000194
 8000a48:	20000000 	.word	0x20000000
 8000a4c:	20002b10 	.word	0x20002b10
 8000a50:	20002b3c 	.word	0x20002b3c
 8000a54:	20002b3e 	.word	0x20002b3e
 8000a58:	20002b50 	.word	0x20002b50
 8000a5c:	20003ab0 	.word	0x20003ab0
 8000a60:	20002b40 	.word	0x20002b40
 8000a64:	20002b42 	.word	0x20002b42
						  temp_regs[temp_count] =  (data[i]<<8|data[i+1]);
 8000a68:	4a31      	ldr	r2, [pc, #196]	; (8000b30 <main+0x614>)
 8000a6a:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8000a6e:	4413      	add	r3, r2
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	021b      	lsls	r3, r3, #8
 8000a74:	f8d7 2404 	ldr.w	r2, [r7, #1028]	; 0x404
 8000a78:	3201      	adds	r2, #1
 8000a7a:	492d      	ldr	r1, [pc, #180]	; (8000b30 <main+0x614>)
 8000a7c:	5c8a      	ldrb	r2, [r1, r2]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	4619      	mov	r1, r3
 8000a82:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8000a86:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8000a8a:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 8000a8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
							temp_count++;
 8000a92:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8000a96:	3301      	adds	r3, #1
 8000a98:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
					  for(int i=7;i<num;i+=2){
 8000a9c:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8000aa0:	3302      	adds	r3, #2
 8000aa2:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 8000aa6:	4b23      	ldr	r3, [pc, #140]	; (8000b34 <main+0x618>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f8d7 2404 	ldr.w	r2, [r7, #1028]	; 0x404
 8000aae:	429a      	cmp	r2, r3
 8000ab0:	dbda      	blt.n	8000a68 <main+0x54c>
						}
						write_multiple_registers(start_addr,num_of_regs_for_multi_reg,bytes_for_multi_reg,temp_regs,HoldingRegisters,response_array);
 8000ab2:	4b21      	ldr	r3, [pc, #132]	; (8000b38 <main+0x61c>)
 8000ab4:	8818      	ldrh	r0, [r3, #0]
 8000ab6:	4b21      	ldr	r3, [pc, #132]	; (8000b3c <main+0x620>)
 8000ab8:	8819      	ldrh	r1, [r3, #0]
 8000aba:	4b21      	ldr	r3, [pc, #132]	; (8000b40 <main+0x624>)
 8000abc:	881a      	ldrh	r2, [r3, #0]
 8000abe:	463b      	mov	r3, r7
 8000ac0:	4c20      	ldr	r4, [pc, #128]	; (8000b44 <main+0x628>)
 8000ac2:	9401      	str	r4, [sp, #4]
 8000ac4:	4c20      	ldr	r4, [pc, #128]	; (8000b48 <main+0x62c>)
 8000ac6:	9400      	str	r4, [sp, #0]
 8000ac8:	f002 feb4 	bl	8003834 <write_multiple_registers>
					  flag2 = 1;
 8000acc:	4b1f      	ldr	r3, [pc, #124]	; (8000b4c <main+0x630>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	601a      	str	r2, [r3, #0]
					  break;
 8000ad2:	e011      	b.n	8000af8 <main+0x5dc>
					default:
						flag = 1;
 8000ad4:	4b1e      	ldr	r3, [pc, #120]	; (8000b50 <main+0x634>)
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	601a      	str	r2, [r3, #0]
						exception_code = 0x01;
 8000ada:	4b1e      	ldr	r3, [pc, #120]	; (8000b54 <main+0x638>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	801a      	strh	r2, [r3, #0]
					  response_array[0] = 0x81;
 8000ae0:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <main+0x628>)
 8000ae2:	2281      	movs	r2, #129	; 0x81
 8000ae4:	701a      	strb	r2, [r3, #0]
					  response_array[1] = exception_code;
 8000ae6:	4b1b      	ldr	r3, [pc, #108]	; (8000b54 <main+0x638>)
 8000ae8:	881b      	ldrh	r3, [r3, #0]
 8000aea:	b2da      	uxtb	r2, r3
 8000aec:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <main+0x628>)
 8000aee:	705a      	strb	r2, [r3, #1]
					  flag2 = 1;
 8000af0:	4b16      	ldr	r3, [pc, #88]	; (8000b4c <main+0x630>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	601a      	str	r2, [r3, #0]
					  break;
 8000af6:	bf00      	nop
					}
				if(flag2 == 1 && flag3 == 1){
 8000af8:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <main+0x630>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d111      	bne.n	8000b24 <main+0x608>
 8000b00:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <main+0x63c>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d10d      	bne.n	8000b24 <main+0x608>
					HAL_UART_Transmit_IT(&huart1,response_array,sending_byte_count);
 8000b08:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <main+0x640>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	461a      	mov	r2, r3
 8000b10:	490c      	ldr	r1, [pc, #48]	; (8000b44 <main+0x628>)
 8000b12:	4813      	ldr	r0, [pc, #76]	; (8000b60 <main+0x644>)
 8000b14:	f004 f8b3 	bl	8004c7e <HAL_UART_Transmit_IT>
					flag2 = 0;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <main+0x630>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
					flag3 = 0;
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <main+0x63c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
			  //CRC error
				//HAL_Delay(1000);
			}

		}
		q++;
 8000b24:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <main+0x648>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	4a0e      	ldr	r2, [pc, #56]	; (8000b64 <main+0x648>)
 8000b2c:	6013      	str	r3, [r2, #0]
  {
 8000b2e:	e50e      	b.n	800054e <main+0x32>
 8000b30:	200001f4 	.word	0x200001f4
 8000b34:	20003ab0 	.word	0x20003ab0
 8000b38:	20002b44 	.word	0x20002b44
 8000b3c:	20002b40 	.word	0x20002b40
 8000b40:	20002b42 	.word	0x20002b42
 8000b44:	200002f4 	.word	0x200002f4
 8000b48:	20000000 	.word	0x20000000
 8000b4c:	20002b1c 	.word	0x20002b1c
 8000b50:	20002b18 	.word	0x20002b18
 8000b54:	200003f4 	.word	0x200003f4
 8000b58:	20002b20 	.word	0x20002b20
 8000b5c:	200003f8 	.word	0x200003f8
 8000b60:	20003ab4 	.word	0x20003ab4
 8000b64:	200003fc 	.word	0x200003fc

08000b68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b094      	sub	sp, #80	; 0x50
 8000b6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b6e:	f107 0320 	add.w	r3, r7, #32
 8000b72:	2230      	movs	r2, #48	; 0x30
 8000b74:	2100      	movs	r1, #0
 8000b76:	4618      	mov	r0, r3
 8000b78:	f005 f80a 	bl	8005b90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b7c:	f107 030c 	add.w	r3, r7, #12
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60bb      	str	r3, [r7, #8]
 8000b90:	4b28      	ldr	r3, [pc, #160]	; (8000c34 <SystemClock_Config+0xcc>)
 8000b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b94:	4a27      	ldr	r2, [pc, #156]	; (8000c34 <SystemClock_Config+0xcc>)
 8000b96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9c:	4b25      	ldr	r3, [pc, #148]	; (8000c34 <SystemClock_Config+0xcc>)
 8000b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	4b22      	ldr	r3, [pc, #136]	; (8000c38 <SystemClock_Config+0xd0>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a21      	ldr	r2, [pc, #132]	; (8000c38 <SystemClock_Config+0xd0>)
 8000bb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb6:	6013      	str	r3, [r2, #0]
 8000bb8:	4b1f      	ldr	r3, [pc, #124]	; (8000c38 <SystemClock_Config+0xd0>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bd2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000bd8:	2319      	movs	r3, #25
 8000bda:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000bdc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000be0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000be2:	2302      	movs	r3, #2
 8000be4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000be6:	2304      	movs	r3, #4
 8000be8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bea:	f107 0320 	add.w	r3, r7, #32
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f003 fba0 	bl	8004334 <HAL_RCC_OscConfig>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000bfa:	f000 f883 	bl	8000d04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bfe:	230f      	movs	r3, #15
 8000c00:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c02:	2302      	movs	r3, #2
 8000c04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c0a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c0e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c14:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c16:	f107 030c 	add.w	r3, r7, #12
 8000c1a:	2105      	movs	r1, #5
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f003 fe01 	bl	8004824 <HAL_RCC_ClockConfig>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000c28:	f000 f86c 	bl	8000d04 <Error_Handler>
  }
}
 8000c2c:	bf00      	nop
 8000c2e:	3750      	adds	r7, #80	; 0x50
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40007000 	.word	0x40007000

08000c3c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
    /* Transmit one byte with 100 ms timeout */
   // HAL_UART_Transmit(&huart1, &byte, 1, 100);

    /* Receive one byte in interrupt mode */
		if(data[1] == 0x01||data[1] == 0x02 || data[1] == 0x03 || data[1] == 0x04 || data[1] == 0x05 || data[1] == 0x06){
 8000c44:	4b23      	ldr	r3, [pc, #140]	; (8000cd4 <HAL_UART_RxCpltCallback+0x98>)
 8000c46:	785b      	ldrb	r3, [r3, #1]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d013      	beq.n	8000c74 <HAL_UART_RxCpltCallback+0x38>
 8000c4c:	4b21      	ldr	r3, [pc, #132]	; (8000cd4 <HAL_UART_RxCpltCallback+0x98>)
 8000c4e:	785b      	ldrb	r3, [r3, #1]
 8000c50:	2b02      	cmp	r3, #2
 8000c52:	d00f      	beq.n	8000c74 <HAL_UART_RxCpltCallback+0x38>
 8000c54:	4b1f      	ldr	r3, [pc, #124]	; (8000cd4 <HAL_UART_RxCpltCallback+0x98>)
 8000c56:	785b      	ldrb	r3, [r3, #1]
 8000c58:	2b03      	cmp	r3, #3
 8000c5a:	d00b      	beq.n	8000c74 <HAL_UART_RxCpltCallback+0x38>
 8000c5c:	4b1d      	ldr	r3, [pc, #116]	; (8000cd4 <HAL_UART_RxCpltCallback+0x98>)
 8000c5e:	785b      	ldrb	r3, [r3, #1]
 8000c60:	2b04      	cmp	r3, #4
 8000c62:	d007      	beq.n	8000c74 <HAL_UART_RxCpltCallback+0x38>
 8000c64:	4b1b      	ldr	r3, [pc, #108]	; (8000cd4 <HAL_UART_RxCpltCallback+0x98>)
 8000c66:	785b      	ldrb	r3, [r3, #1]
 8000c68:	2b05      	cmp	r3, #5
 8000c6a:	d003      	beq.n	8000c74 <HAL_UART_RxCpltCallback+0x38>
 8000c6c:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <HAL_UART_RxCpltCallback+0x98>)
 8000c6e:	785b      	ldrb	r3, [r3, #1]
 8000c70:	2b06      	cmp	r3, #6
 8000c72:	d10d      	bne.n	8000c90 <HAL_UART_RxCpltCallback+0x54>
			// for 8 byte frame
		  test_4 ++;
 8000c74:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <HAL_UART_RxCpltCallback+0x9c>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	4a17      	ldr	r2, [pc, #92]	; (8000cd8 <HAL_UART_RxCpltCallback+0x9c>)
 8000c7c:	6013      	str	r3, [r2, #0]
		  flag3 = 1;
 8000c7e:	4b17      	ldr	r3, [pc, #92]	; (8000cdc <HAL_UART_RxCpltCallback+0xa0>)
 8000c80:	2201      	movs	r2, #1
 8000c82:	601a      	str	r2, [r3, #0]
      HAL_UART_Receive_IT(&huart1, data, 8);
 8000c84:	2208      	movs	r2, #8
 8000c86:	4913      	ldr	r1, [pc, #76]	; (8000cd4 <HAL_UART_RxCpltCallback+0x98>)
 8000c88:	4815      	ldr	r0, [pc, #84]	; (8000ce0 <HAL_UART_RxCpltCallback+0xa4>)
 8000c8a:	f004 f83d 	bl	8004d08 <HAL_UART_Receive_IT>
 8000c8e:	e01d      	b.n	8000ccc <HAL_UART_RxCpltCallback+0x90>
	  }else if(data[1] == 0x0F||data[1] == 0x10){
 8000c90:	4b10      	ldr	r3, [pc, #64]	; (8000cd4 <HAL_UART_RxCpltCallback+0x98>)
 8000c92:	785b      	ldrb	r3, [r3, #1]
 8000c94:	2b0f      	cmp	r3, #15
 8000c96:	d003      	beq.n	8000ca0 <HAL_UART_RxCpltCallback+0x64>
 8000c98:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <HAL_UART_RxCpltCallback+0x98>)
 8000c9a:	785b      	ldrb	r3, [r3, #1]
 8000c9c:	2b10      	cmp	r3, #16
 8000c9e:	d10a      	bne.n	8000cb6 <HAL_UART_RxCpltCallback+0x7a>
			// for more than 8 byte frame
		  HAL_UART_Receive_IT(&huart1, data, 9 + data[6]);
 8000ca0:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <HAL_UART_RxCpltCallback+0x98>)
 8000ca2:	799b      	ldrb	r3, [r3, #6]
 8000ca4:	b29b      	uxth	r3, r3
 8000ca6:	3309      	adds	r3, #9
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	461a      	mov	r2, r3
 8000cac:	4909      	ldr	r1, [pc, #36]	; (8000cd4 <HAL_UART_RxCpltCallback+0x98>)
 8000cae:	480c      	ldr	r0, [pc, #48]	; (8000ce0 <HAL_UART_RxCpltCallback+0xa4>)
 8000cb0:	f004 f82a 	bl	8004d08 <HAL_UART_Receive_IT>
 8000cb4:	e00a      	b.n	8000ccc <HAL_UART_RxCpltCallback+0x90>

			}else{
				HAL_UART_Receive_IT(&huart1, data, 8);
 8000cb6:	2208      	movs	r2, #8
 8000cb8:	4906      	ldr	r1, [pc, #24]	; (8000cd4 <HAL_UART_RxCpltCallback+0x98>)
 8000cba:	4809      	ldr	r0, [pc, #36]	; (8000ce0 <HAL_UART_RxCpltCallback+0xa4>)
 8000cbc:	f004 f824 	bl	8004d08 <HAL_UART_Receive_IT>
				flag3 ++;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <HAL_UART_RxCpltCallback+0xa0>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	4a05      	ldr	r2, [pc, #20]	; (8000cdc <HAL_UART_RxCpltCallback+0xa0>)
 8000cc8:	6013      	str	r3, [r2, #0]
			}

}
 8000cca:	bf00      	nop
 8000ccc:	bf00      	nop
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	200001f4 	.word	0x200001f4
 8000cd8:	20002b34 	.word	0x20002b34
 8000cdc:	20002b20 	.word	0x20002b20
 8000ce0:	20003ab4 	.word	0x20003ab4

08000ce4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
   flag2 = 0;
 8000cec:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <HAL_UART_TxCpltCallback+0x1c>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	20002b1c 	.word	0x20002b1c

08000d04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d08:	b672      	cpsid	i
}
 8000d0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <Error_Handler+0x8>
	...

08000d10 <crc16>:
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

//----------------------------------------------------------------------------------------------------------------------------------------
uint16_t crc16(uint8_t*buffer, uint16_t buffer_length)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	460b      	mov	r3, r1
 8000d1a:	807b      	strh	r3, [r7, #2]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 8000d1c:	23ff      	movs	r3, #255	; 0xff
 8000d1e:	73fb      	strb	r3, [r7, #15]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 8000d20:	23ff      	movs	r3, #255	; 0xff
 8000d22:	73bb      	strb	r3, [r7, #14]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 8000d24:	e013      	b.n	8000d4e <crc16+0x3e>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	1c5a      	adds	r2, r3, #1
 8000d2a:	607a      	str	r2, [r7, #4]
 8000d2c:	781a      	ldrb	r2, [r3, #0]
 8000d2e:	7bbb      	ldrb	r3, [r7, #14]
 8000d30:	4053      	eors	r3, r2
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 8000d36:	4a0f      	ldr	r2, [pc, #60]	; (8000d74 <crc16+0x64>)
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	781a      	ldrb	r2, [r3, #0]
 8000d3e:	7bfb      	ldrb	r3, [r7, #15]
 8000d40:	4053      	eors	r3, r2
 8000d42:	73bb      	strb	r3, [r7, #14]
        crc_hi = table_crc_lo[i];
 8000d44:	4a0c      	ldr	r2, [pc, #48]	; (8000d78 <crc16+0x68>)
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	4413      	add	r3, r2
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	73fb      	strb	r3, [r7, #15]
    while (buffer_length--) {
 8000d4e:	887b      	ldrh	r3, [r7, #2]
 8000d50:	1e5a      	subs	r2, r3, #1
 8000d52:	807a      	strh	r2, [r7, #2]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d1e6      	bne.n	8000d26 <crc16+0x16>
    }

    return (crc_hi <<8| crc_lo);
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
 8000d5a:	021b      	lsls	r3, r3, #8
 8000d5c:	b21a      	sxth	r2, r3
 8000d5e:	7bbb      	ldrb	r3, [r7, #14]
 8000d60:	b21b      	sxth	r3, r3
 8000d62:	4313      	orrs	r3, r2
 8000d64:	b21b      	sxth	r3, r3
 8000d66:	b29b      	uxth	r3, r3
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3714      	adds	r7, #20
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	08005bb8 	.word	0x08005bb8
 8000d78:	08005cb8 	.word	0x08005cb8

08000d7c <read_coils>:

//----------------------------------------------------------------------------------------------------------------------------------------
void read_coils(uint16_t starting_Address,uint16_t num_of_coils,uint8_t coils[],uint8_t x[]){
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b090      	sub	sp, #64	; 0x40
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60ba      	str	r2, [r7, #8]
 8000d84:	607b      	str	r3, [r7, #4]
 8000d86:	4603      	mov	r3, r0
 8000d88:	81fb      	strh	r3, [r7, #14]
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	81bb      	strh	r3, [r7, #12]
	//the order of wrighting is LSB -> MSB
	uint16_t slave_crc_send;
	if (num_of_coils > 0x007D || num_of_coils < 0){
 8000d8e:	89bb      	ldrh	r3, [r7, #12]
 8000d90:	2b7d      	cmp	r3, #125	; 0x7d
 8000d92:	d906      	bls.n	8000da2 <read_coils+0x26>
		flag = 1;// for setting the error needed
 8000d94:	4b8d      	ldr	r3, [pc, #564]	; (8000fcc <read_coils+0x250>)
 8000d96:	2201      	movs	r2, #1
 8000d98:	601a      	str	r2, [r3, #0]
		exception_code = 0x03; // exception code according to the datasheet
 8000d9a:	4b8d      	ldr	r3, [pc, #564]	; (8000fd0 <read_coils+0x254>)
 8000d9c:	2203      	movs	r2, #3
 8000d9e:	801a      	strh	r2, [r3, #0]
 8000da0:	e1c3      	b.n	800112a <read_coils+0x3ae>
	}else if(starting_Address + num_of_coils > len_of_coils){
 8000da2:	89fa      	ldrh	r2, [r7, #14]
 8000da4:	89bb      	ldrh	r3, [r7, #12]
 8000da6:	441a      	add	r2, r3
 8000da8:	4b8a      	ldr	r3, [pc, #552]	; (8000fd4 <read_coils+0x258>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	dd06      	ble.n	8000dbe <read_coils+0x42>
		flag = 1;
 8000db0:	4b86      	ldr	r3, [pc, #536]	; (8000fcc <read_coils+0x250>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	601a      	str	r2, [r3, #0]
    exception_code = 0x02;
 8000db6:	4b86      	ldr	r3, [pc, #536]	; (8000fd0 <read_coils+0x254>)
 8000db8:	2202      	movs	r2, #2
 8000dba:	801a      	strh	r2, [r3, #0]
 8000dbc:	e1b5      	b.n	800112a <read_coils+0x3ae>
	}else if(num_of_coils % 8 == 0 && flag == 0){
 8000dbe:	89bb      	ldrh	r3, [r7, #12]
 8000dc0:	f003 0307 	and.w	r3, r3, #7
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	f040 8092 	bne.w	8000ef0 <read_coils+0x174>
 8000dcc:	4b7f      	ldr	r3, [pc, #508]	; (8000fcc <read_coils+0x250>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	f040 808d 	bne.w	8000ef0 <read_coils+0x174>
		 x[0] = Slave_Address;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2201      	movs	r2, #1
 8000dda:	701a      	strb	r2, [r3, #0]
		 x[1] = 0x01;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	3301      	adds	r3, #1
 8000de0:	2201      	movs	r2, #1
 8000de2:	701a      	strb	r2, [r3, #0]
		 x[2] = num_of_coils/8;
 8000de4:	89bb      	ldrh	r3, [r7, #12]
 8000de6:	08db      	lsrs	r3, r3, #3
 8000de8:	b29a      	uxth	r2, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	3302      	adds	r3, #2
 8000dee:	b2d2      	uxtb	r2, r2
 8000df0:	701a      	strb	r2, [r3, #0]
		 for(int i = 3; i<num_of_coils/8 +3;i++){
 8000df2:	2303      	movs	r3, #3
 8000df4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000df6:	e04e      	b.n	8000e96 <read_coils+0x11a>
			  uint8_t hi =0,lo =0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8000dfe:	2300      	movs	r3, #0
 8000e00:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
			  int temp = 1;
 8000e04:	2301      	movs	r3, #1
 8000e06:	637b      	str	r3, [r7, #52]	; 0x34
			  for(int j=0; j<4 ;j++){
 8000e08:	2300      	movs	r3, #0
 8000e0a:	633b      	str	r3, [r7, #48]	; 0x30
 8000e0c:	e030      	b.n	8000e70 <read_coils+0xf4>
			     	lo += coils[starting_Address + j + (i - 3)*8] * temp;//lower nibble
 8000e0e:	89fa      	ldrh	r2, [r7, #14]
 8000e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e12:	441a      	add	r2, r3
 8000e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e16:	3b03      	subs	r3, #3
 8000e18:	00db      	lsls	r3, r3, #3
 8000e1a:	4413      	add	r3, r2
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	4413      	add	r3, r2
 8000e22:	781a      	ldrb	r2, [r3, #0]
 8000e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	fb12 f303 	smulbb	r3, r2, r3
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8000e32:	4413      	add	r3, r2
 8000e34:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
					  hi += coils[starting_Address + 4 + j + (i-3)*8] * temp;//higher nibble
 8000e38:	89fb      	ldrh	r3, [r7, #14]
 8000e3a:	1d1a      	adds	r2, r3, #4
 8000e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e3e:	441a      	add	r2, r3
 8000e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e42:	3b03      	subs	r3, #3
 8000e44:	00db      	lsls	r3, r3, #3
 8000e46:	4413      	add	r3, r2
 8000e48:	461a      	mov	r2, r3
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	781a      	ldrb	r2, [r3, #0]
 8000e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	fb12 f303 	smulbb	r3, r2, r3
 8000e58:	b2da      	uxtb	r2, r3
 8000e5a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000e5e:	4413      	add	r3, r2
 8000e60:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					  temp =temp *2 ;
 8000e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	637b      	str	r3, [r7, #52]	; 0x34
			  for(int j=0; j<4 ;j++){
 8000e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	633b      	str	r3, [r7, #48]	; 0x30
 8000e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e72:	2b03      	cmp	r3, #3
 8000e74:	ddcb      	ble.n	8000e0e <read_coils+0x92>
				}
				x[i] = (hi << 4|lo);
 8000e76:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000e7a:	011b      	lsls	r3, r3, #4
 8000e7c:	b25a      	sxtb	r2, r3
 8000e7e:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 8000e82:	4313      	orrs	r3, r2
 8000e84:	b259      	sxtb	r1, r3
 8000e86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	b2ca      	uxtb	r2, r1
 8000e8e:	701a      	strb	r2, [r3, #0]
		 for(int i = 3; i<num_of_coils/8 +3;i++){
 8000e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e92:	3301      	adds	r3, #1
 8000e94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e96:	89bb      	ldrh	r3, [r7, #12]
 8000e98:	08db      	lsrs	r3, r3, #3
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	3302      	adds	r3, #2
 8000e9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	dda9      	ble.n	8000df8 <read_coils+0x7c>
	 }
		 slave_crc_send = crc16(x,num_of_coils/8+3);
 8000ea4:	89bb      	ldrh	r3, [r7, #12]
 8000ea6:	08db      	lsrs	r3, r3, #3
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	3303      	adds	r3, #3
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	4619      	mov	r1, r3
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f7ff ff2d 	bl	8000d10 <crc16>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	827b      	strh	r3, [r7, #18]
	   x[num_of_coils/8 + 4] = slave_crc_send >> 8 & 0xFF;
 8000eba:	8a7b      	ldrh	r3, [r7, #18]
 8000ebc:	0a1b      	lsrs	r3, r3, #8
 8000ebe:	b299      	uxth	r1, r3
 8000ec0:	89bb      	ldrh	r3, [r7, #12]
 8000ec2:	08db      	lsrs	r3, r3, #3
 8000ec4:	b29b      	uxth	r3, r3
 8000ec6:	3304      	adds	r3, #4
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	4413      	add	r3, r2
 8000ecc:	b2ca      	uxtb	r2, r1
 8000ece:	701a      	strb	r2, [r3, #0]
	   x[num_of_coils/8 + 3] = slave_crc_send & 0xFF;
 8000ed0:	89bb      	ldrh	r3, [r7, #12]
 8000ed2:	08db      	lsrs	r3, r3, #3
 8000ed4:	b29b      	uxth	r3, r3
 8000ed6:	3303      	adds	r3, #3
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	4413      	add	r3, r2
 8000edc:	8a7a      	ldrh	r2, [r7, #18]
 8000ede:	b2d2      	uxtb	r2, r2
 8000ee0:	701a      	strb	r2, [r3, #0]
	   sending_byte_count = num_of_coils/8 + 5;
 8000ee2:	89bb      	ldrh	r3, [r7, #12]
 8000ee4:	08db      	lsrs	r3, r3, #3
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	3305      	adds	r3, #5
 8000eea:	4a3b      	ldr	r2, [pc, #236]	; (8000fd8 <read_coils+0x25c>)
 8000eec:	6013      	str	r3, [r2, #0]
 8000eee:	e11c      	b.n	800112a <read_coils+0x3ae>
	}else if(num_of_coils % 8 != 0 && flag == 0){
 8000ef0:	89bb      	ldrh	r3, [r7, #12]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	f000 8110 	beq.w	800111e <read_coils+0x3a2>
 8000efe:	4b33      	ldr	r3, [pc, #204]	; (8000fcc <read_coils+0x250>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	f040 810b 	bne.w	800111e <read_coils+0x3a2>
		 uint16_t temp2 = num_of_coils;
 8000f08:	89bb      	ldrh	r3, [r7, #12]
 8000f0a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		 x[0] = Slave_Address;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2201      	movs	r2, #1
 8000f10:	701a      	strb	r2, [r3, #0]
		 x[1] = 0x01;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	3301      	adds	r3, #1
 8000f16:	2201      	movs	r2, #1
 8000f18:	701a      	strb	r2, [r3, #0]
		 x[2] = num_of_coils/8 +1;
 8000f1a:	89bb      	ldrh	r3, [r7, #12]
 8000f1c:	08db      	lsrs	r3, r3, #3
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	3302      	adds	r3, #2
 8000f26:	3201      	adds	r2, #1
 8000f28:	b2d2      	uxtb	r2, r2
 8000f2a:	701a      	strb	r2, [r3, #0]
		 for(int i = 3; i<num_of_coils/8 +4;i++){
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f30:	e0c7      	b.n	80010c2 <read_coils+0x346>
		    uint8_t hi =0,lo =0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000f38:	2300      	movs	r3, #0
 8000f3a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			  int temp = 1;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	623b      	str	r3, [r7, #32]
			  if(temp2 >= 8){
 8000f42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000f44:	2b07      	cmp	r3, #7
 8000f46:	d937      	bls.n	8000fb8 <read_coils+0x23c>
			     for(int k=0; k<4; k++){
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61fb      	str	r3, [r7, #28]
 8000f4c:	e030      	b.n	8000fb0 <read_coils+0x234>
						lo += coils[starting_Address + k + (i-3)*8] * temp;
 8000f4e:	89fa      	ldrh	r2, [r7, #14]
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	441a      	add	r2, r3
 8000f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f56:	3b03      	subs	r3, #3
 8000f58:	00db      	lsls	r3, r3, #3
 8000f5a:	4413      	add	r3, r2
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	4413      	add	r3, r2
 8000f62:	781a      	ldrb	r2, [r3, #0]
 8000f64:	6a3b      	ldr	r3, [r7, #32]
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	fb12 f303 	smulbb	r3, r2, r3
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f72:	4413      	add	r3, r2
 8000f74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					  hi += coils[starting_Address + 4 + k + (i-3)*8] * temp;
 8000f78:	89fb      	ldrh	r3, [r7, #14]
 8000f7a:	1d1a      	adds	r2, r3, #4
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	441a      	add	r2, r3
 8000f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f82:	3b03      	subs	r3, #3
 8000f84:	00db      	lsls	r3, r3, #3
 8000f86:	4413      	add	r3, r2
 8000f88:	461a      	mov	r2, r3
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	781a      	ldrb	r2, [r3, #0]
 8000f90:	6a3b      	ldr	r3, [r7, #32]
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	fb12 f303 	smulbb	r3, r2, r3
 8000f98:	b2da      	uxtb	r2, r3
 8000f9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f9e:	4413      	add	r3, r2
 8000fa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					  temp =temp *2 ;
 8000fa4:	6a3b      	ldr	r3, [r7, #32]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	623b      	str	r3, [r7, #32]
			     for(int k=0; k<4; k++){
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	3301      	adds	r3, #1
 8000fae:	61fb      	str	r3, [r7, #28]
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	2b03      	cmp	r3, #3
 8000fb4:	ddcb      	ble.n	8000f4e <read_coils+0x1d2>
 8000fb6:	e071      	b.n	800109c <read_coils+0x320>
					 }

				}else if(temp2<8 && temp2>4){
 8000fb8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000fba:	2b07      	cmp	r3, #7
 8000fbc:	d849      	bhi.n	8001052 <read_coils+0x2d6>
 8000fbe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000fc0:	2b04      	cmp	r3, #4
 8000fc2:	d946      	bls.n	8001052 <read_coils+0x2d6>
				   for(int r=0 ; r<4;r++){
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61bb      	str	r3, [r7, #24]
 8000fc8:	e03f      	b.n	800104a <read_coils+0x2ce>
 8000fca:	bf00      	nop
 8000fcc:	20002b18 	.word	0x20002b18
 8000fd0:	200003f4 	.word	0x200003f4
 8000fd4:	200001c8 	.word	0x200001c8
 8000fd8:	200003f8 	.word	0x200003f8
					   lo += coils[starting_Address + r + (i-3)*8] * temp;
 8000fdc:	89fa      	ldrh	r2, [r7, #14]
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	441a      	add	r2, r3
 8000fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fe4:	3b03      	subs	r3, #3
 8000fe6:	00db      	lsls	r3, r3, #3
 8000fe8:	4413      	add	r3, r2
 8000fea:	461a      	mov	r2, r3
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	4413      	add	r3, r2
 8000ff0:	781a      	ldrb	r2, [r3, #0]
 8000ff2:	6a3b      	ldr	r3, [r7, #32]
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	fb12 f303 	smulbb	r3, r2, r3
 8000ffa:	b2da      	uxtb	r2, r3
 8000ffc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001000:	4413      	add	r3, r2
 8001002:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						 if(temp2 - 4 - r > 0){
 8001006:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001008:	1f1a      	subs	r2, r3, #4
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	2b00      	cmp	r3, #0
 8001010:	dd15      	ble.n	800103e <read_coils+0x2c2>
						    hi += coils[starting_Address + 4 + r + (i-3)*8] * temp;
 8001012:	89fb      	ldrh	r3, [r7, #14]
 8001014:	1d1a      	adds	r2, r3, #4
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	441a      	add	r2, r3
 800101a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800101c:	3b03      	subs	r3, #3
 800101e:	00db      	lsls	r3, r3, #3
 8001020:	4413      	add	r3, r2
 8001022:	461a      	mov	r2, r3
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	4413      	add	r3, r2
 8001028:	781a      	ldrb	r2, [r3, #0]
 800102a:	6a3b      	ldr	r3, [r7, #32]
 800102c:	b2db      	uxtb	r3, r3
 800102e:	fb12 f303 	smulbb	r3, r2, r3
 8001032:	b2da      	uxtb	r2, r3
 8001034:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001038:	4413      	add	r3, r2
 800103a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						 }
						 temp =temp *2 ;
 800103e:	6a3b      	ldr	r3, [r7, #32]
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	623b      	str	r3, [r7, #32]
				   for(int r=0 ; r<4;r++){
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	3301      	adds	r3, #1
 8001048:	61bb      	str	r3, [r7, #24]
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	2b03      	cmp	r3, #3
 800104e:	ddc5      	ble.n	8000fdc <read_coils+0x260>
 8001050:	e024      	b.n	800109c <read_coils+0x320>
					 }
				}else if(temp2<=4){
 8001052:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001054:	2b04      	cmp	r3, #4
 8001056:	d821      	bhi.n	800109c <read_coils+0x320>
				   for(int q=0; q<temp2; q++){
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
 800105c:	e01a      	b.n	8001094 <read_coils+0x318>
					    lo += coils[starting_Address + q + (i-3)*8] * temp;
 800105e:	89fa      	ldrh	r2, [r7, #14]
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	441a      	add	r2, r3
 8001064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001066:	3b03      	subs	r3, #3
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	4413      	add	r3, r2
 800106c:	461a      	mov	r2, r3
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	4413      	add	r3, r2
 8001072:	781a      	ldrb	r2, [r3, #0]
 8001074:	6a3b      	ldr	r3, [r7, #32]
 8001076:	b2db      	uxtb	r3, r3
 8001078:	fb12 f303 	smulbb	r3, r2, r3
 800107c:	b2da      	uxtb	r2, r3
 800107e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001082:	4413      	add	r3, r2
 8001084:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						  temp =temp *2 ;
 8001088:	6a3b      	ldr	r3, [r7, #32]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	623b      	str	r3, [r7, #32]
				   for(int q=0; q<temp2; q++){
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	3301      	adds	r3, #1
 8001092:	617b      	str	r3, [r7, #20]
 8001094:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001096:	697a      	ldr	r2, [r7, #20]
 8001098:	429a      	cmp	r2, r3
 800109a:	dbe0      	blt.n	800105e <read_coils+0x2e2>
					 }
				}
				x[i] = (hi << 4|lo);
 800109c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010a0:	011b      	lsls	r3, r3, #4
 80010a2:	b25a      	sxtb	r2, r3
 80010a4:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 80010a8:	4313      	orrs	r3, r2
 80010aa:	b259      	sxtb	r1, r3
 80010ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	4413      	add	r3, r2
 80010b2:	b2ca      	uxtb	r2, r1
 80010b4:	701a      	strb	r2, [r3, #0]
				temp2 -= 8;
 80010b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80010b8:	3b08      	subs	r3, #8
 80010ba:	85fb      	strh	r3, [r7, #46]	; 0x2e
		 for(int i = 3; i<num_of_coils/8 +4;i++){
 80010bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010be:	3301      	adds	r3, #1
 80010c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80010c2:	89bb      	ldrh	r3, [r7, #12]
 80010c4:	08db      	lsrs	r3, r3, #3
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	3303      	adds	r3, #3
 80010ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010cc:	429a      	cmp	r2, r3
 80010ce:	f77f af30 	ble.w	8000f32 <read_coils+0x1b6>
		 }
		 slave_crc_send = crc16(x,num_of_coils/8 + 4);
 80010d2:	89bb      	ldrh	r3, [r7, #12]
 80010d4:	08db      	lsrs	r3, r3, #3
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	3304      	adds	r3, #4
 80010da:	b29b      	uxth	r3, r3
 80010dc:	4619      	mov	r1, r3
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff fe16 	bl	8000d10 <crc16>
 80010e4:	4603      	mov	r3, r0
 80010e6:	827b      	strh	r3, [r7, #18]
	   x[num_of_coils/8 + 5] = slave_crc_send >> 8 & 0xFF;
 80010e8:	8a7b      	ldrh	r3, [r7, #18]
 80010ea:	0a1b      	lsrs	r3, r3, #8
 80010ec:	b299      	uxth	r1, r3
 80010ee:	89bb      	ldrh	r3, [r7, #12]
 80010f0:	08db      	lsrs	r3, r3, #3
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	3305      	adds	r3, #5
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	4413      	add	r3, r2
 80010fa:	b2ca      	uxtb	r2, r1
 80010fc:	701a      	strb	r2, [r3, #0]
	   x[num_of_coils/8 + 4] = slave_crc_send & 0xFF;
 80010fe:	89bb      	ldrh	r3, [r7, #12]
 8001100:	08db      	lsrs	r3, r3, #3
 8001102:	b29b      	uxth	r3, r3
 8001104:	3304      	adds	r3, #4
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	4413      	add	r3, r2
 800110a:	8a7a      	ldrh	r2, [r7, #18]
 800110c:	b2d2      	uxtb	r2, r2
 800110e:	701a      	strb	r2, [r3, #0]
		 sending_byte_count = num_of_coils/8 + 6;
 8001110:	89bb      	ldrh	r3, [r7, #12]
 8001112:	08db      	lsrs	r3, r3, #3
 8001114:	b29b      	uxth	r3, r3
 8001116:	3306      	adds	r3, #6
 8001118:	4a1a      	ldr	r2, [pc, #104]	; (8001184 <read_coils+0x408>)
 800111a:	6013      	str	r3, [r2, #0]
	}else if(num_of_coils % 8 != 0 && flag == 0){
 800111c:	e005      	b.n	800112a <read_coils+0x3ae>

	 }else{
		  flag = 1;
 800111e:	4b1a      	ldr	r3, [pc, #104]	; (8001188 <read_coils+0x40c>)
 8001120:	2201      	movs	r2, #1
 8001122:	601a      	str	r2, [r3, #0]
		 exception_code = 0x04;
 8001124:	4b19      	ldr	r3, [pc, #100]	; (800118c <read_coils+0x410>)
 8001126:	2204      	movs	r2, #4
 8001128:	801a      	strh	r2, [r3, #0]

	}
	 if(flag == 1){
 800112a:	4b17      	ldr	r3, [pc, #92]	; (8001188 <read_coils+0x40c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d124      	bne.n	800117c <read_coils+0x400>
	   x[0] = Slave_Address;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2201      	movs	r2, #1
 8001136:	701a      	strb	r2, [r3, #0]
		 x[1] = 0x81;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3301      	adds	r3, #1
 800113c:	2281      	movs	r2, #129	; 0x81
 800113e:	701a      	strb	r2, [r3, #0]
		 x[2] = exception_code;
 8001140:	4b12      	ldr	r3, [pc, #72]	; (800118c <read_coils+0x410>)
 8001142:	881a      	ldrh	r2, [r3, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3302      	adds	r3, #2
 8001148:	b2d2      	uxtb	r2, r2
 800114a:	701a      	strb	r2, [r3, #0]
		 slave_crc_send = crc16(x,3);
 800114c:	2103      	movs	r1, #3
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff fdde 	bl	8000d10 <crc16>
 8001154:	4603      	mov	r3, r0
 8001156:	827b      	strh	r3, [r7, #18]
	   x[4] = slave_crc_send >> 8 & 0xFF;
 8001158:	8a7b      	ldrh	r3, [r7, #18]
 800115a:	0a1b      	lsrs	r3, r3, #8
 800115c:	b29a      	uxth	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	3304      	adds	r3, #4
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	701a      	strb	r2, [r3, #0]
	   x[3] = slave_crc_send & 0xFF;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	3303      	adds	r3, #3
 800116a:	8a7a      	ldrh	r2, [r7, #18]
 800116c:	b2d2      	uxtb	r2, r2
 800116e:	701a      	strb	r2, [r3, #0]
		 sending_byte_count = 5;
 8001170:	4b04      	ldr	r3, [pc, #16]	; (8001184 <read_coils+0x408>)
 8001172:	2205      	movs	r2, #5
 8001174:	601a      	str	r2, [r3, #0]
		 flag = 0;
 8001176:	4b04      	ldr	r3, [pc, #16]	; (8001188 <read_coils+0x40c>)
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
	 }
};
 800117c:	bf00      	nop
 800117e:	3740      	adds	r7, #64	; 0x40
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	200003f8 	.word	0x200003f8
 8001188:	20002b18 	.word	0x20002b18
 800118c:	200003f4 	.word	0x200003f4

08001190 <read_descrete_data>:

//----------------------------------------------------------------------------------------------------------------------------------------
void read_descrete_data(uint16_t starting_Address,uint16_t num_of_inputs,uint8_t data[],uint8_t x[]){
 8001190:	b580      	push	{r7, lr}
 8001192:	b090      	sub	sp, #64	; 0x40
 8001194:	af00      	add	r7, sp, #0
 8001196:	60ba      	str	r2, [r7, #8]
 8001198:	607b      	str	r3, [r7, #4]
 800119a:	4603      	mov	r3, r0
 800119c:	81fb      	strh	r3, [r7, #14]
 800119e:	460b      	mov	r3, r1
 80011a0:	81bb      	strh	r3, [r7, #12]
	uint16_t slave_crc_send;
	if (num_of_inputs > 0x007D || num_of_inputs < 0){
 80011a2:	89bb      	ldrh	r3, [r7, #12]
 80011a4:	2b7d      	cmp	r3, #125	; 0x7d
 80011a6:	d906      	bls.n	80011b6 <read_descrete_data+0x26>
		flag = 1;// for setting the error needed
 80011a8:	4b8b      	ldr	r3, [pc, #556]	; (80013d8 <read_descrete_data+0x248>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	601a      	str	r2, [r3, #0]
		exception_code = 0x03; // exception code according to the datasheet
 80011ae:	4b8b      	ldr	r3, [pc, #556]	; (80013dc <read_descrete_data+0x24c>)
 80011b0:	2203      	movs	r2, #3
 80011b2:	801a      	strh	r2, [r3, #0]
 80011b4:	e1bf      	b.n	8001536 <read_descrete_data+0x3a6>
	}else if(starting_Address + num_of_inputs > len_of_coils){
 80011b6:	89fa      	ldrh	r2, [r7, #14]
 80011b8:	89bb      	ldrh	r3, [r7, #12]
 80011ba:	441a      	add	r2, r3
 80011bc:	4b88      	ldr	r3, [pc, #544]	; (80013e0 <read_descrete_data+0x250>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	dd06      	ble.n	80011d2 <read_descrete_data+0x42>
		flag = 1;
 80011c4:	4b84      	ldr	r3, [pc, #528]	; (80013d8 <read_descrete_data+0x248>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	601a      	str	r2, [r3, #0]
    exception_code = 0x02;
 80011ca:	4b84      	ldr	r3, [pc, #528]	; (80013dc <read_descrete_data+0x24c>)
 80011cc:	2202      	movs	r2, #2
 80011ce:	801a      	strh	r2, [r3, #0]
 80011d0:	e1b1      	b.n	8001536 <read_descrete_data+0x3a6>
	}else if(num_of_inputs % 8 == 0 && flag == 0){
 80011d2:	89bb      	ldrh	r3, [r7, #12]
 80011d4:	f003 0307 	and.w	r3, r3, #7
 80011d8:	b29b      	uxth	r3, r3
 80011da:	2b00      	cmp	r3, #0
 80011dc:	f040 8092 	bne.w	8001304 <read_descrete_data+0x174>
 80011e0:	4b7d      	ldr	r3, [pc, #500]	; (80013d8 <read_descrete_data+0x248>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	f040 808d 	bne.w	8001304 <read_descrete_data+0x174>
		 x[0] = Slave_Address;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2201      	movs	r2, #1
 80011ee:	701a      	strb	r2, [r3, #0]
		 x[1] = 0x02;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3301      	adds	r3, #1
 80011f4:	2202      	movs	r2, #2
 80011f6:	701a      	strb	r2, [r3, #0]
		 x[2] = num_of_inputs/8;
 80011f8:	89bb      	ldrh	r3, [r7, #12]
 80011fa:	08db      	lsrs	r3, r3, #3
 80011fc:	b29a      	uxth	r2, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	3302      	adds	r3, #2
 8001202:	b2d2      	uxtb	r2, r2
 8001204:	701a      	strb	r2, [r3, #0]
		 for(int i = 3; i<num_of_inputs/8 +3;i++){
 8001206:	2303      	movs	r3, #3
 8001208:	63fb      	str	r3, [r7, #60]	; 0x3c
 800120a:	e04e      	b.n	80012aa <read_descrete_data+0x11a>
			  uint8_t hi =0,lo =0;
 800120c:	2300      	movs	r3, #0
 800120e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8001212:	2300      	movs	r3, #0
 8001214:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
			  int temp = 1;
 8001218:	2301      	movs	r3, #1
 800121a:	637b      	str	r3, [r7, #52]	; 0x34
			  for(int j=0; j<4 ;j++){
 800121c:	2300      	movs	r3, #0
 800121e:	633b      	str	r3, [r7, #48]	; 0x30
 8001220:	e030      	b.n	8001284 <read_descrete_data+0xf4>
			     	lo += data[starting_Address + j + (i - 3)*8] * temp;
 8001222:	89fa      	ldrh	r2, [r7, #14]
 8001224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001226:	441a      	add	r2, r3
 8001228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800122a:	3b03      	subs	r3, #3
 800122c:	00db      	lsls	r3, r3, #3
 800122e:	4413      	add	r3, r2
 8001230:	461a      	mov	r2, r3
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	4413      	add	r3, r2
 8001236:	781a      	ldrb	r2, [r3, #0]
 8001238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800123a:	b2db      	uxtb	r3, r3
 800123c:	fb12 f303 	smulbb	r3, r2, r3
 8001240:	b2da      	uxtb	r2, r3
 8001242:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001246:	4413      	add	r3, r2
 8001248:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
					  hi += data[starting_Address + 4 + j + (i-3)*8] * temp;
 800124c:	89fb      	ldrh	r3, [r7, #14]
 800124e:	1d1a      	adds	r2, r3, #4
 8001250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001252:	441a      	add	r2, r3
 8001254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001256:	3b03      	subs	r3, #3
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	4413      	add	r3, r2
 800125c:	461a      	mov	r2, r3
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	4413      	add	r3, r2
 8001262:	781a      	ldrb	r2, [r3, #0]
 8001264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001266:	b2db      	uxtb	r3, r3
 8001268:	fb12 f303 	smulbb	r3, r2, r3
 800126c:	b2da      	uxtb	r2, r3
 800126e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001272:	4413      	add	r3, r2
 8001274:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					  temp =temp *2 ;
 8001278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	637b      	str	r3, [r7, #52]	; 0x34
			  for(int j=0; j<4 ;j++){
 800127e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001280:	3301      	adds	r3, #1
 8001282:	633b      	str	r3, [r7, #48]	; 0x30
 8001284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001286:	2b03      	cmp	r3, #3
 8001288:	ddcb      	ble.n	8001222 <read_descrete_data+0x92>
				}
				x[i] = (hi << 4|lo);
 800128a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800128e:	011b      	lsls	r3, r3, #4
 8001290:	b25a      	sxtb	r2, r3
 8001292:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 8001296:	4313      	orrs	r3, r2
 8001298:	b259      	sxtb	r1, r3
 800129a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	4413      	add	r3, r2
 80012a0:	b2ca      	uxtb	r2, r1
 80012a2:	701a      	strb	r2, [r3, #0]
		 for(int i = 3; i<num_of_inputs/8 +3;i++){
 80012a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012a6:	3301      	adds	r3, #1
 80012a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012aa:	89bb      	ldrh	r3, [r7, #12]
 80012ac:	08db      	lsrs	r3, r3, #3
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	3302      	adds	r3, #2
 80012b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80012b4:	429a      	cmp	r2, r3
 80012b6:	dda9      	ble.n	800120c <read_descrete_data+0x7c>
	 }
		 slave_crc_send = crc16(x,num_of_inputs/8 + 3);
 80012b8:	89bb      	ldrh	r3, [r7, #12]
 80012ba:	08db      	lsrs	r3, r3, #3
 80012bc:	b29b      	uxth	r3, r3
 80012be:	3303      	adds	r3, #3
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	4619      	mov	r1, r3
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff fd23 	bl	8000d10 <crc16>
 80012ca:	4603      	mov	r3, r0
 80012cc:	827b      	strh	r3, [r7, #18]
	   x[num_of_inputs/8 + 3] = slave_crc_send >> 8 & 0xFF;
 80012ce:	8a7b      	ldrh	r3, [r7, #18]
 80012d0:	0a1b      	lsrs	r3, r3, #8
 80012d2:	b299      	uxth	r1, r3
 80012d4:	89bb      	ldrh	r3, [r7, #12]
 80012d6:	08db      	lsrs	r3, r3, #3
 80012d8:	b29b      	uxth	r3, r3
 80012da:	3303      	adds	r3, #3
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	4413      	add	r3, r2
 80012e0:	b2ca      	uxtb	r2, r1
 80012e2:	701a      	strb	r2, [r3, #0]
	   x[num_of_inputs/8 + 4] = slave_crc_send & 0xFF;
 80012e4:	89bb      	ldrh	r3, [r7, #12]
 80012e6:	08db      	lsrs	r3, r3, #3
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	3304      	adds	r3, #4
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	4413      	add	r3, r2
 80012f0:	8a7a      	ldrh	r2, [r7, #18]
 80012f2:	b2d2      	uxtb	r2, r2
 80012f4:	701a      	strb	r2, [r3, #0]
	   sending_byte_count = num_of_inputs/8 + 5;
 80012f6:	89bb      	ldrh	r3, [r7, #12]
 80012f8:	08db      	lsrs	r3, r3, #3
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	3305      	adds	r3, #5
 80012fe:	4a39      	ldr	r2, [pc, #228]	; (80013e4 <read_descrete_data+0x254>)
 8001300:	6013      	str	r3, [r2, #0]
 8001302:	e118      	b.n	8001536 <read_descrete_data+0x3a6>
	}else if(num_of_inputs % 8 != 0 && flag == 0){
 8001304:	89bb      	ldrh	r3, [r7, #12]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	b29b      	uxth	r3, r3
 800130c:	2b00      	cmp	r3, #0
 800130e:	f000 810c 	beq.w	800152a <read_descrete_data+0x39a>
 8001312:	4b31      	ldr	r3, [pc, #196]	; (80013d8 <read_descrete_data+0x248>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2b00      	cmp	r3, #0
 8001318:	f040 8107 	bne.w	800152a <read_descrete_data+0x39a>
		 uint16_t temp2 = num_of_inputs;
 800131c:	89bb      	ldrh	r3, [r7, #12]
 800131e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		 x[0] = 0x01;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2201      	movs	r2, #1
 8001324:	701a      	strb	r2, [r3, #0]
		 x[1] = num_of_inputs/8 +1;
 8001326:	89bb      	ldrh	r3, [r7, #12]
 8001328:	08db      	lsrs	r3, r3, #3
 800132a:	b29b      	uxth	r3, r3
 800132c:	b2da      	uxtb	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	3301      	adds	r3, #1
 8001332:	3201      	adds	r2, #1
 8001334:	b2d2      	uxtb	r2, r2
 8001336:	701a      	strb	r2, [r3, #0]
		 for(int i = 3; i<num_of_inputs/8 +4;i++){
 8001338:	2303      	movs	r3, #3
 800133a:	62bb      	str	r3, [r7, #40]	; 0x28
 800133c:	e0c7      	b.n	80014ce <read_descrete_data+0x33e>
		    uint8_t hi =0,lo =0;
 800133e:	2300      	movs	r3, #0
 8001340:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001344:	2300      	movs	r3, #0
 8001346:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			  int temp = 1;
 800134a:	2301      	movs	r3, #1
 800134c:	623b      	str	r3, [r7, #32]
			  if(temp2 >= 8){
 800134e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001350:	2b07      	cmp	r3, #7
 8001352:	d937      	bls.n	80013c4 <read_descrete_data+0x234>
			     for(int k=0; k<4; k++){
 8001354:	2300      	movs	r3, #0
 8001356:	61fb      	str	r3, [r7, #28]
 8001358:	e030      	b.n	80013bc <read_descrete_data+0x22c>
						lo += data[starting_Address + k + (i-3)*8] * temp;
 800135a:	89fa      	ldrh	r2, [r7, #14]
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	441a      	add	r2, r3
 8001360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001362:	3b03      	subs	r3, #3
 8001364:	00db      	lsls	r3, r3, #3
 8001366:	4413      	add	r3, r2
 8001368:	461a      	mov	r2, r3
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	4413      	add	r3, r2
 800136e:	781a      	ldrb	r2, [r3, #0]
 8001370:	6a3b      	ldr	r3, [r7, #32]
 8001372:	b2db      	uxtb	r3, r3
 8001374:	fb12 f303 	smulbb	r3, r2, r3
 8001378:	b2da      	uxtb	r2, r3
 800137a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800137e:	4413      	add	r3, r2
 8001380:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					  hi += data[starting_Address + 4 + k + (i-2)*8] * temp;
 8001384:	89fb      	ldrh	r3, [r7, #14]
 8001386:	1d1a      	adds	r2, r3, #4
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	441a      	add	r2, r3
 800138c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800138e:	3b02      	subs	r3, #2
 8001390:	00db      	lsls	r3, r3, #3
 8001392:	4413      	add	r3, r2
 8001394:	461a      	mov	r2, r3
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	4413      	add	r3, r2
 800139a:	781a      	ldrb	r2, [r3, #0]
 800139c:	6a3b      	ldr	r3, [r7, #32]
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	fb12 f303 	smulbb	r3, r2, r3
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013aa:	4413      	add	r3, r2
 80013ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					  temp =temp *2 ;
 80013b0:	6a3b      	ldr	r3, [r7, #32]
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	623b      	str	r3, [r7, #32]
			     for(int k=0; k<4; k++){
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	3301      	adds	r3, #1
 80013ba:	61fb      	str	r3, [r7, #28]
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	2b03      	cmp	r3, #3
 80013c0:	ddcb      	ble.n	800135a <read_descrete_data+0x1ca>
 80013c2:	e071      	b.n	80014a8 <read_descrete_data+0x318>
					 }
				}else if(temp2<8 && temp2>4){
 80013c4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80013c6:	2b07      	cmp	r3, #7
 80013c8:	d849      	bhi.n	800145e <read_descrete_data+0x2ce>
 80013ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80013cc:	2b04      	cmp	r3, #4
 80013ce:	d946      	bls.n	800145e <read_descrete_data+0x2ce>
				   for(int r=0 ; r<4;r++){
 80013d0:	2300      	movs	r3, #0
 80013d2:	61bb      	str	r3, [r7, #24]
 80013d4:	e03f      	b.n	8001456 <read_descrete_data+0x2c6>
 80013d6:	bf00      	nop
 80013d8:	20002b18 	.word	0x20002b18
 80013dc:	200003f4 	.word	0x200003f4
 80013e0:	200001c8 	.word	0x200001c8
 80013e4:	200003f8 	.word	0x200003f8
					   lo += data[starting_Address + r + (i-3)*8] * temp;
 80013e8:	89fa      	ldrh	r2, [r7, #14]
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	441a      	add	r2, r3
 80013ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f0:	3b03      	subs	r3, #3
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	4413      	add	r3, r2
 80013f6:	461a      	mov	r2, r3
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	4413      	add	r3, r2
 80013fc:	781a      	ldrb	r2, [r3, #0]
 80013fe:	6a3b      	ldr	r3, [r7, #32]
 8001400:	b2db      	uxtb	r3, r3
 8001402:	fb12 f303 	smulbb	r3, r2, r3
 8001406:	b2da      	uxtb	r2, r3
 8001408:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800140c:	4413      	add	r3, r2
 800140e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						 if(temp2 - 4 - r > 0){
 8001412:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001414:	1f1a      	subs	r2, r3, #4
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b00      	cmp	r3, #0
 800141c:	dd15      	ble.n	800144a <read_descrete_data+0x2ba>
						    hi += data[starting_Address + 4 + r + (i-3)*8] * temp;
 800141e:	89fb      	ldrh	r3, [r7, #14]
 8001420:	1d1a      	adds	r2, r3, #4
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	441a      	add	r2, r3
 8001426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001428:	3b03      	subs	r3, #3
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	4413      	add	r3, r2
 800142e:	461a      	mov	r2, r3
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	4413      	add	r3, r2
 8001434:	781a      	ldrb	r2, [r3, #0]
 8001436:	6a3b      	ldr	r3, [r7, #32]
 8001438:	b2db      	uxtb	r3, r3
 800143a:	fb12 f303 	smulbb	r3, r2, r3
 800143e:	b2da      	uxtb	r2, r3
 8001440:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001444:	4413      	add	r3, r2
 8001446:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						 }
						 temp =temp *2 ;
 800144a:	6a3b      	ldr	r3, [r7, #32]
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	623b      	str	r3, [r7, #32]
				   for(int r=0 ; r<4;r++){
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	3301      	adds	r3, #1
 8001454:	61bb      	str	r3, [r7, #24]
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	2b03      	cmp	r3, #3
 800145a:	ddc5      	ble.n	80013e8 <read_descrete_data+0x258>
 800145c:	e024      	b.n	80014a8 <read_descrete_data+0x318>
					 }
				}else if(temp2<=4){
 800145e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001460:	2b04      	cmp	r3, #4
 8001462:	d821      	bhi.n	80014a8 <read_descrete_data+0x318>
				   for(int q=0; q<temp2; q++){
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
 8001468:	e01a      	b.n	80014a0 <read_descrete_data+0x310>
					    lo += data[starting_Address + q + (i-3)*8] * temp;
 800146a:	89fa      	ldrh	r2, [r7, #14]
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	441a      	add	r2, r3
 8001470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001472:	3b03      	subs	r3, #3
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	4413      	add	r3, r2
 8001478:	461a      	mov	r2, r3
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	4413      	add	r3, r2
 800147e:	781a      	ldrb	r2, [r3, #0]
 8001480:	6a3b      	ldr	r3, [r7, #32]
 8001482:	b2db      	uxtb	r3, r3
 8001484:	fb12 f303 	smulbb	r3, r2, r3
 8001488:	b2da      	uxtb	r2, r3
 800148a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800148e:	4413      	add	r3, r2
 8001490:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						  temp =temp *2 ;
 8001494:	6a3b      	ldr	r3, [r7, #32]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	623b      	str	r3, [r7, #32]
				   for(int q=0; q<temp2; q++){
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	3301      	adds	r3, #1
 800149e:	617b      	str	r3, [r7, #20]
 80014a0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80014a2:	697a      	ldr	r2, [r7, #20]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	dbe0      	blt.n	800146a <read_descrete_data+0x2da>
					 }
				}
				x[i] = (hi << 4|lo);
 80014a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014ac:	011b      	lsls	r3, r3, #4
 80014ae:	b25a      	sxtb	r2, r3
 80014b0:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 80014b4:	4313      	orrs	r3, r2
 80014b6:	b259      	sxtb	r1, r3
 80014b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	4413      	add	r3, r2
 80014be:	b2ca      	uxtb	r2, r1
 80014c0:	701a      	strb	r2, [r3, #0]
				temp2 -= 8;
 80014c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80014c4:	3b08      	subs	r3, #8
 80014c6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		 for(int i = 3; i<num_of_inputs/8 +4;i++){
 80014c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ca:	3301      	adds	r3, #1
 80014cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80014ce:	89bb      	ldrh	r3, [r7, #12]
 80014d0:	08db      	lsrs	r3, r3, #3
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	3303      	adds	r3, #3
 80014d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014d8:	429a      	cmp	r2, r3
 80014da:	f77f af30 	ble.w	800133e <read_descrete_data+0x1ae>
		 }
		 slave_crc_send = crc16(x,num_of_inputs/8+4);
 80014de:	89bb      	ldrh	r3, [r7, #12]
 80014e0:	08db      	lsrs	r3, r3, #3
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	3304      	adds	r3, #4
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	4619      	mov	r1, r3
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff fc10 	bl	8000d10 <crc16>
 80014f0:	4603      	mov	r3, r0
 80014f2:	827b      	strh	r3, [r7, #18]
	   x[num_of_inputs/8 + 4] = slave_crc_send >> 8 & 0xFF;
 80014f4:	8a7b      	ldrh	r3, [r7, #18]
 80014f6:	0a1b      	lsrs	r3, r3, #8
 80014f8:	b299      	uxth	r1, r3
 80014fa:	89bb      	ldrh	r3, [r7, #12]
 80014fc:	08db      	lsrs	r3, r3, #3
 80014fe:	b29b      	uxth	r3, r3
 8001500:	3304      	adds	r3, #4
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	4413      	add	r3, r2
 8001506:	b2ca      	uxtb	r2, r1
 8001508:	701a      	strb	r2, [r3, #0]
	   x[num_of_inputs/8 + 5] = slave_crc_send & 0xFF;
 800150a:	89bb      	ldrh	r3, [r7, #12]
 800150c:	08db      	lsrs	r3, r3, #3
 800150e:	b29b      	uxth	r3, r3
 8001510:	3305      	adds	r3, #5
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	4413      	add	r3, r2
 8001516:	8a7a      	ldrh	r2, [r7, #18]
 8001518:	b2d2      	uxtb	r2, r2
 800151a:	701a      	strb	r2, [r3, #0]
	   sending_byte_count = num_of_inputs/8 + 6;
 800151c:	89bb      	ldrh	r3, [r7, #12]
 800151e:	08db      	lsrs	r3, r3, #3
 8001520:	b29b      	uxth	r3, r3
 8001522:	3306      	adds	r3, #6
 8001524:	4a1a      	ldr	r2, [pc, #104]	; (8001590 <read_descrete_data+0x400>)
 8001526:	6013      	str	r3, [r2, #0]
	}else if(num_of_inputs % 8 != 0 && flag == 0){
 8001528:	e005      	b.n	8001536 <read_descrete_data+0x3a6>
	 }else{
		  flag = 1;
 800152a:	4b1a      	ldr	r3, [pc, #104]	; (8001594 <read_descrete_data+0x404>)
 800152c:	2201      	movs	r2, #1
 800152e:	601a      	str	r2, [r3, #0]
		  exception_code = 0x04;
 8001530:	4b19      	ldr	r3, [pc, #100]	; (8001598 <read_descrete_data+0x408>)
 8001532:	2204      	movs	r2, #4
 8001534:	801a      	strh	r2, [r3, #0]

	}
	 	 if(flag == 1){
 8001536:	4b17      	ldr	r3, [pc, #92]	; (8001594 <read_descrete_data+0x404>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d124      	bne.n	8001588 <read_descrete_data+0x3f8>
		 x[0] = Slave_Address;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2201      	movs	r2, #1
 8001542:	701a      	strb	r2, [r3, #0]
	   x[1] = 0x82;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3301      	adds	r3, #1
 8001548:	2282      	movs	r2, #130	; 0x82
 800154a:	701a      	strb	r2, [r3, #0]
		 x[2] = exception_code;
 800154c:	4b12      	ldr	r3, [pc, #72]	; (8001598 <read_descrete_data+0x408>)
 800154e:	881a      	ldrh	r2, [r3, #0]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3302      	adds	r3, #2
 8001554:	b2d2      	uxtb	r2, r2
 8001556:	701a      	strb	r2, [r3, #0]
		 slave_crc_send = crc16(x,3);
 8001558:	2103      	movs	r1, #3
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7ff fbd8 	bl	8000d10 <crc16>
 8001560:	4603      	mov	r3, r0
 8001562:	827b      	strh	r3, [r7, #18]
	   x[3] = slave_crc_send >> 8 & 0xFF;
 8001564:	8a7b      	ldrh	r3, [r7, #18]
 8001566:	0a1b      	lsrs	r3, r3, #8
 8001568:	b29a      	uxth	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	3303      	adds	r3, #3
 800156e:	b2d2      	uxtb	r2, r2
 8001570:	701a      	strb	r2, [r3, #0]
	   x[4] = slave_crc_send & 0xFF;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	3304      	adds	r3, #4
 8001576:	8a7a      	ldrh	r2, [r7, #18]
 8001578:	b2d2      	uxtb	r2, r2
 800157a:	701a      	strb	r2, [r3, #0]
		 sending_byte_count = 5;
 800157c:	4b04      	ldr	r3, [pc, #16]	; (8001590 <read_descrete_data+0x400>)
 800157e:	2205      	movs	r2, #5
 8001580:	601a      	str	r2, [r3, #0]
		 flag = 0;
 8001582:	4b04      	ldr	r3, [pc, #16]	; (8001594 <read_descrete_data+0x404>)
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
		}
}
 8001588:	bf00      	nop
 800158a:	3740      	adds	r7, #64	; 0x40
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	200003f8 	.word	0x200003f8
 8001594:	20002b18 	.word	0x20002b18
 8001598:	200003f4 	.word	0x200003f4

0800159c <read_holding_registers>:

//----------------------------------------------------------------------------------------------------------------------------------------
void read_holding_registers(uint16_t starting_Address,uint16_t num_of_regs,unsigned int regs[],uint8_t x[]){
 800159c:	b580      	push	{r7, lr}
 800159e:	b088      	sub	sp, #32
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60ba      	str	r2, [r7, #8]
 80015a4:	607b      	str	r3, [r7, #4]
 80015a6:	4603      	mov	r3, r0
 80015a8:	81fb      	strh	r3, [r7, #14]
 80015aa:	460b      	mov	r3, r1
 80015ac:	81bb      	strh	r3, [r7, #12]
  uint16_t slave_crc_send;
	if(num_of_regs > 0x007D || num_of_regs < 0){
 80015ae:	89bb      	ldrh	r3, [r7, #12]
 80015b0:	2b7d      	cmp	r3, #125	; 0x7d
 80015b2:	d906      	bls.n	80015c2 <read_holding_registers+0x26>
		flag = 1;
 80015b4:	4b5d      	ldr	r3, [pc, #372]	; (800172c <read_holding_registers+0x190>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	601a      	str	r2, [r3, #0]
		exception_code = 0x03;
 80015ba:	4b5d      	ldr	r3, [pc, #372]	; (8001730 <read_holding_registers+0x194>)
 80015bc:	2203      	movs	r2, #3
 80015be:	801a      	strh	r2, [r3, #0]
 80015c0:	e086      	b.n	80016d0 <read_holding_registers+0x134>
	}else if(num_of_regs + starting_Address > len_of_regs){
 80015c2:	89ba      	ldrh	r2, [r7, #12]
 80015c4:	89fb      	ldrh	r3, [r7, #14]
 80015c6:	441a      	add	r2, r3
 80015c8:	4b5a      	ldr	r3, [pc, #360]	; (8001734 <read_holding_registers+0x198>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	dd06      	ble.n	80015de <read_holding_registers+0x42>
	  flag = 1;
 80015d0:	4b56      	ldr	r3, [pc, #344]	; (800172c <read_holding_registers+0x190>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	601a      	str	r2, [r3, #0]
		exception_code = 0x02;
 80015d6:	4b56      	ldr	r3, [pc, #344]	; (8001730 <read_holding_registers+0x194>)
 80015d8:	2202      	movs	r2, #2
 80015da:	801a      	strh	r2, [r3, #0]
 80015dc:	e078      	b.n	80016d0 <read_holding_registers+0x134>
	}else if(num_of_regs + starting_Address < len_of_regs || num_of_regs > 0){
 80015de:	89ba      	ldrh	r2, [r7, #12]
 80015e0:	89fb      	ldrh	r3, [r7, #14]
 80015e2:	441a      	add	r2, r3
 80015e4:	4b53      	ldr	r3, [pc, #332]	; (8001734 <read_holding_registers+0x198>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	db02      	blt.n	80015f2 <read_holding_registers+0x56>
 80015ec:	89bb      	ldrh	r3, [r7, #12]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d068      	beq.n	80016c4 <read_holding_registers+0x128>
	  x[0] = Slave_Address;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2201      	movs	r2, #1
 80015f6:	701a      	strb	r2, [r3, #0]
	  x[1] = 0x03;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3301      	adds	r3, #1
 80015fc:	2203      	movs	r2, #3
 80015fe:	701a      	strb	r2, [r3, #0]
	  x[2] = num_of_regs * 2;
 8001600:	89bb      	ldrh	r3, [r7, #12]
 8001602:	b2da      	uxtb	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3302      	adds	r3, #2
 8001608:	0052      	lsls	r2, r2, #1
 800160a:	b2d2      	uxtb	r2, r2
 800160c:	701a      	strb	r2, [r3, #0]
	  int round=0;
 800160e:	2300      	movs	r3, #0
 8001610:	61fb      	str	r3, [r7, #28]
	  for(int i=3; i<num_of_regs*2 + 3; i++){
 8001612:	2303      	movs	r3, #3
 8001614:	61bb      	str	r3, [r7, #24]
 8001616:	e02c      	b.n	8001672 <read_holding_registers+0xd6>
		  if(i%2 == 1){
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	2b00      	cmp	r3, #0
 800161c:	f003 0301 	and.w	r3, r3, #1
 8001620:	bfb8      	it	lt
 8001622:	425b      	neglt	r3, r3
 8001624:	2b01      	cmp	r3, #1
 8001626:	d10d      	bne.n	8001644 <read_holding_registers+0xa8>
			  x[i] = regs[round + starting_Address]>>8 & 0xFF;
 8001628:	89fa      	ldrh	r2, [r7, #14]
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	4413      	add	r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	68ba      	ldr	r2, [r7, #8]
 8001632:	4413      	add	r3, r2
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	0a19      	lsrs	r1, r3, #8
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	4413      	add	r3, r2
 800163e:	b2ca      	uxtb	r2, r1
 8001640:	701a      	strb	r2, [r3, #0]
 8001642:	e013      	b.n	800166c <read_holding_registers+0xd0>
		  }else if(i%2 == 0){
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	2b00      	cmp	r3, #0
 800164c:	d10e      	bne.n	800166c <read_holding_registers+0xd0>
			  x[i] = regs[round + starting_Address] & 0xFF;
 800164e:	89fa      	ldrh	r2, [r7, #14]
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	4413      	add	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	68ba      	ldr	r2, [r7, #8]
 8001658:	4413      	add	r3, r2
 800165a:	6819      	ldr	r1, [r3, #0]
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	4413      	add	r3, r2
 8001662:	b2ca      	uxtb	r2, r1
 8001664:	701a      	strb	r2, [r3, #0]
			  round++;
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	3301      	adds	r3, #1
 800166a:	61fb      	str	r3, [r7, #28]
	  for(int i=3; i<num_of_regs*2 + 3; i++){
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	3301      	adds	r3, #1
 8001670:	61bb      	str	r3, [r7, #24]
 8001672:	89bb      	ldrh	r3, [r7, #12]
 8001674:	3301      	adds	r3, #1
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	429a      	cmp	r2, r3
 800167c:	ddcc      	ble.n	8001618 <read_holding_registers+0x7c>
		  }
		}
	    slave_crc_send = crc16(x,num_of_regs * 2 + 3);
 800167e:	89bb      	ldrh	r3, [r7, #12]
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	b29b      	uxth	r3, r3
 8001684:	3303      	adds	r3, #3
 8001686:	b29b      	uxth	r3, r3
 8001688:	4619      	mov	r1, r3
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff fb40 	bl	8000d10 <crc16>
 8001690:	4603      	mov	r3, r0
 8001692:	82fb      	strh	r3, [r7, #22]
      x[num_of_regs*2 + 4] = 	slave_crc_send >> 8 & 0xFF;	// this was changede 3 with 4 to see modbus master change
 8001694:	8afb      	ldrh	r3, [r7, #22]
 8001696:	0a1b      	lsrs	r3, r3, #8
 8001698:	b299      	uxth	r1, r3
 800169a:	89bb      	ldrh	r3, [r7, #12]
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	3304      	adds	r3, #4
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	4413      	add	r3, r2
 80016a4:	b2ca      	uxtb	r2, r1
 80016a6:	701a      	strb	r2, [r3, #0]
      x[num_of_regs*2 + 3] = 	slave_crc_send & 0xFF;
 80016a8:	89bb      	ldrh	r3, [r7, #12]
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	3303      	adds	r3, #3
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	4413      	add	r3, r2
 80016b2:	8afa      	ldrh	r2, [r7, #22]
 80016b4:	b2d2      	uxtb	r2, r2
 80016b6:	701a      	strb	r2, [r3, #0]
      sending_byte_count = num_of_regs * 2 + 5;
 80016b8:	89bb      	ldrh	r3, [r7, #12]
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	3305      	adds	r3, #5
 80016be:	4a1e      	ldr	r2, [pc, #120]	; (8001738 <read_holding_registers+0x19c>)
 80016c0:	6013      	str	r3, [r2, #0]
	}else if(num_of_regs + starting_Address < len_of_regs || num_of_regs > 0){
 80016c2:	e005      	b.n	80016d0 <read_holding_registers+0x134>
	}else{
	  flag = 1;
 80016c4:	4b19      	ldr	r3, [pc, #100]	; (800172c <read_holding_registers+0x190>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	601a      	str	r2, [r3, #0]
		exception_code =0x04;
 80016ca:	4b19      	ldr	r3, [pc, #100]	; (8001730 <read_holding_registers+0x194>)
 80016cc:	2204      	movs	r2, #4
 80016ce:	801a      	strh	r2, [r3, #0]
	}
	if(flag == 1){
 80016d0:	4b16      	ldr	r3, [pc, #88]	; (800172c <read_holding_registers+0x190>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d124      	bne.n	8001722 <read_holding_registers+0x186>
		x[0] = Slave_Address;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2201      	movs	r2, #1
 80016dc:	701a      	strb	r2, [r3, #0]
		x[1] = 0x83;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	3301      	adds	r3, #1
 80016e2:	2283      	movs	r2, #131	; 0x83
 80016e4:	701a      	strb	r2, [r3, #0]
		x[2] = exception_code;
 80016e6:	4b12      	ldr	r3, [pc, #72]	; (8001730 <read_holding_registers+0x194>)
 80016e8:	881a      	ldrh	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	3302      	adds	r3, #2
 80016ee:	b2d2      	uxtb	r2, r2
 80016f0:	701a      	strb	r2, [r3, #0]
		slave_crc_send = crc16(x,3);
 80016f2:	2103      	movs	r1, #3
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7ff fb0b 	bl	8000d10 <crc16>
 80016fa:	4603      	mov	r3, r0
 80016fc:	82fb      	strh	r3, [r7, #22]
	  x[4] = slave_crc_send >> 8 & 0xFF;
 80016fe:	8afb      	ldrh	r3, [r7, #22]
 8001700:	0a1b      	lsrs	r3, r3, #8
 8001702:	b29a      	uxth	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3304      	adds	r3, #4
 8001708:	b2d2      	uxtb	r2, r2
 800170a:	701a      	strb	r2, [r3, #0]
	  x[3] = slave_crc_send & 0xFF;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3303      	adds	r3, #3
 8001710:	8afa      	ldrh	r2, [r7, #22]
 8001712:	b2d2      	uxtb	r2, r2
 8001714:	701a      	strb	r2, [r3, #0]
		sending_byte_count = 5;
 8001716:	4b08      	ldr	r3, [pc, #32]	; (8001738 <read_holding_registers+0x19c>)
 8001718:	2205      	movs	r2, #5
 800171a:	601a      	str	r2, [r3, #0]
		flag = 0;
 800171c:	4b03      	ldr	r3, [pc, #12]	; (800172c <read_holding_registers+0x190>)
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
	}
}
 8001722:	bf00      	nop
 8001724:	3720      	adds	r7, #32
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20002b18 	.word	0x20002b18
 8001730:	200003f4 	.word	0x200003f4
 8001734:	20000190 	.word	0x20000190
 8001738:	200003f8 	.word	0x200003f8

0800173c <read_input_registers>:

//----------------------------------------------------------------------------------------------------------------------------------------
void read_input_registers(uint16_t starting_Address,uint16_t num_of_regs,unsigned int input_regs[],uint8_t x[]){
 800173c:	b580      	push	{r7, lr}
 800173e:	b088      	sub	sp, #32
 8001740:	af00      	add	r7, sp, #0
 8001742:	60ba      	str	r2, [r7, #8]
 8001744:	607b      	str	r3, [r7, #4]
 8001746:	4603      	mov	r3, r0
 8001748:	81fb      	strh	r3, [r7, #14]
 800174a:	460b      	mov	r3, r1
 800174c:	81bb      	strh	r3, [r7, #12]
  uint16_t slave_crc_send;
	if(num_of_regs > 0x007D || num_of_regs < 0){
 800174e:	89bb      	ldrh	r3, [r7, #12]
 8001750:	2b7d      	cmp	r3, #125	; 0x7d
 8001752:	d906      	bls.n	8001762 <read_input_registers+0x26>
		flag = 1;
 8001754:	4b5d      	ldr	r3, [pc, #372]	; (80018cc <read_input_registers+0x190>)
 8001756:	2201      	movs	r2, #1
 8001758:	601a      	str	r2, [r3, #0]
		exception_code = 0x04;
 800175a:	4b5d      	ldr	r3, [pc, #372]	; (80018d0 <read_input_registers+0x194>)
 800175c:	2204      	movs	r2, #4
 800175e:	801a      	strh	r2, [r3, #0]
 8001760:	e086      	b.n	8001870 <read_input_registers+0x134>
	}else if(num_of_regs + starting_Address > len_of_regs){
 8001762:	89ba      	ldrh	r2, [r7, #12]
 8001764:	89fb      	ldrh	r3, [r7, #14]
 8001766:	441a      	add	r2, r3
 8001768:	4b5a      	ldr	r3, [pc, #360]	; (80018d4 <read_input_registers+0x198>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	429a      	cmp	r2, r3
 800176e:	dd06      	ble.n	800177e <read_input_registers+0x42>
	  flag = 1;
 8001770:	4b56      	ldr	r3, [pc, #344]	; (80018cc <read_input_registers+0x190>)
 8001772:	2201      	movs	r2, #1
 8001774:	601a      	str	r2, [r3, #0]
		exception_code = 0x02;
 8001776:	4b56      	ldr	r3, [pc, #344]	; (80018d0 <read_input_registers+0x194>)
 8001778:	2202      	movs	r2, #2
 800177a:	801a      	strh	r2, [r3, #0]
 800177c:	e078      	b.n	8001870 <read_input_registers+0x134>
	}else if(num_of_regs + starting_Address < len_of_regs || num_of_regs > 0){
 800177e:	89ba      	ldrh	r2, [r7, #12]
 8001780:	89fb      	ldrh	r3, [r7, #14]
 8001782:	441a      	add	r2, r3
 8001784:	4b53      	ldr	r3, [pc, #332]	; (80018d4 <read_input_registers+0x198>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	429a      	cmp	r2, r3
 800178a:	db02      	blt.n	8001792 <read_input_registers+0x56>
 800178c:	89bb      	ldrh	r3, [r7, #12]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d068      	beq.n	8001864 <read_input_registers+0x128>
	x[0] = Slave_Address;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2201      	movs	r2, #1
 8001796:	701a      	strb	r2, [r3, #0]
	x[1] = 0x03;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3301      	adds	r3, #1
 800179c:	2203      	movs	r2, #3
 800179e:	701a      	strb	r2, [r3, #0]
	x[1] = num_of_regs * 2;
 80017a0:	89bb      	ldrh	r3, [r7, #12]
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3301      	adds	r3, #1
 80017a8:	0052      	lsls	r2, r2, #1
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	701a      	strb	r2, [r3, #0]
	int round=0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61fb      	str	r3, [r7, #28]
	for(int i=3; i<num_of_regs*2 + 3; i++){
 80017b2:	2303      	movs	r3, #3
 80017b4:	61bb      	str	r3, [r7, #24]
 80017b6:	e02c      	b.n	8001812 <read_input_registers+0xd6>
		if(i%2 == 1){
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	bfb8      	it	lt
 80017c2:	425b      	neglt	r3, r3
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d10d      	bne.n	80017e4 <read_input_registers+0xa8>
			x[i] = input_regs[round + starting_Address]>>8 & 0xFF;
 80017c8:	89fa      	ldrh	r2, [r7, #14]
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	4413      	add	r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	68ba      	ldr	r2, [r7, #8]
 80017d2:	4413      	add	r3, r2
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	0a19      	lsrs	r1, r3, #8
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	4413      	add	r3, r2
 80017de:	b2ca      	uxtb	r2, r1
 80017e0:	701a      	strb	r2, [r3, #0]
 80017e2:	e013      	b.n	800180c <read_input_registers+0xd0>
		}else if(i%2 == 0){
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d10e      	bne.n	800180c <read_input_registers+0xd0>
			x[i] = input_regs[round + starting_Address] & 0xFF;
 80017ee:	89fa      	ldrh	r2, [r7, #14]
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	4413      	add	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	68ba      	ldr	r2, [r7, #8]
 80017f8:	4413      	add	r3, r2
 80017fa:	6819      	ldr	r1, [r3, #0]
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	4413      	add	r3, r2
 8001802:	b2ca      	uxtb	r2, r1
 8001804:	701a      	strb	r2, [r3, #0]
			round++;
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	3301      	adds	r3, #1
 800180a:	61fb      	str	r3, [r7, #28]
	for(int i=3; i<num_of_regs*2 + 3; i++){
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	3301      	adds	r3, #1
 8001810:	61bb      	str	r3, [r7, #24]
 8001812:	89bb      	ldrh	r3, [r7, #12]
 8001814:	3301      	adds	r3, #1
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	429a      	cmp	r2, r3
 800181c:	ddcc      	ble.n	80017b8 <read_input_registers+0x7c>
		}
		}
	slave_crc_send = crc16(x,num_of_regs*2 + 3);
 800181e:	89bb      	ldrh	r3, [r7, #12]
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	b29b      	uxth	r3, r3
 8001824:	3303      	adds	r3, #3
 8001826:	b29b      	uxth	r3, r3
 8001828:	4619      	mov	r1, r3
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff fa70 	bl	8000d10 <crc16>
 8001830:	4603      	mov	r3, r0
 8001832:	82fb      	strh	r3, [r7, #22]
  x[num_of_regs*2 + 4] = 	slave_crc_send >> 8 & 0xFF;
 8001834:	8afb      	ldrh	r3, [r7, #22]
 8001836:	0a1b      	lsrs	r3, r3, #8
 8001838:	b299      	uxth	r1, r3
 800183a:	89bb      	ldrh	r3, [r7, #12]
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	3304      	adds	r3, #4
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	4413      	add	r3, r2
 8001844:	b2ca      	uxtb	r2, r1
 8001846:	701a      	strb	r2, [r3, #0]
  x[num_of_regs*2 + 3] = 	slave_crc_send & 0xFF;
 8001848:	89bb      	ldrh	r3, [r7, #12]
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	3303      	adds	r3, #3
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	4413      	add	r3, r2
 8001852:	8afa      	ldrh	r2, [r7, #22]
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	701a      	strb	r2, [r3, #0]
  sending_byte_count = num_of_regs * 2 + 5;
 8001858:	89bb      	ldrh	r3, [r7, #12]
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	3305      	adds	r3, #5
 800185e:	4a1e      	ldr	r2, [pc, #120]	; (80018d8 <read_input_registers+0x19c>)
 8001860:	6013      	str	r3, [r2, #0]
	}else if(num_of_regs + starting_Address < len_of_regs || num_of_regs > 0){
 8001862:	e005      	b.n	8001870 <read_input_registers+0x134>
	}else{
	  flag = 1;
 8001864:	4b19      	ldr	r3, [pc, #100]	; (80018cc <read_input_registers+0x190>)
 8001866:	2201      	movs	r2, #1
 8001868:	601a      	str	r2, [r3, #0]
		exception_code =0x04;
 800186a:	4b19      	ldr	r3, [pc, #100]	; (80018d0 <read_input_registers+0x194>)
 800186c:	2204      	movs	r2, #4
 800186e:	801a      	strh	r2, [r3, #0]
	}
	if(flag == 1){
 8001870:	4b16      	ldr	r3, [pc, #88]	; (80018cc <read_input_registers+0x190>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d124      	bne.n	80018c2 <read_input_registers+0x186>
		x[0] = Slave_Address;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2201      	movs	r2, #1
 800187c:	701a      	strb	r2, [r3, #0]
		x[1] = 0x84;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	3301      	adds	r3, #1
 8001882:	2284      	movs	r2, #132	; 0x84
 8001884:	701a      	strb	r2, [r3, #0]
		x[2] = exception_code;
 8001886:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <read_input_registers+0x194>)
 8001888:	881a      	ldrh	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	3302      	adds	r3, #2
 800188e:	b2d2      	uxtb	r2, r2
 8001890:	701a      	strb	r2, [r3, #0]
		slave_crc_send = crc16(x,3);
 8001892:	2103      	movs	r1, #3
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f7ff fa3b 	bl	8000d10 <crc16>
 800189a:	4603      	mov	r3, r0
 800189c:	82fb      	strh	r3, [r7, #22]
	  x[4] = slave_crc_send >> 8 & 0xFF;
 800189e:	8afb      	ldrh	r3, [r7, #22]
 80018a0:	0a1b      	lsrs	r3, r3, #8
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3304      	adds	r3, #4
 80018a8:	b2d2      	uxtb	r2, r2
 80018aa:	701a      	strb	r2, [r3, #0]
	  x[3] = slave_crc_send & 0xFF;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	3303      	adds	r3, #3
 80018b0:	8afa      	ldrh	r2, [r7, #22]
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	701a      	strb	r2, [r3, #0]
		sending_byte_count = 5;
 80018b6:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <read_input_registers+0x19c>)
 80018b8:	2205      	movs	r2, #5
 80018ba:	601a      	str	r2, [r3, #0]
		flag = 0;
 80018bc:	4b03      	ldr	r3, [pc, #12]	; (80018cc <read_input_registers+0x190>)
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
	}
}
 80018c2:	bf00      	nop
 80018c4:	3720      	adds	r7, #32
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20002b18 	.word	0x20002b18
 80018d0:	200003f4 	.word	0x200003f4
 80018d4:	20000190 	.word	0x20000190
 80018d8:	200003f8 	.word	0x200003f8

080018dc <write_single_coil>:

//----------------------------------------------------------------------------------------------------------------------------------------
void write_single_coil(uint16_t Address,uint16_t cmd, uint8_t coils[],uint8_t x[]){
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60ba      	str	r2, [r7, #8]
 80018e4:	607b      	str	r3, [r7, #4]
 80018e6:	4603      	mov	r3, r0
 80018e8:	81fb      	strh	r3, [r7, #14]
 80018ea:	460b      	mov	r3, r1
 80018ec:	81bb      	strh	r3, [r7, #12]
    uint16_t slave_crc_send;
    if(cmd != 0x0000 && cmd != 0xFF00){
 80018ee:	89bb      	ldrh	r3, [r7, #12]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d00a      	beq.n	800190a <write_single_coil+0x2e>
 80018f4:	89bb      	ldrh	r3, [r7, #12]
 80018f6:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 80018fa:	d006      	beq.n	800190a <write_single_coil+0x2e>
			flag= 1;
 80018fc:	4b4e      	ldr	r3, [pc, #312]	; (8001a38 <write_single_coil+0x15c>)
 80018fe:	2201      	movs	r2, #1
 8001900:	601a      	str	r2, [r3, #0]
		  exception_code = 0x03;
 8001902:	4b4e      	ldr	r3, [pc, #312]	; (8001a3c <write_single_coil+0x160>)
 8001904:	2203      	movs	r2, #3
 8001906:	801a      	strh	r2, [r3, #0]
 8001908:	e069      	b.n	80019de <write_single_coil+0x102>
		}else if(Address > len_of_coils || Address<0){
 800190a:	89fa      	ldrh	r2, [r7, #14]
 800190c:	4b4c      	ldr	r3, [pc, #304]	; (8001a40 <write_single_coil+0x164>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	429a      	cmp	r2, r3
 8001912:	dd06      	ble.n	8001922 <write_single_coil+0x46>
		  flag = 1;
 8001914:	4b48      	ldr	r3, [pc, #288]	; (8001a38 <write_single_coil+0x15c>)
 8001916:	2201      	movs	r2, #1
 8001918:	601a      	str	r2, [r3, #0]
			exception_code = 0x02;
 800191a:	4b48      	ldr	r3, [pc, #288]	; (8001a3c <write_single_coil+0x160>)
 800191c:	2202      	movs	r2, #2
 800191e:	801a      	strh	r2, [r3, #0]
 8001920:	e05d      	b.n	80019de <write_single_coil+0x102>
		}else if(cmd == 0x0000 || cmd == 0xFF00){
 8001922:	89bb      	ldrh	r3, [r7, #12]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <write_single_coil+0x54>
 8001928:	89bb      	ldrh	r3, [r7, #12]
 800192a:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800192e:	d150      	bne.n	80019d2 <write_single_coil+0xf6>
    	x[0] = Slave_Address;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	701a      	strb	r2, [r3, #0]
			x[1] = 0x05;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	3301      	adds	r3, #1
 800193a:	2205      	movs	r2, #5
 800193c:	701a      	strb	r2, [r3, #0]
    	x[2] = (Address >> 8) & 0xFF;
 800193e:	89fb      	ldrh	r3, [r7, #14]
 8001940:	0a1b      	lsrs	r3, r3, #8
 8001942:	b29a      	uxth	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	3302      	adds	r3, #2
 8001948:	b2d2      	uxtb	r2, r2
 800194a:	701a      	strb	r2, [r3, #0]
    	x[3] =  Address  & 0xFF;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3303      	adds	r3, #3
 8001950:	89fa      	ldrh	r2, [r7, #14]
 8001952:	b2d2      	uxtb	r2, r2
 8001954:	701a      	strb	r2, [r3, #0]
    	if(cmd == 0xFF00){
 8001956:	89bb      	ldrh	r3, [r7, #12]
 8001958:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800195c:	d110      	bne.n	8001980 <write_single_coil+0xa4>
    		coils[Address] = 1;
 800195e:	89fb      	ldrh	r3, [r7, #14]
 8001960:	68ba      	ldr	r2, [r7, #8]
 8001962:	4413      	add	r3, r2
 8001964:	2201      	movs	r2, #1
 8001966:	701a      	strb	r2, [r3, #0]
				ttt = 15;
 8001968:	4b36      	ldr	r3, [pc, #216]	; (8001a44 <write_single_coil+0x168>)
 800196a:	220f      	movs	r2, #15
 800196c:	601a      	str	r2, [r3, #0]
        x[4] = 0xFF;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	3304      	adds	r3, #4
 8001972:	22ff      	movs	r2, #255	; 0xff
 8001974:	701a      	strb	r2, [r3, #0]
        x[5] = 0x00;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	3305      	adds	r3, #5
 800197a:	2200      	movs	r2, #0
 800197c:	701a      	strb	r2, [r3, #0]
 800197e:	e012      	b.n	80019a6 <write_single_coil+0xca>
    	}else if(cmd == 0x0000){
 8001980:	89bb      	ldrh	r3, [r7, #12]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d10f      	bne.n	80019a6 <write_single_coil+0xca>
    		coils[Address] = 0;
 8001986:	89fb      	ldrh	r3, [r7, #14]
 8001988:	68ba      	ldr	r2, [r7, #8]
 800198a:	4413      	add	r3, r2
 800198c:	2200      	movs	r2, #0
 800198e:	701a      	strb	r2, [r3, #0]
        x[4] = 0x00;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3304      	adds	r3, #4
 8001994:	2200      	movs	r2, #0
 8001996:	701a      	strb	r2, [r3, #0]
        x[5] = 0x00;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3305      	adds	r3, #5
 800199c:	2200      	movs	r2, #0
 800199e:	701a      	strb	r2, [r3, #0]
				ttt = 14;
 80019a0:	4b28      	ldr	r3, [pc, #160]	; (8001a44 <write_single_coil+0x168>)
 80019a2:	220e      	movs	r2, #14
 80019a4:	601a      	str	r2, [r3, #0]
    	}
			slave_crc_send = crc16(x,6);
 80019a6:	2106      	movs	r1, #6
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f7ff f9b1 	bl	8000d10 <crc16>
 80019ae:	4603      	mov	r3, r0
 80019b0:	82fb      	strh	r3, [r7, #22]
			x[7] = slave_crc_send >> 8 & 0xFF;
 80019b2:	8afb      	ldrh	r3, [r7, #22]
 80019b4:	0a1b      	lsrs	r3, r3, #8
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3307      	adds	r3, #7
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	701a      	strb	r2, [r3, #0]
			x[6] = slave_crc_send & 0xFF;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3306      	adds	r3, #6
 80019c4:	8afa      	ldrh	r2, [r7, #22]
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	701a      	strb	r2, [r3, #0]
			sending_byte_count = 8;
 80019ca:	4b1f      	ldr	r3, [pc, #124]	; (8001a48 <write_single_coil+0x16c>)
 80019cc:	2208      	movs	r2, #8
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	e005      	b.n	80019de <write_single_coil+0x102>
		}else{
			  flag = 1;
 80019d2:	4b19      	ldr	r3, [pc, #100]	; (8001a38 <write_single_coil+0x15c>)
 80019d4:	2201      	movs	r2, #1
 80019d6:	601a      	str	r2, [r3, #0]
    		exception_code = 0x04;
 80019d8:	4b18      	ldr	r3, [pc, #96]	; (8001a3c <write_single_coil+0x160>)
 80019da:	2204      	movs	r2, #4
 80019dc:	801a      	strh	r2, [r3, #0]
    	}
		if(flag == 1){
 80019de:	4b16      	ldr	r3, [pc, #88]	; (8001a38 <write_single_coil+0x15c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d124      	bne.n	8001a30 <write_single_coil+0x154>
		x[0] = Slave_Address;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2201      	movs	r2, #1
 80019ea:	701a      	strb	r2, [r3, #0]
		x[1] = 0x85;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3301      	adds	r3, #1
 80019f0:	2285      	movs	r2, #133	; 0x85
 80019f2:	701a      	strb	r2, [r3, #0]
		x[2] = exception_code;
 80019f4:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <write_single_coil+0x160>)
 80019f6:	881a      	ldrh	r2, [r3, #0]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	3302      	adds	r3, #2
 80019fc:	b2d2      	uxtb	r2, r2
 80019fe:	701a      	strb	r2, [r3, #0]
		slave_crc_send = crc16(x,3);
 8001a00:	2103      	movs	r1, #3
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff f984 	bl	8000d10 <crc16>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	82fb      	strh	r3, [r7, #22]
	  x[4] = slave_crc_send >> 8 & 0xFF;
 8001a0c:	8afb      	ldrh	r3, [r7, #22]
 8001a0e:	0a1b      	lsrs	r3, r3, #8
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	3304      	adds	r3, #4
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	701a      	strb	r2, [r3, #0]
	  x[3] = slave_crc_send & 0xFF;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	3303      	adds	r3, #3
 8001a1e:	8afa      	ldrh	r2, [r7, #22]
 8001a20:	b2d2      	uxtb	r2, r2
 8001a22:	701a      	strb	r2, [r3, #0]
		sending_byte_count = 5;
 8001a24:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <write_single_coil+0x16c>)
 8001a26:	2205      	movs	r2, #5
 8001a28:	601a      	str	r2, [r3, #0]
		flag = 0;
 8001a2a:	4b03      	ldr	r3, [pc, #12]	; (8001a38 <write_single_coil+0x15c>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
		}
}
 8001a30:	bf00      	nop
 8001a32:	3718      	adds	r7, #24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20002b18 	.word	0x20002b18
 8001a3c:	200003f4 	.word	0x200003f4
 8001a40:	200001c8 	.word	0x200001c8
 8001a44:	20002b24 	.word	0x20002b24
 8001a48:	200003f8 	.word	0x200003f8

08001a4c <write_single_register>:

//----------------------------------------------------------------------------------------------------------------------------------------
void write_single_register(uint16_t Address,uint16_t cmd, unsigned int regs[],uint8_t x[]){
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60ba      	str	r2, [r7, #8]
 8001a54:	607b      	str	r3, [r7, #4]
 8001a56:	4603      	mov	r3, r0
 8001a58:	81fb      	strh	r3, [r7, #14]
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	81bb      	strh	r3, [r7, #12]
    uint16_t slave_crc_send;
	  if(cmd > 0xFFFF || cmd < 0){
			flag = 1;
			exception_code = 0x03;
		}else if(Address < 0 || Address > len_of_regs){
 8001a5e:	89fa      	ldrh	r2, [r7, #14]
 8001a60:	4b3e      	ldr	r3, [pc, #248]	; (8001b5c <write_single_register+0x110>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	dd06      	ble.n	8001a76 <write_single_register+0x2a>
			flag = 1;
 8001a68:	4b3d      	ldr	r3, [pc, #244]	; (8001b60 <write_single_register+0x114>)
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	601a      	str	r2, [r3, #0]
			exception_code =0x02;
 8001a6e:	4b3d      	ldr	r3, [pc, #244]	; (8001b64 <write_single_register+0x118>)
 8001a70:	2202      	movs	r2, #2
 8001a72:	801a      	strh	r2, [r3, #0]
 8001a74:	e044      	b.n	8001b00 <write_single_register+0xb4>
		}else if(flag == 0){
 8001a76:	4b3a      	ldr	r3, [pc, #232]	; (8001b60 <write_single_register+0x114>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d13a      	bne.n	8001af4 <write_single_register+0xa8>
			regs[Address] = cmd;
 8001a7e:	89fb      	ldrh	r3, [r7, #14]
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	68ba      	ldr	r2, [r7, #8]
 8001a84:	4413      	add	r3, r2
 8001a86:	89ba      	ldrh	r2, [r7, #12]
 8001a88:	601a      	str	r2, [r3, #0]
    	x[0] = Slave_Address;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	701a      	strb	r2, [r3, #0]
			x[1] = 0x06;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3301      	adds	r3, #1
 8001a94:	2206      	movs	r2, #6
 8001a96:	701a      	strb	r2, [r3, #0]
    	x[2] = (Address >> 8) & 0xFF;
 8001a98:	89fb      	ldrh	r3, [r7, #14]
 8001a9a:	0a1b      	lsrs	r3, r3, #8
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	3302      	adds	r3, #2
 8001aa2:	b2d2      	uxtb	r2, r2
 8001aa4:	701a      	strb	r2, [r3, #0]
    	x[3] =  Address  & 0xFF;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	3303      	adds	r3, #3
 8001aaa:	89fa      	ldrh	r2, [r7, #14]
 8001aac:	b2d2      	uxtb	r2, r2
 8001aae:	701a      	strb	r2, [r3, #0]
    	x[4] = (cmd >> 8) & 0xFF;
 8001ab0:	89bb      	ldrh	r3, [r7, #12]
 8001ab2:	0a1b      	lsrs	r3, r3, #8
 8001ab4:	b29a      	uxth	r2, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	3304      	adds	r3, #4
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	701a      	strb	r2, [r3, #0]
    	x[5] =  cmd & 0xFF;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	3305      	adds	r3, #5
 8001ac2:	89ba      	ldrh	r2, [r7, #12]
 8001ac4:	b2d2      	uxtb	r2, r2
 8001ac6:	701a      	strb	r2, [r3, #0]
			slave_crc_send = crc16(x,6);
 8001ac8:	2106      	movs	r1, #6
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7ff f920 	bl	8000d10 <crc16>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	82fb      	strh	r3, [r7, #22]
			x[7] = slave_crc_send >> 8 & 0xFF;
 8001ad4:	8afb      	ldrh	r3, [r7, #22]
 8001ad6:	0a1b      	lsrs	r3, r3, #8
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	3307      	adds	r3, #7
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	701a      	strb	r2, [r3, #0]
			x[6] = slave_crc_send & 0xFF;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	3306      	adds	r3, #6
 8001ae6:	8afa      	ldrh	r2, [r7, #22]
 8001ae8:	b2d2      	uxtb	r2, r2
 8001aea:	701a      	strb	r2, [r3, #0]
			sending_byte_count = 8;
 8001aec:	4b1e      	ldr	r3, [pc, #120]	; (8001b68 <write_single_register+0x11c>)
 8001aee:	2208      	movs	r2, #8
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	e005      	b.n	8001b00 <write_single_register+0xb4>
		}else{
			flag = 1;
 8001af4:	4b1a      	ldr	r3, [pc, #104]	; (8001b60 <write_single_register+0x114>)
 8001af6:	2201      	movs	r2, #1
 8001af8:	601a      	str	r2, [r3, #0]
    	exception_code  = 0x04;
 8001afa:	4b1a      	ldr	r3, [pc, #104]	; (8001b64 <write_single_register+0x118>)
 8001afc:	2204      	movs	r2, #4
 8001afe:	801a      	strh	r2, [r3, #0]
    	}
		if(flag == 1){
 8001b00:	4b17      	ldr	r3, [pc, #92]	; (8001b60 <write_single_register+0x114>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d124      	bne.n	8001b52 <write_single_register+0x106>
		x[0] = Slave_Address;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	701a      	strb	r2, [r3, #0]
		x[1] = 0x86;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	3301      	adds	r3, #1
 8001b12:	2286      	movs	r2, #134	; 0x86
 8001b14:	701a      	strb	r2, [r3, #0]
		x[2] = exception_code;
 8001b16:	4b13      	ldr	r3, [pc, #76]	; (8001b64 <write_single_register+0x118>)
 8001b18:	881a      	ldrh	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3302      	adds	r3, #2
 8001b1e:	b2d2      	uxtb	r2, r2
 8001b20:	701a      	strb	r2, [r3, #0]
		slave_crc_send = crc16(x,3);
 8001b22:	2103      	movs	r1, #3
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff f8f3 	bl	8000d10 <crc16>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	82fb      	strh	r3, [r7, #22]
	  x[4] = slave_crc_send >> 8 & 0xFF;
 8001b2e:	8afb      	ldrh	r3, [r7, #22]
 8001b30:	0a1b      	lsrs	r3, r3, #8
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3304      	adds	r3, #4
 8001b38:	b2d2      	uxtb	r2, r2
 8001b3a:	701a      	strb	r2, [r3, #0]
	  x[3] = slave_crc_send & 0xFF;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3303      	adds	r3, #3
 8001b40:	8afa      	ldrh	r2, [r7, #22]
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	701a      	strb	r2, [r3, #0]
	  sending_byte_count = 5;
 8001b46:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <write_single_register+0x11c>)
 8001b48:	2205      	movs	r2, #5
 8001b4a:	601a      	str	r2, [r3, #0]
		flag = 0;
 8001b4c:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <write_single_register+0x114>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
		}
}
 8001b52:	bf00      	nop
 8001b54:	3718      	adds	r7, #24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20000190 	.word	0x20000190
 8001b60:	20002b18 	.word	0x20002b18
 8001b64:	200003f4 	.word	0x200003f4
 8001b68:	200003f8 	.word	0x200003f8

08001b6c <read_exception_status>:

//----------------------------------------------------------------------------------------------------------------------------------------
void read_exception_status(uint8_t exp_coils[],uint8_t x[]){
 8001b6c:	b480      	push	{r7}
 8001b6e:	b087      	sub	sp, #28
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
	x[0] = Slave_Address;
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	701a      	strb	r2, [r3, #0]
	x[1] = 0x07;
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	2207      	movs	r2, #7
 8001b82:	701a      	strb	r2, [r3, #0]
	uint8_t hi =0,lo =0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	75fb      	strb	r3, [r7, #23]
 8001b88:	2300      	movs	r3, #0
 8001b8a:	75bb      	strb	r3, [r7, #22]
	int temp = 1;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	613b      	str	r3, [r7, #16]
	for(int j=0; j<4 ;j++){
 8001b90:	2300      	movs	r3, #0
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	e01f      	b.n	8001bd6 <read_exception_status+0x6a>
		lo += exp_coils[j] * temp;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	781a      	ldrb	r2, [r3, #0]
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	fb12 f303 	smulbb	r3, r2, r3
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	7dbb      	ldrb	r3, [r7, #22]
 8001baa:	4413      	add	r3, r2
 8001bac:	75bb      	strb	r3, [r7, #22]
		hi += exp_coils[4 + j] * temp;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	3304      	adds	r3, #4
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	781a      	ldrb	r2, [r3, #0]
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	fb12 f303 	smulbb	r3, r2, r3
 8001bc2:	b2da      	uxtb	r2, r3
 8001bc4:	7dfb      	ldrb	r3, [r7, #23]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	75fb      	strb	r3, [r7, #23]
		temp =temp *2 ;
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	613b      	str	r3, [r7, #16]
	for(int j=0; j<4 ;j++){
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2b03      	cmp	r3, #3
 8001bda:	dddc      	ble.n	8001b96 <read_exception_status+0x2a>
		}
	x[1] = (hi << 4|lo);
 8001bdc:	7dfb      	ldrb	r3, [r7, #23]
 8001bde:	011b      	lsls	r3, r3, #4
 8001be0:	b25a      	sxtb	r2, r3
 8001be2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	b25a      	sxtb	r2, r3
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	3301      	adds	r3, #1
 8001bee:	b2d2      	uxtb	r2, r2
 8001bf0:	701a      	strb	r2, [r3, #0]
}
 8001bf2:	bf00      	nop
 8001bf4:	371c      	adds	r7, #28
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
	...

08001c00 <write_multiple_coils>:

//----------------------------------------------------------------------------------------------------------------------------------------
void write_multiple_coils(uint16_t starting_Address, uint16_t num_of_coils,uint8_t bytes_count, uint16_t output_value[],uint8_t coils[],uint8_t x[]){
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b090      	sub	sp, #64	; 0x40
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	607b      	str	r3, [r7, #4]
 8001c08:	4603      	mov	r3, r0
 8001c0a:	81fb      	strh	r3, [r7, #14]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	81bb      	strh	r3, [r7, #12]
 8001c10:	4613      	mov	r3, r2
 8001c12:	72fb      	strb	r3, [r7, #11]
	  //the order of wrighting is LSB -> MSB
		uint16_t slave_crc_send;
    if(num_of_coils > 0x07B0 || num_of_coils < 0 || (bytes_count != num_of_coils/8 || bytes_count != num_of_coils/8 + 1)){
 8001c14:	89bb      	ldrh	r3, [r7, #12]
 8001c16:	f5b3 6ff6 	cmp.w	r3, #1968	; 0x7b0
 8001c1a:	d80d      	bhi.n	8001c38 <write_multiple_coils+0x38>
 8001c1c:	7afb      	ldrb	r3, [r7, #11]
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	89bb      	ldrh	r3, [r7, #12]
 8001c22:	08db      	lsrs	r3, r3, #3
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d106      	bne.n	8001c38 <write_multiple_coils+0x38>
 8001c2a:	7afa      	ldrb	r2, [r7, #11]
 8001c2c:	89bb      	ldrh	r3, [r7, #12]
 8001c2e:	08db      	lsrs	r3, r3, #3
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	3301      	adds	r3, #1
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d007      	beq.n	8001c48 <write_multiple_coils+0x48>
		  flag = 1;
 8001c38:	4bbd      	ldr	r3, [pc, #756]	; (8001f30 <write_multiple_coils+0x330>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	601a      	str	r2, [r3, #0]
			exception_code = 0x03;
 8001c3e:	4bbd      	ldr	r3, [pc, #756]	; (8001f34 <write_multiple_coils+0x334>)
 8001c40:	2203      	movs	r2, #3
 8001c42:	801a      	strh	r2, [r3, #0]
 8001c44:	f001 bdc2 	b.w	80037cc <write_multiple_coils+0x1bcc>
		}else if(starting_Address > len_of_coils || starting_Address + num_of_coils > len_of_coils){
 8001c48:	89fa      	ldrh	r2, [r7, #14]
 8001c4a:	4bbb      	ldr	r3, [pc, #748]	; (8001f38 <write_multiple_coils+0x338>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	dc06      	bgt.n	8001c60 <write_multiple_coils+0x60>
 8001c52:	89fa      	ldrh	r2, [r7, #14]
 8001c54:	89bb      	ldrh	r3, [r7, #12]
 8001c56:	441a      	add	r2, r3
 8001c58:	4bb7      	ldr	r3, [pc, #732]	; (8001f38 <write_multiple_coils+0x338>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	dd07      	ble.n	8001c70 <write_multiple_coils+0x70>
		  flag = 1;
 8001c60:	4bb3      	ldr	r3, [pc, #716]	; (8001f30 <write_multiple_coils+0x330>)
 8001c62:	2201      	movs	r2, #1
 8001c64:	601a      	str	r2, [r3, #0]
			exception_code = 0x02;
 8001c66:	4bb3      	ldr	r3, [pc, #716]	; (8001f34 <write_multiple_coils+0x334>)
 8001c68:	2202      	movs	r2, #2
 8001c6a:	801a      	strh	r2, [r3, #0]
 8001c6c:	f001 bdae 	b.w	80037cc <write_multiple_coils+0x1bcc>
		}else if(flag != 1){
 8001c70:	4baf      	ldr	r3, [pc, #700]	; (8001f30 <write_multiple_coils+0x330>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	f001 85a3 	beq.w	80037c0 <write_multiple_coils+0x1bc0>
    	x[0] = Slave_Address;
 8001c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	701a      	strb	r2, [r3, #0]
			x[1] = 0x0F;
 8001c80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c82:	3301      	adds	r3, #1
 8001c84:	220f      	movs	r2, #15
 8001c86:	701a      	strb	r2, [r3, #0]
			x[2] = (starting_Address >> 8) & 0xFF;
 8001c88:	89fb      	ldrh	r3, [r7, #14]
 8001c8a:	0a1b      	lsrs	r3, r3, #8
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c90:	3302      	adds	r3, #2
 8001c92:	b2d2      	uxtb	r2, r2
 8001c94:	701a      	strb	r2, [r3, #0]
			x[3] =  starting_Address & 0xFF;
 8001c96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c98:	3303      	adds	r3, #3
 8001c9a:	89fa      	ldrh	r2, [r7, #14]
 8001c9c:	b2d2      	uxtb	r2, r2
 8001c9e:	701a      	strb	r2, [r3, #0]
			x[4] = (num_of_coils >> 8) & 0xFF;
 8001ca0:	89bb      	ldrh	r3, [r7, #12]
 8001ca2:	0a1b      	lsrs	r3, r3, #8
 8001ca4:	b29a      	uxth	r2, r3
 8001ca6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ca8:	3304      	adds	r3, #4
 8001caa:	b2d2      	uxtb	r2, r2
 8001cac:	701a      	strb	r2, [r3, #0]
			x[5] =  num_of_coils & 0xFF;
 8001cae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cb0:	3305      	adds	r3, #5
 8001cb2:	89ba      	ldrh	r2, [r7, #12]
 8001cb4:	b2d2      	uxtb	r2, r2
 8001cb6:	701a      	strb	r2, [r3, #0]
		  slave_crc_send = crc16(x,6);
 8001cb8:	2106      	movs	r1, #6
 8001cba:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001cbc:	f7ff f828 	bl	8000d10 <crc16>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	82fb      	strh	r3, [r7, #22]
			x[7] = slave_crc_send >> 8 & 0xFF;
 8001cc4:	8afb      	ldrh	r3, [r7, #22]
 8001cc6:	0a1b      	lsrs	r3, r3, #8
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ccc:	3307      	adds	r3, #7
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	701a      	strb	r2, [r3, #0]
			x[6] = slave_crc_send & 0xFF;
 8001cd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cd4:	3306      	adds	r3, #6
 8001cd6:	8afa      	ldrh	r2, [r7, #22]
 8001cd8:	b2d2      	uxtb	r2, r2
 8001cda:	701a      	strb	r2, [r3, #0]
			sending_byte_count = 8;
 8001cdc:	4b97      	ldr	r3, [pc, #604]	; (8001f3c <write_multiple_coils+0x33c>)
 8001cde:	2208      	movs	r2, #8
 8001ce0:	601a      	str	r2, [r3, #0]
    	if(num_of_coils % 8 == 0){
 8001ce2:	89bb      	ldrh	r3, [r7, #12]
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f040 830a 	bne.w	8002304 <write_multiple_coils+0x704>
    		uint8_t rep=0;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    	  for(int i=0; i<num_of_coils/8 ; i++){
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cfa:	e2f9      	b.n	80022f0 <write_multiple_coils+0x6f0>
    		  uint8_t temp_hex;
    			for(int j=0; j<2; j++){
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	633b      	str	r3, [r7, #48]	; 0x30
 8001d00:	e2ef      	b.n	80022e2 <write_multiple_coils+0x6e2>
    				if(j == 0){
 8001d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d10a      	bne.n	8001d1e <write_multiple_coils+0x11e>
    					temp_hex = output_value[i]&0x0F;
 8001d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	4413      	add	r3, r2
 8001d10:	881b      	ldrh	r3, [r3, #0]
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	f003 030f 	and.w	r3, r3, #15
 8001d18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001d1c:	e00e      	b.n	8001d3c <write_multiple_coils+0x13c>
    				}else if(j==1){
 8001d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d10b      	bne.n	8001d3c <write_multiple_coils+0x13c>
    					temp_hex = (output_value[i] >> 4) & 0x0F;
 8001d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	881b      	ldrh	r3, [r3, #0]
 8001d2e:	091b      	lsrs	r3, r3, #4
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	f003 030f 	and.w	r3, r3, #15
 8001d38:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    				}
    				switch (temp_hex) {
 8001d3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001d40:	2b0f      	cmp	r3, #15
 8001d42:	f200 82cb 	bhi.w	80022dc <write_multiple_coils+0x6dc>
 8001d46:	a201      	add	r2, pc, #4	; (adr r2, 8001d4c <write_multiple_coils+0x14c>)
 8001d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d4c:	08001d8d 	.word	0x08001d8d
 8001d50:	08001de1 	.word	0x08001de1
 8001d54:	08001e35 	.word	0x08001e35
 8001d58:	08001e89 	.word	0x08001e89
 8001d5c:	08001edd 	.word	0x08001edd
 8001d60:	08001f41 	.word	0x08001f41
 8001d64:	08001f95 	.word	0x08001f95
 8001d68:	08001fe9 	.word	0x08001fe9
 8001d6c:	0800203d 	.word	0x0800203d
 8001d70:	08002091 	.word	0x08002091
 8001d74:	080020e5 	.word	0x080020e5
 8001d78:	08002139 	.word	0x08002139
 8001d7c:	0800218d 	.word	0x0800218d
 8001d80:	080021e1 	.word	0x080021e1
 8001d84:	08002235 	.word	0x08002235
 8001d88:	08002289 	.word	0x08002289
              case 0x00:
                coils[starting_Address + rep] = 0;
 8001d8c:	89fa      	ldrh	r2, [r7, #14]
 8001d8e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001d92:	4413      	add	r3, r2
 8001d94:	461a      	mov	r2, r3
 8001d96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d98:	4413      	add	r3, r2
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	701a      	strb	r2, [r3, #0]
    				    coils[starting_Address + rep + 1] = 0;
 8001d9e:	89fa      	ldrh	r2, [r7, #14]
 8001da0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001da4:	4413      	add	r3, r2
 8001da6:	3301      	adds	r3, #1
 8001da8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001daa:	4413      	add	r3, r2
 8001dac:	2200      	movs	r2, #0
 8001dae:	701a      	strb	r2, [r3, #0]
    				    coils[starting_Address + rep + 2] = 0;
 8001db0:	89fa      	ldrh	r2, [r7, #14]
 8001db2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001db6:	4413      	add	r3, r2
 8001db8:	3302      	adds	r3, #2
 8001dba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001dbc:	4413      	add	r3, r2
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	701a      	strb	r2, [r3, #0]
    				    coils[starting_Address + rep + 3] = 0;
 8001dc2:	89fa      	ldrh	r2, [r7, #14]
 8001dc4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001dc8:	4413      	add	r3, r2
 8001dca:	3303      	adds	r3, #3
 8001dcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001dce:	4413      	add	r3, r2
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	701a      	strb	r2, [r3, #0]
                rep += 4;
 8001dd4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001dd8:	3304      	adds	r3, #4
 8001dda:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    				    break;
 8001dde:	e27d      	b.n	80022dc <write_multiple_coils+0x6dc>
              case 0x01:
                coils[starting_Address + rep] = 1;
 8001de0:	89fa      	ldrh	r2, [r7, #14]
 8001de2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001de6:	4413      	add	r3, r2
 8001de8:	461a      	mov	r2, r3
 8001dea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dec:	4413      	add	r3, r2
 8001dee:	2201      	movs	r2, #1
 8001df0:	701a      	strb	r2, [r3, #0]
    				    coils[starting_Address + rep + 1] = 0;
 8001df2:	89fa      	ldrh	r2, [r7, #14]
 8001df4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001df8:	4413      	add	r3, r2
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001dfe:	4413      	add	r3, r2
 8001e00:	2200      	movs	r2, #0
 8001e02:	701a      	strb	r2, [r3, #0]
    				    coils[starting_Address + rep + 2] = 0;
 8001e04:	89fa      	ldrh	r2, [r7, #14]
 8001e06:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001e0a:	4413      	add	r3, r2
 8001e0c:	3302      	adds	r3, #2
 8001e0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e10:	4413      	add	r3, r2
 8001e12:	2200      	movs	r2, #0
 8001e14:	701a      	strb	r2, [r3, #0]
    				    coils[starting_Address + rep + 3] = 0;
 8001e16:	89fa      	ldrh	r2, [r7, #14]
 8001e18:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001e1c:	4413      	add	r3, r2
 8001e1e:	3303      	adds	r3, #3
 8001e20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e22:	4413      	add	r3, r2
 8001e24:	2200      	movs	r2, #0
 8001e26:	701a      	strb	r2, [r3, #0]
                rep += 4;
 8001e28:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001e2c:	3304      	adds	r3, #4
 8001e2e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    				    break;
 8001e32:	e253      	b.n	80022dc <write_multiple_coils+0x6dc>
              case 0x02:
                coils[starting_Address + rep] = 0;
 8001e34:	89fa      	ldrh	r2, [r7, #14]
 8001e36:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001e3a:	4413      	add	r3, r2
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e40:	4413      	add	r3, r2
 8001e42:	2200      	movs	r2, #0
 8001e44:	701a      	strb	r2, [r3, #0]
    				    coils[starting_Address + rep + 1] = 1;
 8001e46:	89fa      	ldrh	r2, [r7, #14]
 8001e48:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001e4c:	4413      	add	r3, r2
 8001e4e:	3301      	adds	r3, #1
 8001e50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e52:	4413      	add	r3, r2
 8001e54:	2201      	movs	r2, #1
 8001e56:	701a      	strb	r2, [r3, #0]
    				    coils[starting_Address + rep + 2] = 0;
 8001e58:	89fa      	ldrh	r2, [r7, #14]
 8001e5a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001e5e:	4413      	add	r3, r2
 8001e60:	3302      	adds	r3, #2
 8001e62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e64:	4413      	add	r3, r2
 8001e66:	2200      	movs	r2, #0
 8001e68:	701a      	strb	r2, [r3, #0]
    				    coils[starting_Address + rep + 3] = 0;
 8001e6a:	89fa      	ldrh	r2, [r7, #14]
 8001e6c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001e70:	4413      	add	r3, r2
 8001e72:	3303      	adds	r3, #3
 8001e74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e76:	4413      	add	r3, r2
 8001e78:	2200      	movs	r2, #0
 8001e7a:	701a      	strb	r2, [r3, #0]
                rep += 4;
 8001e7c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001e80:	3304      	adds	r3, #4
 8001e82:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    				    break;
 8001e86:	e229      	b.n	80022dc <write_multiple_coils+0x6dc>
              case 0x03:
                coils[starting_Address + rep] = 1;
 8001e88:	89fa      	ldrh	r2, [r7, #14]
 8001e8a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001e8e:	4413      	add	r3, r2
 8001e90:	461a      	mov	r2, r3
 8001e92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e94:	4413      	add	r3, r2
 8001e96:	2201      	movs	r2, #1
 8001e98:	701a      	strb	r2, [r3, #0]
    				    coils[starting_Address + rep + 1] = 1;
 8001e9a:	89fa      	ldrh	r2, [r7, #14]
 8001e9c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001ea0:	4413      	add	r3, r2
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001ea6:	4413      	add	r3, r2
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	701a      	strb	r2, [r3, #0]
    				    coils[starting_Address + rep + 2] = 0;
 8001eac:	89fa      	ldrh	r2, [r7, #14]
 8001eae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001eb2:	4413      	add	r3, r2
 8001eb4:	3302      	adds	r3, #2
 8001eb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001eb8:	4413      	add	r3, r2
 8001eba:	2200      	movs	r2, #0
 8001ebc:	701a      	strb	r2, [r3, #0]
    				    coils[starting_Address + rep + 3] = 0;
 8001ebe:	89fa      	ldrh	r2, [r7, #14]
 8001ec0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001ec4:	4413      	add	r3, r2
 8001ec6:	3303      	adds	r3, #3
 8001ec8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001eca:	4413      	add	r3, r2
 8001ecc:	2200      	movs	r2, #0
 8001ece:	701a      	strb	r2, [r3, #0]
                rep += 4;
 8001ed0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001ed4:	3304      	adds	r3, #4
 8001ed6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    				    break;
 8001eda:	e1ff      	b.n	80022dc <write_multiple_coils+0x6dc>
              case 0x04:
                coils[starting_Address + rep] = 0;
 8001edc:	89fa      	ldrh	r2, [r7, #14]
 8001ede:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001ee2:	4413      	add	r3, r2
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ee8:	4413      	add	r3, r2
 8001eea:	2200      	movs	r2, #0
 8001eec:	701a      	strb	r2, [r3, #0]
    				    coils[starting_Address + rep + 1] = 0;
 8001eee:	89fa      	ldrh	r2, [r7, #14]
 8001ef0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001ef4:	4413      	add	r3, r2
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001efa:	4413      	add	r3, r2
 8001efc:	2200      	movs	r2, #0
 8001efe:	701a      	strb	r2, [r3, #0]
    				    coils[starting_Address + rep + 2] = 1;
 8001f00:	89fa      	ldrh	r2, [r7, #14]
 8001f02:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001f06:	4413      	add	r3, r2
 8001f08:	3302      	adds	r3, #2
 8001f0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001f0c:	4413      	add	r3, r2
 8001f0e:	2201      	movs	r2, #1
 8001f10:	701a      	strb	r2, [r3, #0]
    				    coils[starting_Address + rep + 3] = 0;
 8001f12:	89fa      	ldrh	r2, [r7, #14]
 8001f14:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001f18:	4413      	add	r3, r2
 8001f1a:	3303      	adds	r3, #3
 8001f1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001f1e:	4413      	add	r3, r2
 8001f20:	2200      	movs	r2, #0
 8001f22:	701a      	strb	r2, [r3, #0]
                rep += 4;
 8001f24:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001f28:	3304      	adds	r3, #4
 8001f2a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    				    break;
 8001f2e:	e1d5      	b.n	80022dc <write_multiple_coils+0x6dc>
 8001f30:	20002b18 	.word	0x20002b18
 8001f34:	200003f4 	.word	0x200003f4
 8001f38:	200001c8 	.word	0x200001c8
 8001f3c:	200003f8 	.word	0x200003f8
              case 0x05:
                coils[starting_Address + rep] = 1;
 8001f40:	89fa      	ldrh	r2, [r7, #14]
 8001f42:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001f46:	4413      	add	r3, r2
 8001f48:	461a      	mov	r2, r3
 8001f4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f4c:	4413      	add	r3, r2
 8001f4e:	2201      	movs	r2, #1
 8001f50:	701a      	strb	r2, [r3, #0]
    				    coils[starting_Address + rep + 1] = 0;
 8001f52:	89fa      	ldrh	r2, [r7, #14]
 8001f54:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001f58:	4413      	add	r3, r2
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001f5e:	4413      	add	r3, r2
 8001f60:	2200      	movs	r2, #0
 8001f62:	701a      	strb	r2, [r3, #0]
    				    coils[starting_Address + rep + 2] = 1;
 8001f64:	89fa      	ldrh	r2, [r7, #14]
 8001f66:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001f6a:	4413      	add	r3, r2
 8001f6c:	3302      	adds	r3, #2
 8001f6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001f70:	4413      	add	r3, r2
 8001f72:	2201      	movs	r2, #1
 8001f74:	701a      	strb	r2, [r3, #0]
    				    coils[starting_Address + rep + 3] = 0;
 8001f76:	89fa      	ldrh	r2, [r7, #14]
 8001f78:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001f7c:	4413      	add	r3, r2
 8001f7e:	3303      	adds	r3, #3
 8001f80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001f82:	4413      	add	r3, r2
 8001f84:	2200      	movs	r2, #0
 8001f86:	701a      	strb	r2, [r3, #0]
                rep += 4;
 8001f88:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001f8c:	3304      	adds	r3, #4
 8001f8e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    				    break;
 8001f92:	e1a3      	b.n	80022dc <write_multiple_coils+0x6dc>
              case 0x06:
                coils[starting_Address + rep] = 0;
 8001f94:	89fa      	ldrh	r2, [r7, #14]
 8001f96:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001f9a:	4413      	add	r3, r2
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fa0:	4413      	add	r3, r2
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	701a      	strb	r2, [r3, #0]
    				    coils[starting_Address + rep + 1] = 1;
 8001fa6:	89fa      	ldrh	r2, [r7, #14]
 8001fa8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001fac:	4413      	add	r3, r2
 8001fae:	3301      	adds	r3, #1
 8001fb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001fb2:	4413      	add	r3, r2
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	701a      	strb	r2, [r3, #0]
    				    coils[starting_Address + rep + 2] = 1;
 8001fb8:	89fa      	ldrh	r2, [r7, #14]
 8001fba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001fbe:	4413      	add	r3, r2
 8001fc0:	3302      	adds	r3, #2
 8001fc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001fc4:	4413      	add	r3, r2
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	701a      	strb	r2, [r3, #0]
    				    coils[starting_Address + rep + 3] = 0;
 8001fca:	89fa      	ldrh	r2, [r7, #14]
 8001fcc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001fd0:	4413      	add	r3, r2
 8001fd2:	3303      	adds	r3, #3
 8001fd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001fd6:	4413      	add	r3, r2
 8001fd8:	2200      	movs	r2, #0
 8001fda:	701a      	strb	r2, [r3, #0]
                rep += 4;
 8001fdc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    				    break;
 8001fe6:	e179      	b.n	80022dc <write_multiple_coils+0x6dc>
              case 0x07:
                coils[starting_Address + rep] = 1;
 8001fe8:	89fa      	ldrh	r2, [r7, #14]
 8001fea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001fee:	4413      	add	r3, r2
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ff4:	4413      	add	r3, r2
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	701a      	strb	r2, [r3, #0]
    				    coils[starting_Address + rep + 1] = 1;
 8001ffa:	89fa      	ldrh	r2, [r7, #14]
 8001ffc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002000:	4413      	add	r3, r2
 8002002:	3301      	adds	r3, #1
 8002004:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002006:	4413      	add	r3, r2
 8002008:	2201      	movs	r2, #1
 800200a:	701a      	strb	r2, [r3, #0]
    				    coils[starting_Address + rep + 2] = 1;
 800200c:	89fa      	ldrh	r2, [r7, #14]
 800200e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002012:	4413      	add	r3, r2
 8002014:	3302      	adds	r3, #2
 8002016:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002018:	4413      	add	r3, r2
 800201a:	2201      	movs	r2, #1
 800201c:	701a      	strb	r2, [r3, #0]
    				    coils[starting_Address + rep + 3] = 0;
 800201e:	89fa      	ldrh	r2, [r7, #14]
 8002020:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002024:	4413      	add	r3, r2
 8002026:	3303      	adds	r3, #3
 8002028:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800202a:	4413      	add	r3, r2
 800202c:	2200      	movs	r2, #0
 800202e:	701a      	strb	r2, [r3, #0]
                rep += 4;
 8002030:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002034:	3304      	adds	r3, #4
 8002036:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    				    break;
 800203a:	e14f      	b.n	80022dc <write_multiple_coils+0x6dc>
              case 0x08:
                coils[starting_Address + rep] = 0;
 800203c:	89fa      	ldrh	r2, [r7, #14]
 800203e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002042:	4413      	add	r3, r2
 8002044:	461a      	mov	r2, r3
 8002046:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002048:	4413      	add	r3, r2
 800204a:	2200      	movs	r2, #0
 800204c:	701a      	strb	r2, [r3, #0]
    				    coils[starting_Address + rep + 1] = 0;
 800204e:	89fa      	ldrh	r2, [r7, #14]
 8002050:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002054:	4413      	add	r3, r2
 8002056:	3301      	adds	r3, #1
 8002058:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800205a:	4413      	add	r3, r2
 800205c:	2200      	movs	r2, #0
 800205e:	701a      	strb	r2, [r3, #0]
    				    coils[starting_Address + rep + 2] = 0;
 8002060:	89fa      	ldrh	r2, [r7, #14]
 8002062:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002066:	4413      	add	r3, r2
 8002068:	3302      	adds	r3, #2
 800206a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800206c:	4413      	add	r3, r2
 800206e:	2200      	movs	r2, #0
 8002070:	701a      	strb	r2, [r3, #0]
    				    coils[starting_Address + rep + 3] = 1;
 8002072:	89fa      	ldrh	r2, [r7, #14]
 8002074:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002078:	4413      	add	r3, r2
 800207a:	3303      	adds	r3, #3
 800207c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800207e:	4413      	add	r3, r2
 8002080:	2201      	movs	r2, #1
 8002082:	701a      	strb	r2, [r3, #0]
                rep += 4;
 8002084:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002088:	3304      	adds	r3, #4
 800208a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    				    break;
 800208e:	e125      	b.n	80022dc <write_multiple_coils+0x6dc>
              case 0x09:
                coils[starting_Address + rep] = 1;
 8002090:	89fa      	ldrh	r2, [r7, #14]
 8002092:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002096:	4413      	add	r3, r2
 8002098:	461a      	mov	r2, r3
 800209a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800209c:	4413      	add	r3, r2
 800209e:	2201      	movs	r2, #1
 80020a0:	701a      	strb	r2, [r3, #0]
    				    coils[starting_Address + rep + 1] = 0;
 80020a2:	89fa      	ldrh	r2, [r7, #14]
 80020a4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80020a8:	4413      	add	r3, r2
 80020aa:	3301      	adds	r3, #1
 80020ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80020ae:	4413      	add	r3, r2
 80020b0:	2200      	movs	r2, #0
 80020b2:	701a      	strb	r2, [r3, #0]
    				    coils[starting_Address + rep + 2] = 0;
 80020b4:	89fa      	ldrh	r2, [r7, #14]
 80020b6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80020ba:	4413      	add	r3, r2
 80020bc:	3302      	adds	r3, #2
 80020be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80020c0:	4413      	add	r3, r2
 80020c2:	2200      	movs	r2, #0
 80020c4:	701a      	strb	r2, [r3, #0]
    				    coils[starting_Address + rep + 3] = 1;
 80020c6:	89fa      	ldrh	r2, [r7, #14]
 80020c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80020cc:	4413      	add	r3, r2
 80020ce:	3303      	adds	r3, #3
 80020d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80020d2:	4413      	add	r3, r2
 80020d4:	2201      	movs	r2, #1
 80020d6:	701a      	strb	r2, [r3, #0]
                rep += 4;
 80020d8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80020dc:	3304      	adds	r3, #4
 80020de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    				    break;
 80020e2:	e0fb      	b.n	80022dc <write_multiple_coils+0x6dc>
              case 0x0A:
                coils[starting_Address + rep] = 0;
 80020e4:	89fa      	ldrh	r2, [r7, #14]
 80020e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80020ea:	4413      	add	r3, r2
 80020ec:	461a      	mov	r2, r3
 80020ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020f0:	4413      	add	r3, r2
 80020f2:	2200      	movs	r2, #0
 80020f4:	701a      	strb	r2, [r3, #0]
    				    coils[starting_Address + rep + 1] = 1;
 80020f6:	89fa      	ldrh	r2, [r7, #14]
 80020f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80020fc:	4413      	add	r3, r2
 80020fe:	3301      	adds	r3, #1
 8002100:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002102:	4413      	add	r3, r2
 8002104:	2201      	movs	r2, #1
 8002106:	701a      	strb	r2, [r3, #0]
    				    coils[starting_Address + rep + 2] = 0;
 8002108:	89fa      	ldrh	r2, [r7, #14]
 800210a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800210e:	4413      	add	r3, r2
 8002110:	3302      	adds	r3, #2
 8002112:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002114:	4413      	add	r3, r2
 8002116:	2200      	movs	r2, #0
 8002118:	701a      	strb	r2, [r3, #0]
    				    coils[starting_Address + rep + 3] = 1;
 800211a:	89fa      	ldrh	r2, [r7, #14]
 800211c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002120:	4413      	add	r3, r2
 8002122:	3303      	adds	r3, #3
 8002124:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002126:	4413      	add	r3, r2
 8002128:	2201      	movs	r2, #1
 800212a:	701a      	strb	r2, [r3, #0]
                rep += 4;
 800212c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002130:	3304      	adds	r3, #4
 8002132:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    				    break;
 8002136:	e0d1      	b.n	80022dc <write_multiple_coils+0x6dc>
              case 0x0B:
                coils[starting_Address + rep] = 1;
 8002138:	89fa      	ldrh	r2, [r7, #14]
 800213a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800213e:	4413      	add	r3, r2
 8002140:	461a      	mov	r2, r3
 8002142:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002144:	4413      	add	r3, r2
 8002146:	2201      	movs	r2, #1
 8002148:	701a      	strb	r2, [r3, #0]
    				    coils[starting_Address + rep + 1] = 1;
 800214a:	89fa      	ldrh	r2, [r7, #14]
 800214c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002150:	4413      	add	r3, r2
 8002152:	3301      	adds	r3, #1
 8002154:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002156:	4413      	add	r3, r2
 8002158:	2201      	movs	r2, #1
 800215a:	701a      	strb	r2, [r3, #0]
    				    coils[starting_Address + rep + 2] = 0;
 800215c:	89fa      	ldrh	r2, [r7, #14]
 800215e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002162:	4413      	add	r3, r2
 8002164:	3302      	adds	r3, #2
 8002166:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002168:	4413      	add	r3, r2
 800216a:	2200      	movs	r2, #0
 800216c:	701a      	strb	r2, [r3, #0]
    				    coils[starting_Address + rep + 3] = 1;
 800216e:	89fa      	ldrh	r2, [r7, #14]
 8002170:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002174:	4413      	add	r3, r2
 8002176:	3303      	adds	r3, #3
 8002178:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800217a:	4413      	add	r3, r2
 800217c:	2201      	movs	r2, #1
 800217e:	701a      	strb	r2, [r3, #0]
    				    rep += 4;
 8002180:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002184:	3304      	adds	r3, #4
 8002186:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                break;
 800218a:	e0a7      	b.n	80022dc <write_multiple_coils+0x6dc>
              case 0x0C:
                coils[starting_Address + rep] = 0;
 800218c:	89fa      	ldrh	r2, [r7, #14]
 800218e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002192:	4413      	add	r3, r2
 8002194:	461a      	mov	r2, r3
 8002196:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002198:	4413      	add	r3, r2
 800219a:	2200      	movs	r2, #0
 800219c:	701a      	strb	r2, [r3, #0]
    				    coils[starting_Address + rep + 1] = 0;
 800219e:	89fa      	ldrh	r2, [r7, #14]
 80021a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80021a4:	4413      	add	r3, r2
 80021a6:	3301      	adds	r3, #1
 80021a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80021aa:	4413      	add	r3, r2
 80021ac:	2200      	movs	r2, #0
 80021ae:	701a      	strb	r2, [r3, #0]
    				    coils[starting_Address + rep + 2] = 1;
 80021b0:	89fa      	ldrh	r2, [r7, #14]
 80021b2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80021b6:	4413      	add	r3, r2
 80021b8:	3302      	adds	r3, #2
 80021ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80021bc:	4413      	add	r3, r2
 80021be:	2201      	movs	r2, #1
 80021c0:	701a      	strb	r2, [r3, #0]
    				    coils[starting_Address + rep + 3] = 1;
 80021c2:	89fa      	ldrh	r2, [r7, #14]
 80021c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80021c8:	4413      	add	r3, r2
 80021ca:	3303      	adds	r3, #3
 80021cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80021ce:	4413      	add	r3, r2
 80021d0:	2201      	movs	r2, #1
 80021d2:	701a      	strb	r2, [r3, #0]
    				    rep += 4;
 80021d4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80021d8:	3304      	adds	r3, #4
 80021da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                break;
 80021de:	e07d      	b.n	80022dc <write_multiple_coils+0x6dc>
              case 0x0D:
                coils[starting_Address + rep] = 1;
 80021e0:	89fa      	ldrh	r2, [r7, #14]
 80021e2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80021e6:	4413      	add	r3, r2
 80021e8:	461a      	mov	r2, r3
 80021ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021ec:	4413      	add	r3, r2
 80021ee:	2201      	movs	r2, #1
 80021f0:	701a      	strb	r2, [r3, #0]
    				    coils[starting_Address + rep + 1] = 0;
 80021f2:	89fa      	ldrh	r2, [r7, #14]
 80021f4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80021f8:	4413      	add	r3, r2
 80021fa:	3301      	adds	r3, #1
 80021fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80021fe:	4413      	add	r3, r2
 8002200:	2200      	movs	r2, #0
 8002202:	701a      	strb	r2, [r3, #0]
    				    coils[starting_Address + rep + 2] = 1;
 8002204:	89fa      	ldrh	r2, [r7, #14]
 8002206:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800220a:	4413      	add	r3, r2
 800220c:	3302      	adds	r3, #2
 800220e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002210:	4413      	add	r3, r2
 8002212:	2201      	movs	r2, #1
 8002214:	701a      	strb	r2, [r3, #0]
    				    coils[starting_Address + rep + 3] = 1;
 8002216:	89fa      	ldrh	r2, [r7, #14]
 8002218:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800221c:	4413      	add	r3, r2
 800221e:	3303      	adds	r3, #3
 8002220:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002222:	4413      	add	r3, r2
 8002224:	2201      	movs	r2, #1
 8002226:	701a      	strb	r2, [r3, #0]
    				    rep += 4;
 8002228:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800222c:	3304      	adds	r3, #4
 800222e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                break;
 8002232:	e053      	b.n	80022dc <write_multiple_coils+0x6dc>
              case 0x0E:
                coils[starting_Address + rep] = 0;
 8002234:	89fa      	ldrh	r2, [r7, #14]
 8002236:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800223a:	4413      	add	r3, r2
 800223c:	461a      	mov	r2, r3
 800223e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002240:	4413      	add	r3, r2
 8002242:	2200      	movs	r2, #0
 8002244:	701a      	strb	r2, [r3, #0]
    				    coils[starting_Address + rep + 1] = 1;
 8002246:	89fa      	ldrh	r2, [r7, #14]
 8002248:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800224c:	4413      	add	r3, r2
 800224e:	3301      	adds	r3, #1
 8002250:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002252:	4413      	add	r3, r2
 8002254:	2201      	movs	r2, #1
 8002256:	701a      	strb	r2, [r3, #0]
    				    coils[starting_Address + rep + 2] = 1;
 8002258:	89fa      	ldrh	r2, [r7, #14]
 800225a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800225e:	4413      	add	r3, r2
 8002260:	3302      	adds	r3, #2
 8002262:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002264:	4413      	add	r3, r2
 8002266:	2201      	movs	r2, #1
 8002268:	701a      	strb	r2, [r3, #0]
    				    coils[starting_Address + rep + 3] = 1;
 800226a:	89fa      	ldrh	r2, [r7, #14]
 800226c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002270:	4413      	add	r3, r2
 8002272:	3303      	adds	r3, #3
 8002274:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002276:	4413      	add	r3, r2
 8002278:	2201      	movs	r2, #1
 800227a:	701a      	strb	r2, [r3, #0]
                rep += 4;
 800227c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002280:	3304      	adds	r3, #4
 8002282:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    				    break;
 8002286:	e029      	b.n	80022dc <write_multiple_coils+0x6dc>
              case 0x0F:
                coils[starting_Address + rep] = 1;
 8002288:	89fa      	ldrh	r2, [r7, #14]
 800228a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800228e:	4413      	add	r3, r2
 8002290:	461a      	mov	r2, r3
 8002292:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002294:	4413      	add	r3, r2
 8002296:	2201      	movs	r2, #1
 8002298:	701a      	strb	r2, [r3, #0]
    				    coils[starting_Address + rep + 1] = 1;
 800229a:	89fa      	ldrh	r2, [r7, #14]
 800229c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80022a0:	4413      	add	r3, r2
 80022a2:	3301      	adds	r3, #1
 80022a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80022a6:	4413      	add	r3, r2
 80022a8:	2201      	movs	r2, #1
 80022aa:	701a      	strb	r2, [r3, #0]
    				    coils[starting_Address + rep + 2] = 1;
 80022ac:	89fa      	ldrh	r2, [r7, #14]
 80022ae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80022b2:	4413      	add	r3, r2
 80022b4:	3302      	adds	r3, #2
 80022b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80022b8:	4413      	add	r3, r2
 80022ba:	2201      	movs	r2, #1
 80022bc:	701a      	strb	r2, [r3, #0]
    				    coils[starting_Address + rep + 3] = 1;
 80022be:	89fa      	ldrh	r2, [r7, #14]
 80022c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80022c4:	4413      	add	r3, r2
 80022c6:	3303      	adds	r3, #3
 80022c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80022ca:	4413      	add	r3, r2
 80022cc:	2201      	movs	r2, #1
 80022ce:	701a      	strb	r2, [r3, #0]
    				    rep += 4;
 80022d0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80022d4:	3304      	adds	r3, #4
 80022d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    					  break;
 80022da:	bf00      	nop
    			for(int j=0; j<2; j++){
 80022dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022de:	3301      	adds	r3, #1
 80022e0:	633b      	str	r3, [r7, #48]	; 0x30
 80022e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	f77f ad0c 	ble.w	8001d02 <write_multiple_coils+0x102>
    	  for(int i=0; i<num_of_coils/8 ; i++){
 80022ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ec:	3301      	adds	r3, #1
 80022ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80022f0:	89bb      	ldrh	r3, [r7, #12]
 80022f2:	08db      	lsrs	r3, r3, #3
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	461a      	mov	r2, r3
 80022f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022fa:	4293      	cmp	r3, r2
 80022fc:	f6ff acfe 	blt.w	8001cfc <write_multiple_coils+0xfc>
 8002300:	f001 ba64 	b.w	80037cc <write_multiple_coils+0x1bcc>
            }
    			}
    		}
    	}else{
    		ttt = 3;
 8002304:	4ba9      	ldr	r3, [pc, #676]	; (80025ac <write_multiple_coils+0x9ac>)
 8002306:	2203      	movs	r2, #3
 8002308:	601a      	str	r2, [r3, #0]
    		int temp2 = num_of_coils;
 800230a:	89bb      	ldrh	r3, [r7, #12]
 800230c:	62fb      	str	r3, [r7, #44]	; 0x2c
    		int rep = 0;
 800230e:	2300      	movs	r3, #0
 8002310:	62bb      	str	r3, [r7, #40]	; 0x28
    		uint8_t temp_hex;
    		for(int q=0; q<num_of_coils/8 +1;q++){
 8002312:	2300      	movs	r3, #0
 8002314:	623b      	str	r3, [r7, #32]
 8002316:	f001 ba4a 	b.w	80037ae <write_multiple_coils+0x1bae>
    			if(temp2>=8){
 800231a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800231c:	2b07      	cmp	r3, #7
 800231e:	f340 8294 	ble.w	800284a <write_multiple_coils+0xc4a>
    	      for(int j=0; j<2; j++){
 8002322:	2300      	movs	r3, #0
 8002324:	61fb      	str	r3, [r7, #28]
 8002326:	e28a      	b.n	800283e <write_multiple_coils+0xc3e>
    				 if(j == 0){
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d10a      	bne.n	8002344 <write_multiple_coils+0x744>
    			     temp_hex = output_value[q]&0x0F;
 800232e:	6a3b      	ldr	r3, [r7, #32]
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	4413      	add	r3, r2
 8002336:	881b      	ldrh	r3, [r3, #0]
 8002338:	b2db      	uxtb	r3, r3
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002342:	e00e      	b.n	8002362 <write_multiple_coils+0x762>
    			   }else if(j==1){
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d10b      	bne.n	8002362 <write_multiple_coils+0x762>
    			     temp_hex = (output_value[q] >> 4) & 0x0F;
 800234a:	6a3b      	ldr	r3, [r7, #32]
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	4413      	add	r3, r2
 8002352:	881b      	ldrh	r3, [r3, #0]
 8002354:	091b      	lsrs	r3, r3, #4
 8002356:	b29b      	uxth	r3, r3
 8002358:	b2db      	uxtb	r3, r3
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    				 }
    			   switch (temp_hex) {
 8002362:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002366:	2b0f      	cmp	r3, #15
 8002368:	f200 8266 	bhi.w	8002838 <write_multiple_coils+0xc38>
 800236c:	a201      	add	r2, pc, #4	; (adr r2, 8002374 <write_multiple_coils+0x774>)
 800236e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002372:	bf00      	nop
 8002374:	080023b5 	.word	0x080023b5
 8002378:	080023fd 	.word	0x080023fd
 800237c:	08002445 	.word	0x08002445
 8002380:	0800248d 	.word	0x0800248d
 8002384:	080024d5 	.word	0x080024d5
 8002388:	0800251d 	.word	0x0800251d
 800238c:	08002565 	.word	0x08002565
 8002390:	080025b1 	.word	0x080025b1
 8002394:	080025f9 	.word	0x080025f9
 8002398:	08002641 	.word	0x08002641
 800239c:	08002689 	.word	0x08002689
 80023a0:	080026d1 	.word	0x080026d1
 80023a4:	08002719 	.word	0x08002719
 80023a8:	08002761 	.word	0x08002761
 80023ac:	080027a9 	.word	0x080027a9
 80023b0:	080027f1 	.word	0x080027f1
               case 0x00:
                 coils[starting_Address + rep] = 0;
 80023b4:	89fa      	ldrh	r2, [r7, #14]
 80023b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b8:	4413      	add	r3, r2
 80023ba:	461a      	mov	r2, r3
 80023bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023be:	4413      	add	r3, r2
 80023c0:	2200      	movs	r2, #0
 80023c2:	701a      	strb	r2, [r3, #0]
    		         coils[starting_Address + rep + 1] = 0;
 80023c4:	89fa      	ldrh	r2, [r7, #14]
 80023c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c8:	4413      	add	r3, r2
 80023ca:	3301      	adds	r3, #1
 80023cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80023ce:	4413      	add	r3, r2
 80023d0:	2200      	movs	r2, #0
 80023d2:	701a      	strb	r2, [r3, #0]
    		         coils[starting_Address + rep + 2] = 0;
 80023d4:	89fa      	ldrh	r2, [r7, #14]
 80023d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d8:	4413      	add	r3, r2
 80023da:	3302      	adds	r3, #2
 80023dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80023de:	4413      	add	r3, r2
 80023e0:	2200      	movs	r2, #0
 80023e2:	701a      	strb	r2, [r3, #0]
    				     coils[starting_Address + rep + 3] = 0;
 80023e4:	89fa      	ldrh	r2, [r7, #14]
 80023e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e8:	4413      	add	r3, r2
 80023ea:	3303      	adds	r3, #3
 80023ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80023ee:	4413      	add	r3, r2
 80023f0:	2200      	movs	r2, #0
 80023f2:	701a      	strb	r2, [r3, #0]
                 rep += 4;
 80023f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f6:	3304      	adds	r3, #4
 80023f8:	62bb      	str	r3, [r7, #40]	; 0x28
    				     break;
 80023fa:	e21d      	b.n	8002838 <write_multiple_coils+0xc38>
               case 0x01:
                  coils[starting_Address + rep] = 1;
 80023fc:	89fa      	ldrh	r2, [r7, #14]
 80023fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002400:	4413      	add	r3, r2
 8002402:	461a      	mov	r2, r3
 8002404:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002406:	4413      	add	r3, r2
 8002408:	2201      	movs	r2, #1
 800240a:	701a      	strb	r2, [r3, #0]
    				      coils[starting_Address + rep + 1] = 0;
 800240c:	89fa      	ldrh	r2, [r7, #14]
 800240e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002410:	4413      	add	r3, r2
 8002412:	3301      	adds	r3, #1
 8002414:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002416:	4413      	add	r3, r2
 8002418:	2200      	movs	r2, #0
 800241a:	701a      	strb	r2, [r3, #0]
    				      coils[starting_Address + rep + 2] = 0;
 800241c:	89fa      	ldrh	r2, [r7, #14]
 800241e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002420:	4413      	add	r3, r2
 8002422:	3302      	adds	r3, #2
 8002424:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002426:	4413      	add	r3, r2
 8002428:	2200      	movs	r2, #0
 800242a:	701a      	strb	r2, [r3, #0]
    			        coils[starting_Address + rep + 3] = 0;
 800242c:	89fa      	ldrh	r2, [r7, #14]
 800242e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002430:	4413      	add	r3, r2
 8002432:	3303      	adds	r3, #3
 8002434:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002436:	4413      	add	r3, r2
 8002438:	2200      	movs	r2, #0
 800243a:	701a      	strb	r2, [r3, #0]
                  rep += 4;
 800243c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800243e:	3304      	adds	r3, #4
 8002440:	62bb      	str	r3, [r7, #40]	; 0x28
    				      break;
 8002442:	e1f9      	b.n	8002838 <write_multiple_coils+0xc38>
                case 0x02:
                  coils[starting_Address + rep] = 0;
 8002444:	89fa      	ldrh	r2, [r7, #14]
 8002446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002448:	4413      	add	r3, r2
 800244a:	461a      	mov	r2, r3
 800244c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800244e:	4413      	add	r3, r2
 8002450:	2200      	movs	r2, #0
 8002452:	701a      	strb	r2, [r3, #0]
    		          coils[starting_Address + rep + 1] = 1;
 8002454:	89fa      	ldrh	r2, [r7, #14]
 8002456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002458:	4413      	add	r3, r2
 800245a:	3301      	adds	r3, #1
 800245c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800245e:	4413      	add	r3, r2
 8002460:	2201      	movs	r2, #1
 8002462:	701a      	strb	r2, [r3, #0]
    				      coils[starting_Address + rep + 2] = 0;
 8002464:	89fa      	ldrh	r2, [r7, #14]
 8002466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002468:	4413      	add	r3, r2
 800246a:	3302      	adds	r3, #2
 800246c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800246e:	4413      	add	r3, r2
 8002470:	2200      	movs	r2, #0
 8002472:	701a      	strb	r2, [r3, #0]
    				      coils[starting_Address + rep + 3] = 0;
 8002474:	89fa      	ldrh	r2, [r7, #14]
 8002476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002478:	4413      	add	r3, r2
 800247a:	3303      	adds	r3, #3
 800247c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800247e:	4413      	add	r3, r2
 8002480:	2200      	movs	r2, #0
 8002482:	701a      	strb	r2, [r3, #0]
                  rep += 4;
 8002484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002486:	3304      	adds	r3, #4
 8002488:	62bb      	str	r3, [r7, #40]	; 0x28
    				      break;
 800248a:	e1d5      	b.n	8002838 <write_multiple_coils+0xc38>
                case 0x03:
                  coils[starting_Address + rep] = 1;
 800248c:	89fa      	ldrh	r2, [r7, #14]
 800248e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002490:	4413      	add	r3, r2
 8002492:	461a      	mov	r2, r3
 8002494:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002496:	4413      	add	r3, r2
 8002498:	2201      	movs	r2, #1
 800249a:	701a      	strb	r2, [r3, #0]
    				      coils[starting_Address + rep + 1] = 1;
 800249c:	89fa      	ldrh	r2, [r7, #14]
 800249e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a0:	4413      	add	r3, r2
 80024a2:	3301      	adds	r3, #1
 80024a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80024a6:	4413      	add	r3, r2
 80024a8:	2201      	movs	r2, #1
 80024aa:	701a      	strb	r2, [r3, #0]
    				      coils[starting_Address + rep + 2] = 0;
 80024ac:	89fa      	ldrh	r2, [r7, #14]
 80024ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b0:	4413      	add	r3, r2
 80024b2:	3302      	adds	r3, #2
 80024b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80024b6:	4413      	add	r3, r2
 80024b8:	2200      	movs	r2, #0
 80024ba:	701a      	strb	r2, [r3, #0]
    			      	coils[starting_Address + rep + 3] = 0;
 80024bc:	89fa      	ldrh	r2, [r7, #14]
 80024be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c0:	4413      	add	r3, r2
 80024c2:	3303      	adds	r3, #3
 80024c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80024c6:	4413      	add	r3, r2
 80024c8:	2200      	movs	r2, #0
 80024ca:	701a      	strb	r2, [r3, #0]
                  rep += 4;
 80024cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ce:	3304      	adds	r3, #4
 80024d0:	62bb      	str	r3, [r7, #40]	; 0x28
    				      break;
 80024d2:	e1b1      	b.n	8002838 <write_multiple_coils+0xc38>
                case 0x04:
                  coils[starting_Address + rep] = 0;
 80024d4:	89fa      	ldrh	r2, [r7, #14]
 80024d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d8:	4413      	add	r3, r2
 80024da:	461a      	mov	r2, r3
 80024dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024de:	4413      	add	r3, r2
 80024e0:	2200      	movs	r2, #0
 80024e2:	701a      	strb	r2, [r3, #0]
    				      coils[starting_Address + rep + 1] = 0;
 80024e4:	89fa      	ldrh	r2, [r7, #14]
 80024e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e8:	4413      	add	r3, r2
 80024ea:	3301      	adds	r3, #1
 80024ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80024ee:	4413      	add	r3, r2
 80024f0:	2200      	movs	r2, #0
 80024f2:	701a      	strb	r2, [r3, #0]
    				      coils[starting_Address + rep + 2] = 1;
 80024f4:	89fa      	ldrh	r2, [r7, #14]
 80024f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f8:	4413      	add	r3, r2
 80024fa:	3302      	adds	r3, #2
 80024fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80024fe:	4413      	add	r3, r2
 8002500:	2201      	movs	r2, #1
 8002502:	701a      	strb	r2, [r3, #0]
    				      coils[starting_Address + rep + 3] = 0;
 8002504:	89fa      	ldrh	r2, [r7, #14]
 8002506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002508:	4413      	add	r3, r2
 800250a:	3303      	adds	r3, #3
 800250c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800250e:	4413      	add	r3, r2
 8002510:	2200      	movs	r2, #0
 8002512:	701a      	strb	r2, [r3, #0]
                  rep += 4;
 8002514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002516:	3304      	adds	r3, #4
 8002518:	62bb      	str	r3, [r7, #40]	; 0x28
    				      break;
 800251a:	e18d      	b.n	8002838 <write_multiple_coils+0xc38>
                case 0x05:
                  coils[starting_Address + rep] = 1;
 800251c:	89fa      	ldrh	r2, [r7, #14]
 800251e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002520:	4413      	add	r3, r2
 8002522:	461a      	mov	r2, r3
 8002524:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002526:	4413      	add	r3, r2
 8002528:	2201      	movs	r2, #1
 800252a:	701a      	strb	r2, [r3, #0]
    				      coils[starting_Address + rep + 1] = 0;
 800252c:	89fa      	ldrh	r2, [r7, #14]
 800252e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002530:	4413      	add	r3, r2
 8002532:	3301      	adds	r3, #1
 8002534:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002536:	4413      	add	r3, r2
 8002538:	2200      	movs	r2, #0
 800253a:	701a      	strb	r2, [r3, #0]
    				      coils[starting_Address + rep + 2] = 1;
 800253c:	89fa      	ldrh	r2, [r7, #14]
 800253e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002540:	4413      	add	r3, r2
 8002542:	3302      	adds	r3, #2
 8002544:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002546:	4413      	add	r3, r2
 8002548:	2201      	movs	r2, #1
 800254a:	701a      	strb	r2, [r3, #0]
    				      coils[starting_Address + rep + 3] = 0;
 800254c:	89fa      	ldrh	r2, [r7, #14]
 800254e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002550:	4413      	add	r3, r2
 8002552:	3303      	adds	r3, #3
 8002554:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002556:	4413      	add	r3, r2
 8002558:	2200      	movs	r2, #0
 800255a:	701a      	strb	r2, [r3, #0]
                  rep += 4;
 800255c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255e:	3304      	adds	r3, #4
 8002560:	62bb      	str	r3, [r7, #40]	; 0x28
    				      break;
 8002562:	e169      	b.n	8002838 <write_multiple_coils+0xc38>
                case 0x06:
                  coils[starting_Address + rep] = 0;
 8002564:	89fa      	ldrh	r2, [r7, #14]
 8002566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002568:	4413      	add	r3, r2
 800256a:	461a      	mov	r2, r3
 800256c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800256e:	4413      	add	r3, r2
 8002570:	2200      	movs	r2, #0
 8002572:	701a      	strb	r2, [r3, #0]
    				      coils[starting_Address + rep + 1] = 1;
 8002574:	89fa      	ldrh	r2, [r7, #14]
 8002576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002578:	4413      	add	r3, r2
 800257a:	3301      	adds	r3, #1
 800257c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800257e:	4413      	add	r3, r2
 8002580:	2201      	movs	r2, #1
 8002582:	701a      	strb	r2, [r3, #0]
    				      coils[starting_Address + rep + 2] = 1;
 8002584:	89fa      	ldrh	r2, [r7, #14]
 8002586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002588:	4413      	add	r3, r2
 800258a:	3302      	adds	r3, #2
 800258c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800258e:	4413      	add	r3, r2
 8002590:	2201      	movs	r2, #1
 8002592:	701a      	strb	r2, [r3, #0]
    				      coils[starting_Address + rep + 3] = 0;
 8002594:	89fa      	ldrh	r2, [r7, #14]
 8002596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002598:	4413      	add	r3, r2
 800259a:	3303      	adds	r3, #3
 800259c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800259e:	4413      	add	r3, r2
 80025a0:	2200      	movs	r2, #0
 80025a2:	701a      	strb	r2, [r3, #0]
                  rep += 4;
 80025a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a6:	3304      	adds	r3, #4
 80025a8:	62bb      	str	r3, [r7, #40]	; 0x28
    				      break;
 80025aa:	e145      	b.n	8002838 <write_multiple_coils+0xc38>
 80025ac:	20002b24 	.word	0x20002b24
                case 0x07:
                  coils[starting_Address + rep] = 1;
 80025b0:	89fa      	ldrh	r2, [r7, #14]
 80025b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b4:	4413      	add	r3, r2
 80025b6:	461a      	mov	r2, r3
 80025b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025ba:	4413      	add	r3, r2
 80025bc:	2201      	movs	r2, #1
 80025be:	701a      	strb	r2, [r3, #0]
    				      coils[starting_Address + rep + 1] = 1;
 80025c0:	89fa      	ldrh	r2, [r7, #14]
 80025c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c4:	4413      	add	r3, r2
 80025c6:	3301      	adds	r3, #1
 80025c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80025ca:	4413      	add	r3, r2
 80025cc:	2201      	movs	r2, #1
 80025ce:	701a      	strb	r2, [r3, #0]
    				      coils[starting_Address + rep + 2] = 1;
 80025d0:	89fa      	ldrh	r2, [r7, #14]
 80025d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d4:	4413      	add	r3, r2
 80025d6:	3302      	adds	r3, #2
 80025d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80025da:	4413      	add	r3, r2
 80025dc:	2201      	movs	r2, #1
 80025de:	701a      	strb	r2, [r3, #0]
    				      coils[starting_Address + rep + 3] = 0;
 80025e0:	89fa      	ldrh	r2, [r7, #14]
 80025e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e4:	4413      	add	r3, r2
 80025e6:	3303      	adds	r3, #3
 80025e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80025ea:	4413      	add	r3, r2
 80025ec:	2200      	movs	r2, #0
 80025ee:	701a      	strb	r2, [r3, #0]
                  rep += 4;
 80025f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f2:	3304      	adds	r3, #4
 80025f4:	62bb      	str	r3, [r7, #40]	; 0x28
    				      break;
 80025f6:	e11f      	b.n	8002838 <write_multiple_coils+0xc38>
                case 0x08:
                  coils[starting_Address + rep] = 0;
 80025f8:	89fa      	ldrh	r2, [r7, #14]
 80025fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025fc:	4413      	add	r3, r2
 80025fe:	461a      	mov	r2, r3
 8002600:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002602:	4413      	add	r3, r2
 8002604:	2200      	movs	r2, #0
 8002606:	701a      	strb	r2, [r3, #0]
    				      coils[starting_Address + rep + 1] = 0;
 8002608:	89fa      	ldrh	r2, [r7, #14]
 800260a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800260c:	4413      	add	r3, r2
 800260e:	3301      	adds	r3, #1
 8002610:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002612:	4413      	add	r3, r2
 8002614:	2200      	movs	r2, #0
 8002616:	701a      	strb	r2, [r3, #0]
    				      coils[starting_Address + rep + 2] = 0;
 8002618:	89fa      	ldrh	r2, [r7, #14]
 800261a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800261c:	4413      	add	r3, r2
 800261e:	3302      	adds	r3, #2
 8002620:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002622:	4413      	add	r3, r2
 8002624:	2200      	movs	r2, #0
 8002626:	701a      	strb	r2, [r3, #0]
    				      coils[starting_Address + rep + 3] = 1;
 8002628:	89fa      	ldrh	r2, [r7, #14]
 800262a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262c:	4413      	add	r3, r2
 800262e:	3303      	adds	r3, #3
 8002630:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002632:	4413      	add	r3, r2
 8002634:	2201      	movs	r2, #1
 8002636:	701a      	strb	r2, [r3, #0]
                  rep += 4;
 8002638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800263a:	3304      	adds	r3, #4
 800263c:	62bb      	str	r3, [r7, #40]	; 0x28
    				      break;
 800263e:	e0fb      	b.n	8002838 <write_multiple_coils+0xc38>
                case 0x09:
                  coils[starting_Address + rep] = 1;
 8002640:	89fa      	ldrh	r2, [r7, #14]
 8002642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002644:	4413      	add	r3, r2
 8002646:	461a      	mov	r2, r3
 8002648:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800264a:	4413      	add	r3, r2
 800264c:	2201      	movs	r2, #1
 800264e:	701a      	strb	r2, [r3, #0]
    				      coils[starting_Address + rep + 1] = 0;
 8002650:	89fa      	ldrh	r2, [r7, #14]
 8002652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002654:	4413      	add	r3, r2
 8002656:	3301      	adds	r3, #1
 8002658:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800265a:	4413      	add	r3, r2
 800265c:	2200      	movs	r2, #0
 800265e:	701a      	strb	r2, [r3, #0]
    				      coils[starting_Address + rep + 2] = 0;
 8002660:	89fa      	ldrh	r2, [r7, #14]
 8002662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002664:	4413      	add	r3, r2
 8002666:	3302      	adds	r3, #2
 8002668:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800266a:	4413      	add	r3, r2
 800266c:	2200      	movs	r2, #0
 800266e:	701a      	strb	r2, [r3, #0]
    				      coils[starting_Address + rep + 3] = 1;
 8002670:	89fa      	ldrh	r2, [r7, #14]
 8002672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002674:	4413      	add	r3, r2
 8002676:	3303      	adds	r3, #3
 8002678:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800267a:	4413      	add	r3, r2
 800267c:	2201      	movs	r2, #1
 800267e:	701a      	strb	r2, [r3, #0]
                  rep += 4;
 8002680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002682:	3304      	adds	r3, #4
 8002684:	62bb      	str	r3, [r7, #40]	; 0x28
    				      break;
 8002686:	e0d7      	b.n	8002838 <write_multiple_coils+0xc38>
                case 0x0A:
                  coils[starting_Address + rep] = 0;
 8002688:	89fa      	ldrh	r2, [r7, #14]
 800268a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800268c:	4413      	add	r3, r2
 800268e:	461a      	mov	r2, r3
 8002690:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002692:	4413      	add	r3, r2
 8002694:	2200      	movs	r2, #0
 8002696:	701a      	strb	r2, [r3, #0]
    				      coils[starting_Address + rep + 1] = 1;
 8002698:	89fa      	ldrh	r2, [r7, #14]
 800269a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800269c:	4413      	add	r3, r2
 800269e:	3301      	adds	r3, #1
 80026a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80026a2:	4413      	add	r3, r2
 80026a4:	2201      	movs	r2, #1
 80026a6:	701a      	strb	r2, [r3, #0]
    				      coils[starting_Address + rep + 2] = 0;
 80026a8:	89fa      	ldrh	r2, [r7, #14]
 80026aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ac:	4413      	add	r3, r2
 80026ae:	3302      	adds	r3, #2
 80026b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80026b2:	4413      	add	r3, r2
 80026b4:	2200      	movs	r2, #0
 80026b6:	701a      	strb	r2, [r3, #0]
    				      coils[starting_Address + rep + 3] = 1;
 80026b8:	89fa      	ldrh	r2, [r7, #14]
 80026ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026bc:	4413      	add	r3, r2
 80026be:	3303      	adds	r3, #3
 80026c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80026c2:	4413      	add	r3, r2
 80026c4:	2201      	movs	r2, #1
 80026c6:	701a      	strb	r2, [r3, #0]
                  rep += 4;
 80026c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ca:	3304      	adds	r3, #4
 80026cc:	62bb      	str	r3, [r7, #40]	; 0x28
    				      break;
 80026ce:	e0b3      	b.n	8002838 <write_multiple_coils+0xc38>
                case 0x0B:
                  coils[starting_Address + rep] = 1;
 80026d0:	89fa      	ldrh	r2, [r7, #14]
 80026d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d4:	4413      	add	r3, r2
 80026d6:	461a      	mov	r2, r3
 80026d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026da:	4413      	add	r3, r2
 80026dc:	2201      	movs	r2, #1
 80026de:	701a      	strb	r2, [r3, #0]
    				      coils[starting_Address + rep + 1] = 1;
 80026e0:	89fa      	ldrh	r2, [r7, #14]
 80026e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e4:	4413      	add	r3, r2
 80026e6:	3301      	adds	r3, #1
 80026e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80026ea:	4413      	add	r3, r2
 80026ec:	2201      	movs	r2, #1
 80026ee:	701a      	strb	r2, [r3, #0]
    				      coils[starting_Address + rep + 2] = 0;
 80026f0:	89fa      	ldrh	r2, [r7, #14]
 80026f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f4:	4413      	add	r3, r2
 80026f6:	3302      	adds	r3, #2
 80026f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80026fa:	4413      	add	r3, r2
 80026fc:	2200      	movs	r2, #0
 80026fe:	701a      	strb	r2, [r3, #0]
    				      coils[starting_Address + rep + 3] = 1;
 8002700:	89fa      	ldrh	r2, [r7, #14]
 8002702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002704:	4413      	add	r3, r2
 8002706:	3303      	adds	r3, #3
 8002708:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800270a:	4413      	add	r3, r2
 800270c:	2201      	movs	r2, #1
 800270e:	701a      	strb	r2, [r3, #0]
    				      rep += 4;
 8002710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002712:	3304      	adds	r3, #4
 8002714:	62bb      	str	r3, [r7, #40]	; 0x28
                  break;
 8002716:	e08f      	b.n	8002838 <write_multiple_coils+0xc38>
                case 0x0C:
                  coils[starting_Address + rep] = 0;
 8002718:	89fa      	ldrh	r2, [r7, #14]
 800271a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271c:	4413      	add	r3, r2
 800271e:	461a      	mov	r2, r3
 8002720:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002722:	4413      	add	r3, r2
 8002724:	2200      	movs	r2, #0
 8002726:	701a      	strb	r2, [r3, #0]
    				      coils[starting_Address + rep + 1] = 0;
 8002728:	89fa      	ldrh	r2, [r7, #14]
 800272a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272c:	4413      	add	r3, r2
 800272e:	3301      	adds	r3, #1
 8002730:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002732:	4413      	add	r3, r2
 8002734:	2200      	movs	r2, #0
 8002736:	701a      	strb	r2, [r3, #0]
    				      coils[starting_Address + rep + 2] = 1;
 8002738:	89fa      	ldrh	r2, [r7, #14]
 800273a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800273c:	4413      	add	r3, r2
 800273e:	3302      	adds	r3, #2
 8002740:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002742:	4413      	add	r3, r2
 8002744:	2201      	movs	r2, #1
 8002746:	701a      	strb	r2, [r3, #0]
    				      coils[starting_Address + rep + 3] = 1;
 8002748:	89fa      	ldrh	r2, [r7, #14]
 800274a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800274c:	4413      	add	r3, r2
 800274e:	3303      	adds	r3, #3
 8002750:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002752:	4413      	add	r3, r2
 8002754:	2201      	movs	r2, #1
 8002756:	701a      	strb	r2, [r3, #0]
    				      rep += 4;
 8002758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275a:	3304      	adds	r3, #4
 800275c:	62bb      	str	r3, [r7, #40]	; 0x28
                  break;
 800275e:	e06b      	b.n	8002838 <write_multiple_coils+0xc38>
                case 0x0D:
                  coils[starting_Address + rep] = 1;
 8002760:	89fa      	ldrh	r2, [r7, #14]
 8002762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002764:	4413      	add	r3, r2
 8002766:	461a      	mov	r2, r3
 8002768:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800276a:	4413      	add	r3, r2
 800276c:	2201      	movs	r2, #1
 800276e:	701a      	strb	r2, [r3, #0]
    				      coils[starting_Address + rep + 1] = 0;
 8002770:	89fa      	ldrh	r2, [r7, #14]
 8002772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002774:	4413      	add	r3, r2
 8002776:	3301      	adds	r3, #1
 8002778:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800277a:	4413      	add	r3, r2
 800277c:	2200      	movs	r2, #0
 800277e:	701a      	strb	r2, [r3, #0]
    				      coils[starting_Address + rep + 2] = 1;
 8002780:	89fa      	ldrh	r2, [r7, #14]
 8002782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002784:	4413      	add	r3, r2
 8002786:	3302      	adds	r3, #2
 8002788:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800278a:	4413      	add	r3, r2
 800278c:	2201      	movs	r2, #1
 800278e:	701a      	strb	r2, [r3, #0]
    				      coils[starting_Address + rep + 3] = 1;
 8002790:	89fa      	ldrh	r2, [r7, #14]
 8002792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002794:	4413      	add	r3, r2
 8002796:	3303      	adds	r3, #3
 8002798:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800279a:	4413      	add	r3, r2
 800279c:	2201      	movs	r2, #1
 800279e:	701a      	strb	r2, [r3, #0]
    				      rep += 4;
 80027a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a2:	3304      	adds	r3, #4
 80027a4:	62bb      	str	r3, [r7, #40]	; 0x28
                  break;
 80027a6:	e047      	b.n	8002838 <write_multiple_coils+0xc38>
                case 0x0E:
                  coils[starting_Address + rep] = 0;
 80027a8:	89fa      	ldrh	r2, [r7, #14]
 80027aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ac:	4413      	add	r3, r2
 80027ae:	461a      	mov	r2, r3
 80027b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027b2:	4413      	add	r3, r2
 80027b4:	2200      	movs	r2, #0
 80027b6:	701a      	strb	r2, [r3, #0]
    				      coils[starting_Address + rep + 1] = 1;
 80027b8:	89fa      	ldrh	r2, [r7, #14]
 80027ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027bc:	4413      	add	r3, r2
 80027be:	3301      	adds	r3, #1
 80027c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027c2:	4413      	add	r3, r2
 80027c4:	2201      	movs	r2, #1
 80027c6:	701a      	strb	r2, [r3, #0]
    				      coils[starting_Address + rep + 2] = 1;
 80027c8:	89fa      	ldrh	r2, [r7, #14]
 80027ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027cc:	4413      	add	r3, r2
 80027ce:	3302      	adds	r3, #2
 80027d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027d2:	4413      	add	r3, r2
 80027d4:	2201      	movs	r2, #1
 80027d6:	701a      	strb	r2, [r3, #0]
    				      coils[starting_Address + rep + 3] = 1;
 80027d8:	89fa      	ldrh	r2, [r7, #14]
 80027da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027dc:	4413      	add	r3, r2
 80027de:	3303      	adds	r3, #3
 80027e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027e2:	4413      	add	r3, r2
 80027e4:	2201      	movs	r2, #1
 80027e6:	701a      	strb	r2, [r3, #0]
                  rep += 4;
 80027e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ea:	3304      	adds	r3, #4
 80027ec:	62bb      	str	r3, [r7, #40]	; 0x28
    				      break;
 80027ee:	e023      	b.n	8002838 <write_multiple_coils+0xc38>
                case 0x0F:
                  coils[starting_Address + rep] = 1;
 80027f0:	89fa      	ldrh	r2, [r7, #14]
 80027f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f4:	4413      	add	r3, r2
 80027f6:	461a      	mov	r2, r3
 80027f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027fa:	4413      	add	r3, r2
 80027fc:	2201      	movs	r2, #1
 80027fe:	701a      	strb	r2, [r3, #0]
    				      coils[starting_Address + rep + 1] = 1;
 8002800:	89fa      	ldrh	r2, [r7, #14]
 8002802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002804:	4413      	add	r3, r2
 8002806:	3301      	adds	r3, #1
 8002808:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800280a:	4413      	add	r3, r2
 800280c:	2201      	movs	r2, #1
 800280e:	701a      	strb	r2, [r3, #0]
    				      coils[starting_Address + rep + 2] = 1;
 8002810:	89fa      	ldrh	r2, [r7, #14]
 8002812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002814:	4413      	add	r3, r2
 8002816:	3302      	adds	r3, #2
 8002818:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800281a:	4413      	add	r3, r2
 800281c:	2201      	movs	r2, #1
 800281e:	701a      	strb	r2, [r3, #0]
    				      coils[starting_Address + rep + 3] = 1;
 8002820:	89fa      	ldrh	r2, [r7, #14]
 8002822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002824:	4413      	add	r3, r2
 8002826:	3303      	adds	r3, #3
 8002828:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800282a:	4413      	add	r3, r2
 800282c:	2201      	movs	r2, #1
 800282e:	701a      	strb	r2, [r3, #0]
    				      rep += 4;
 8002830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002832:	3304      	adds	r3, #4
 8002834:	62bb      	str	r3, [r7, #40]	; 0x28
    					    break;
 8002836:	bf00      	nop
    	      for(int j=0; j<2; j++){
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	3301      	adds	r3, #1
 800283c:	61fb      	str	r3, [r7, #28]
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	2b01      	cmp	r3, #1
 8002842:	f77f ad71 	ble.w	8002328 <write_multiple_coils+0x728>
 8002846:	f000 bfac 	b.w	80037a2 <write_multiple_coils+0x1ba2>
               }
    				 }
    			 }else if(temp2 > 4 && temp2 <8){
 800284a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800284c:	2b04      	cmp	r3, #4
 800284e:	f340 83f7 	ble.w	8003040 <write_multiple_coils+0x1440>
 8002852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002854:	2b07      	cmp	r3, #7
 8002856:	f300 83f3 	bgt.w	8003040 <write_multiple_coils+0x1440>
    			    for(int j=0; j<2; j++){
 800285a:	2300      	movs	r3, #0
 800285c:	61bb      	str	r3, [r7, #24]
 800285e:	e3ea      	b.n	8003036 <write_multiple_coils+0x1436>
    				    if(j == 0){
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	2b00      	cmp	r3, #0
 8002864:	f040 8272 	bne.w	8002d4c <write_multiple_coils+0x114c>
    			        temp_hex = output_value[q]&0x0F;
 8002868:	6a3b      	ldr	r3, [r7, #32]
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	4413      	add	r3, r2
 8002870:	881b      	ldrh	r3, [r3, #0]
 8002872:	b2db      	uxtb	r3, r3
 8002874:	f003 030f 	and.w	r3, r3, #15
 8002878:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    							switch (temp_hex) {
 800287c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002880:	2b0f      	cmp	r3, #15
 8002882:	f200 83d5 	bhi.w	8003030 <write_multiple_coils+0x1430>
 8002886:	a201      	add	r2, pc, #4	; (adr r2, 800288c <write_multiple_coils+0xc8c>)
 8002888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800288c:	080028cd 	.word	0x080028cd
 8002890:	08002915 	.word	0x08002915
 8002894:	0800295d 	.word	0x0800295d
 8002898:	080029a5 	.word	0x080029a5
 800289c:	080029ed 	.word	0x080029ed
 80028a0:	08002a35 	.word	0x08002a35
 80028a4:	08002a7d 	.word	0x08002a7d
 80028a8:	08002ac5 	.word	0x08002ac5
 80028ac:	08002b0d 	.word	0x08002b0d
 80028b0:	08002b55 	.word	0x08002b55
 80028b4:	08002b9d 	.word	0x08002b9d
 80028b8:	08002be5 	.word	0x08002be5
 80028bc:	08002c2d 	.word	0x08002c2d
 80028c0:	08002c75 	.word	0x08002c75
 80028c4:	08002cbd 	.word	0x08002cbd
 80028c8:	08002d05 	.word	0x08002d05
                    case 0x00:
                      coils[starting_Address + rep] = 0;
 80028cc:	89fa      	ldrh	r2, [r7, #14]
 80028ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d0:	4413      	add	r3, r2
 80028d2:	461a      	mov	r2, r3
 80028d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028d6:	4413      	add	r3, r2
 80028d8:	2200      	movs	r2, #0
 80028da:	701a      	strb	r2, [r3, #0]
    		              coils[starting_Address + rep + 1] = 0;
 80028dc:	89fa      	ldrh	r2, [r7, #14]
 80028de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e0:	4413      	add	r3, r2
 80028e2:	3301      	adds	r3, #1
 80028e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028e6:	4413      	add	r3, r2
 80028e8:	2200      	movs	r2, #0
 80028ea:	701a      	strb	r2, [r3, #0]
    		              coils[starting_Address + rep + 2] = 0;
 80028ec:	89fa      	ldrh	r2, [r7, #14]
 80028ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f0:	4413      	add	r3, r2
 80028f2:	3302      	adds	r3, #2
 80028f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028f6:	4413      	add	r3, r2
 80028f8:	2200      	movs	r2, #0
 80028fa:	701a      	strb	r2, [r3, #0]
    				          coils[starting_Address + rep + 3] = 0;
 80028fc:	89fa      	ldrh	r2, [r7, #14]
 80028fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002900:	4413      	add	r3, r2
 8002902:	3303      	adds	r3, #3
 8002904:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002906:	4413      	add	r3, r2
 8002908:	2200      	movs	r2, #0
 800290a:	701a      	strb	r2, [r3, #0]
                      rep += 4;
 800290c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800290e:	3304      	adds	r3, #4
 8002910:	62bb      	str	r3, [r7, #40]	; 0x28
    				          break;
 8002912:	e38d      	b.n	8003030 <write_multiple_coils+0x1430>
                    case 0x01:
                      coils[starting_Address + rep] = 1;
 8002914:	89fa      	ldrh	r2, [r7, #14]
 8002916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002918:	4413      	add	r3, r2
 800291a:	461a      	mov	r2, r3
 800291c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800291e:	4413      	add	r3, r2
 8002920:	2201      	movs	r2, #1
 8002922:	701a      	strb	r2, [r3, #0]
    				          coils[starting_Address + rep + 1] = 0;
 8002924:	89fa      	ldrh	r2, [r7, #14]
 8002926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002928:	4413      	add	r3, r2
 800292a:	3301      	adds	r3, #1
 800292c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800292e:	4413      	add	r3, r2
 8002930:	2200      	movs	r2, #0
 8002932:	701a      	strb	r2, [r3, #0]
    				          coils[starting_Address + rep + 2] = 0;
 8002934:	89fa      	ldrh	r2, [r7, #14]
 8002936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002938:	4413      	add	r3, r2
 800293a:	3302      	adds	r3, #2
 800293c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800293e:	4413      	add	r3, r2
 8002940:	2200      	movs	r2, #0
 8002942:	701a      	strb	r2, [r3, #0]
    			            coils[starting_Address + rep + 3] = 0;
 8002944:	89fa      	ldrh	r2, [r7, #14]
 8002946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002948:	4413      	add	r3, r2
 800294a:	3303      	adds	r3, #3
 800294c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800294e:	4413      	add	r3, r2
 8002950:	2200      	movs	r2, #0
 8002952:	701a      	strb	r2, [r3, #0]
                      rep += 4;
 8002954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002956:	3304      	adds	r3, #4
 8002958:	62bb      	str	r3, [r7, #40]	; 0x28
    				          break;
 800295a:	e369      	b.n	8003030 <write_multiple_coils+0x1430>
                    case 0x02:
                      coils[starting_Address + rep] = 0;
 800295c:	89fa      	ldrh	r2, [r7, #14]
 800295e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002960:	4413      	add	r3, r2
 8002962:	461a      	mov	r2, r3
 8002964:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002966:	4413      	add	r3, r2
 8002968:	2200      	movs	r2, #0
 800296a:	701a      	strb	r2, [r3, #0]
    		              coils[starting_Address + rep + 1] = 1;
 800296c:	89fa      	ldrh	r2, [r7, #14]
 800296e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002970:	4413      	add	r3, r2
 8002972:	3301      	adds	r3, #1
 8002974:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002976:	4413      	add	r3, r2
 8002978:	2201      	movs	r2, #1
 800297a:	701a      	strb	r2, [r3, #0]
    				          coils[starting_Address + rep + 2] = 0;
 800297c:	89fa      	ldrh	r2, [r7, #14]
 800297e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002980:	4413      	add	r3, r2
 8002982:	3302      	adds	r3, #2
 8002984:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002986:	4413      	add	r3, r2
 8002988:	2200      	movs	r2, #0
 800298a:	701a      	strb	r2, [r3, #0]
    				          coils[starting_Address + rep + 3] = 0;
 800298c:	89fa      	ldrh	r2, [r7, #14]
 800298e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002990:	4413      	add	r3, r2
 8002992:	3303      	adds	r3, #3
 8002994:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002996:	4413      	add	r3, r2
 8002998:	2200      	movs	r2, #0
 800299a:	701a      	strb	r2, [r3, #0]
                      rep += 4;
 800299c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800299e:	3304      	adds	r3, #4
 80029a0:	62bb      	str	r3, [r7, #40]	; 0x28
    				          break;
 80029a2:	e345      	b.n	8003030 <write_multiple_coils+0x1430>
                    case 0x03:
                      coils[starting_Address + rep] = 1;
 80029a4:	89fa      	ldrh	r2, [r7, #14]
 80029a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a8:	4413      	add	r3, r2
 80029aa:	461a      	mov	r2, r3
 80029ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029ae:	4413      	add	r3, r2
 80029b0:	2201      	movs	r2, #1
 80029b2:	701a      	strb	r2, [r3, #0]
    				          coils[starting_Address + rep + 1] = 1;
 80029b4:	89fa      	ldrh	r2, [r7, #14]
 80029b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b8:	4413      	add	r3, r2
 80029ba:	3301      	adds	r3, #1
 80029bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80029be:	4413      	add	r3, r2
 80029c0:	2201      	movs	r2, #1
 80029c2:	701a      	strb	r2, [r3, #0]
    				          coils[starting_Address + rep + 2] = 0;
 80029c4:	89fa      	ldrh	r2, [r7, #14]
 80029c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c8:	4413      	add	r3, r2
 80029ca:	3302      	adds	r3, #2
 80029cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80029ce:	4413      	add	r3, r2
 80029d0:	2200      	movs	r2, #0
 80029d2:	701a      	strb	r2, [r3, #0]
    			      	    coils[starting_Address + rep + 3] = 0;
 80029d4:	89fa      	ldrh	r2, [r7, #14]
 80029d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d8:	4413      	add	r3, r2
 80029da:	3303      	adds	r3, #3
 80029dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80029de:	4413      	add	r3, r2
 80029e0:	2200      	movs	r2, #0
 80029e2:	701a      	strb	r2, [r3, #0]
                      rep += 4;
 80029e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e6:	3304      	adds	r3, #4
 80029e8:	62bb      	str	r3, [r7, #40]	; 0x28
    				          break;
 80029ea:	e321      	b.n	8003030 <write_multiple_coils+0x1430>
                    case 0x04:
                      coils[starting_Address + rep] = 0;
 80029ec:	89fa      	ldrh	r2, [r7, #14]
 80029ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f0:	4413      	add	r3, r2
 80029f2:	461a      	mov	r2, r3
 80029f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029f6:	4413      	add	r3, r2
 80029f8:	2200      	movs	r2, #0
 80029fa:	701a      	strb	r2, [r3, #0]
    				          coils[starting_Address + rep + 1] = 0;
 80029fc:	89fa      	ldrh	r2, [r7, #14]
 80029fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a00:	4413      	add	r3, r2
 8002a02:	3301      	adds	r3, #1
 8002a04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a06:	4413      	add	r3, r2
 8002a08:	2200      	movs	r2, #0
 8002a0a:	701a      	strb	r2, [r3, #0]
    				          coils[starting_Address + rep + 2] = 1;
 8002a0c:	89fa      	ldrh	r2, [r7, #14]
 8002a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a10:	4413      	add	r3, r2
 8002a12:	3302      	adds	r3, #2
 8002a14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a16:	4413      	add	r3, r2
 8002a18:	2201      	movs	r2, #1
 8002a1a:	701a      	strb	r2, [r3, #0]
    				          coils[starting_Address + rep + 3] = 0;
 8002a1c:	89fa      	ldrh	r2, [r7, #14]
 8002a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a20:	4413      	add	r3, r2
 8002a22:	3303      	adds	r3, #3
 8002a24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a26:	4413      	add	r3, r2
 8002a28:	2200      	movs	r2, #0
 8002a2a:	701a      	strb	r2, [r3, #0]
                      rep += 4;
 8002a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a2e:	3304      	adds	r3, #4
 8002a30:	62bb      	str	r3, [r7, #40]	; 0x28
    				          break;
 8002a32:	e2fd      	b.n	8003030 <write_multiple_coils+0x1430>
                    case 0x05:
                      coils[starting_Address + rep] = 1;
 8002a34:	89fa      	ldrh	r2, [r7, #14]
 8002a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a38:	4413      	add	r3, r2
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a3e:	4413      	add	r3, r2
 8002a40:	2201      	movs	r2, #1
 8002a42:	701a      	strb	r2, [r3, #0]
    				          coils[starting_Address + rep + 1] = 0;
 8002a44:	89fa      	ldrh	r2, [r7, #14]
 8002a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a48:	4413      	add	r3, r2
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a4e:	4413      	add	r3, r2
 8002a50:	2200      	movs	r2, #0
 8002a52:	701a      	strb	r2, [r3, #0]
    				          coils[starting_Address + rep + 2] = 1;
 8002a54:	89fa      	ldrh	r2, [r7, #14]
 8002a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a58:	4413      	add	r3, r2
 8002a5a:	3302      	adds	r3, #2
 8002a5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a5e:	4413      	add	r3, r2
 8002a60:	2201      	movs	r2, #1
 8002a62:	701a      	strb	r2, [r3, #0]
    				          coils[starting_Address + rep + 3] = 0;
 8002a64:	89fa      	ldrh	r2, [r7, #14]
 8002a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a68:	4413      	add	r3, r2
 8002a6a:	3303      	adds	r3, #3
 8002a6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a6e:	4413      	add	r3, r2
 8002a70:	2200      	movs	r2, #0
 8002a72:	701a      	strb	r2, [r3, #0]
                      rep += 4;
 8002a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a76:	3304      	adds	r3, #4
 8002a78:	62bb      	str	r3, [r7, #40]	; 0x28
    				          break;
 8002a7a:	e2d9      	b.n	8003030 <write_multiple_coils+0x1430>
                    case 0x06:
                      coils[starting_Address + rep] = 0;
 8002a7c:	89fa      	ldrh	r2, [r7, #14]
 8002a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a80:	4413      	add	r3, r2
 8002a82:	461a      	mov	r2, r3
 8002a84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a86:	4413      	add	r3, r2
 8002a88:	2200      	movs	r2, #0
 8002a8a:	701a      	strb	r2, [r3, #0]
    				          coils[starting_Address + rep + 1] = 1;
 8002a8c:	89fa      	ldrh	r2, [r7, #14]
 8002a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a90:	4413      	add	r3, r2
 8002a92:	3301      	adds	r3, #1
 8002a94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a96:	4413      	add	r3, r2
 8002a98:	2201      	movs	r2, #1
 8002a9a:	701a      	strb	r2, [r3, #0]
    				          coils[starting_Address + rep + 2] = 1;
 8002a9c:	89fa      	ldrh	r2, [r7, #14]
 8002a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa0:	4413      	add	r3, r2
 8002aa2:	3302      	adds	r3, #2
 8002aa4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002aa6:	4413      	add	r3, r2
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	701a      	strb	r2, [r3, #0]
    				          coils[starting_Address + rep + 3] = 0;
 8002aac:	89fa      	ldrh	r2, [r7, #14]
 8002aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab0:	4413      	add	r3, r2
 8002ab2:	3303      	adds	r3, #3
 8002ab4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ab6:	4413      	add	r3, r2
 8002ab8:	2200      	movs	r2, #0
 8002aba:	701a      	strb	r2, [r3, #0]
                      rep += 4;
 8002abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002abe:	3304      	adds	r3, #4
 8002ac0:	62bb      	str	r3, [r7, #40]	; 0x28
    				          break;
 8002ac2:	e2b5      	b.n	8003030 <write_multiple_coils+0x1430>
                    case 0x07:
                      coils[starting_Address + rep] = 1;
 8002ac4:	89fa      	ldrh	r2, [r7, #14]
 8002ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac8:	4413      	add	r3, r2
 8002aca:	461a      	mov	r2, r3
 8002acc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ace:	4413      	add	r3, r2
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	701a      	strb	r2, [r3, #0]
    				          coils[starting_Address + rep + 1] = 1;
 8002ad4:	89fa      	ldrh	r2, [r7, #14]
 8002ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad8:	4413      	add	r3, r2
 8002ada:	3301      	adds	r3, #1
 8002adc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ade:	4413      	add	r3, r2
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	701a      	strb	r2, [r3, #0]
    				          coils[starting_Address + rep + 2] = 1;
 8002ae4:	89fa      	ldrh	r2, [r7, #14]
 8002ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae8:	4413      	add	r3, r2
 8002aea:	3302      	adds	r3, #2
 8002aec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002aee:	4413      	add	r3, r2
 8002af0:	2201      	movs	r2, #1
 8002af2:	701a      	strb	r2, [r3, #0]
    				          coils[starting_Address + rep + 3] = 0;
 8002af4:	89fa      	ldrh	r2, [r7, #14]
 8002af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af8:	4413      	add	r3, r2
 8002afa:	3303      	adds	r3, #3
 8002afc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002afe:	4413      	add	r3, r2
 8002b00:	2200      	movs	r2, #0
 8002b02:	701a      	strb	r2, [r3, #0]
                      rep += 4;
 8002b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b06:	3304      	adds	r3, #4
 8002b08:	62bb      	str	r3, [r7, #40]	; 0x28
    				          break;
 8002b0a:	e291      	b.n	8003030 <write_multiple_coils+0x1430>
                    case 0x08:
                      coils[starting_Address + rep] = 0;
 8002b0c:	89fa      	ldrh	r2, [r7, #14]
 8002b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b10:	4413      	add	r3, r2
 8002b12:	461a      	mov	r2, r3
 8002b14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b16:	4413      	add	r3, r2
 8002b18:	2200      	movs	r2, #0
 8002b1a:	701a      	strb	r2, [r3, #0]
    				          coils[starting_Address + rep + 1] = 0;
 8002b1c:	89fa      	ldrh	r2, [r7, #14]
 8002b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b20:	4413      	add	r3, r2
 8002b22:	3301      	adds	r3, #1
 8002b24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b26:	4413      	add	r3, r2
 8002b28:	2200      	movs	r2, #0
 8002b2a:	701a      	strb	r2, [r3, #0]
    				          coils[starting_Address + rep + 2] = 0;
 8002b2c:	89fa      	ldrh	r2, [r7, #14]
 8002b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b30:	4413      	add	r3, r2
 8002b32:	3302      	adds	r3, #2
 8002b34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b36:	4413      	add	r3, r2
 8002b38:	2200      	movs	r2, #0
 8002b3a:	701a      	strb	r2, [r3, #0]
    				          coils[starting_Address + rep + 3] = 1;
 8002b3c:	89fa      	ldrh	r2, [r7, #14]
 8002b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b40:	4413      	add	r3, r2
 8002b42:	3303      	adds	r3, #3
 8002b44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b46:	4413      	add	r3, r2
 8002b48:	2201      	movs	r2, #1
 8002b4a:	701a      	strb	r2, [r3, #0]
                      rep += 4;
 8002b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b4e:	3304      	adds	r3, #4
 8002b50:	62bb      	str	r3, [r7, #40]	; 0x28
    				          break;
 8002b52:	e26d      	b.n	8003030 <write_multiple_coils+0x1430>
                    case 0x09:
                      coils[starting_Address + rep] = 1;
 8002b54:	89fa      	ldrh	r2, [r7, #14]
 8002b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b58:	4413      	add	r3, r2
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b5e:	4413      	add	r3, r2
 8002b60:	2201      	movs	r2, #1
 8002b62:	701a      	strb	r2, [r3, #0]
    				          coils[starting_Address + rep + 1] = 0;
 8002b64:	89fa      	ldrh	r2, [r7, #14]
 8002b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b68:	4413      	add	r3, r2
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b6e:	4413      	add	r3, r2
 8002b70:	2200      	movs	r2, #0
 8002b72:	701a      	strb	r2, [r3, #0]
    				          coils[starting_Address + rep + 2] = 0;
 8002b74:	89fa      	ldrh	r2, [r7, #14]
 8002b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b78:	4413      	add	r3, r2
 8002b7a:	3302      	adds	r3, #2
 8002b7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b7e:	4413      	add	r3, r2
 8002b80:	2200      	movs	r2, #0
 8002b82:	701a      	strb	r2, [r3, #0]
    				          coils[starting_Address + rep + 3] = 1;
 8002b84:	89fa      	ldrh	r2, [r7, #14]
 8002b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b88:	4413      	add	r3, r2
 8002b8a:	3303      	adds	r3, #3
 8002b8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b8e:	4413      	add	r3, r2
 8002b90:	2201      	movs	r2, #1
 8002b92:	701a      	strb	r2, [r3, #0]
                      rep += 4;
 8002b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b96:	3304      	adds	r3, #4
 8002b98:	62bb      	str	r3, [r7, #40]	; 0x28
    				          break;
 8002b9a:	e249      	b.n	8003030 <write_multiple_coils+0x1430>
                    case 0x0A:
                      coils[starting_Address + rep] = 0;
 8002b9c:	89fa      	ldrh	r2, [r7, #14]
 8002b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba0:	4413      	add	r3, r2
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ba6:	4413      	add	r3, r2
 8002ba8:	2200      	movs	r2, #0
 8002baa:	701a      	strb	r2, [r3, #0]
    				          coils[starting_Address + rep + 1] = 1;
 8002bac:	89fa      	ldrh	r2, [r7, #14]
 8002bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb0:	4413      	add	r3, r2
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002bb6:	4413      	add	r3, r2
 8002bb8:	2201      	movs	r2, #1
 8002bba:	701a      	strb	r2, [r3, #0]
    				          coils[starting_Address + rep + 2] = 0;
 8002bbc:	89fa      	ldrh	r2, [r7, #14]
 8002bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc0:	4413      	add	r3, r2
 8002bc2:	3302      	adds	r3, #2
 8002bc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002bc6:	4413      	add	r3, r2
 8002bc8:	2200      	movs	r2, #0
 8002bca:	701a      	strb	r2, [r3, #0]
    				          coils[starting_Address + rep + 3] = 1;
 8002bcc:	89fa      	ldrh	r2, [r7, #14]
 8002bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd0:	4413      	add	r3, r2
 8002bd2:	3303      	adds	r3, #3
 8002bd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002bd6:	4413      	add	r3, r2
 8002bd8:	2201      	movs	r2, #1
 8002bda:	701a      	strb	r2, [r3, #0]
                      rep += 4;
 8002bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bde:	3304      	adds	r3, #4
 8002be0:	62bb      	str	r3, [r7, #40]	; 0x28
    				          break;
 8002be2:	e225      	b.n	8003030 <write_multiple_coils+0x1430>
                    case 0x0B:
                      coils[starting_Address + rep] = 1;
 8002be4:	89fa      	ldrh	r2, [r7, #14]
 8002be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be8:	4413      	add	r3, r2
 8002bea:	461a      	mov	r2, r3
 8002bec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bee:	4413      	add	r3, r2
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	701a      	strb	r2, [r3, #0]
    				          coils[starting_Address + rep + 1] = 1;
 8002bf4:	89fa      	ldrh	r2, [r7, #14]
 8002bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf8:	4413      	add	r3, r2
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002bfe:	4413      	add	r3, r2
 8002c00:	2201      	movs	r2, #1
 8002c02:	701a      	strb	r2, [r3, #0]
    				          coils[starting_Address + rep + 2] = 0;
 8002c04:	89fa      	ldrh	r2, [r7, #14]
 8002c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c08:	4413      	add	r3, r2
 8002c0a:	3302      	adds	r3, #2
 8002c0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c0e:	4413      	add	r3, r2
 8002c10:	2200      	movs	r2, #0
 8002c12:	701a      	strb	r2, [r3, #0]
    				          coils[starting_Address + rep + 3] = 1;
 8002c14:	89fa      	ldrh	r2, [r7, #14]
 8002c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c18:	4413      	add	r3, r2
 8002c1a:	3303      	adds	r3, #3
 8002c1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c1e:	4413      	add	r3, r2
 8002c20:	2201      	movs	r2, #1
 8002c22:	701a      	strb	r2, [r3, #0]
    				          rep += 4;
 8002c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c26:	3304      	adds	r3, #4
 8002c28:	62bb      	str	r3, [r7, #40]	; 0x28
                      break;
 8002c2a:	e201      	b.n	8003030 <write_multiple_coils+0x1430>
                    case 0x0C:
                      coils[starting_Address + rep] = 0;
 8002c2c:	89fa      	ldrh	r2, [r7, #14]
 8002c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c30:	4413      	add	r3, r2
 8002c32:	461a      	mov	r2, r3
 8002c34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c36:	4413      	add	r3, r2
 8002c38:	2200      	movs	r2, #0
 8002c3a:	701a      	strb	r2, [r3, #0]
    				          coils[starting_Address + rep + 1] = 0;
 8002c3c:	89fa      	ldrh	r2, [r7, #14]
 8002c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c40:	4413      	add	r3, r2
 8002c42:	3301      	adds	r3, #1
 8002c44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c46:	4413      	add	r3, r2
 8002c48:	2200      	movs	r2, #0
 8002c4a:	701a      	strb	r2, [r3, #0]
    				          coils[starting_Address + rep + 2] = 1;
 8002c4c:	89fa      	ldrh	r2, [r7, #14]
 8002c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c50:	4413      	add	r3, r2
 8002c52:	3302      	adds	r3, #2
 8002c54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c56:	4413      	add	r3, r2
 8002c58:	2201      	movs	r2, #1
 8002c5a:	701a      	strb	r2, [r3, #0]
    				          coils[starting_Address + rep + 3] = 1;
 8002c5c:	89fa      	ldrh	r2, [r7, #14]
 8002c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c60:	4413      	add	r3, r2
 8002c62:	3303      	adds	r3, #3
 8002c64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c66:	4413      	add	r3, r2
 8002c68:	2201      	movs	r2, #1
 8002c6a:	701a      	strb	r2, [r3, #0]
    				          rep += 4;
 8002c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c6e:	3304      	adds	r3, #4
 8002c70:	62bb      	str	r3, [r7, #40]	; 0x28
                      break;
 8002c72:	e1dd      	b.n	8003030 <write_multiple_coils+0x1430>
                    case 0x0D:
                      coils[starting_Address + rep] = 1;
 8002c74:	89fa      	ldrh	r2, [r7, #14]
 8002c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c78:	4413      	add	r3, r2
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c7e:	4413      	add	r3, r2
 8002c80:	2201      	movs	r2, #1
 8002c82:	701a      	strb	r2, [r3, #0]
    				          coils[starting_Address + rep + 1] = 0;
 8002c84:	89fa      	ldrh	r2, [r7, #14]
 8002c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c88:	4413      	add	r3, r2
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c8e:	4413      	add	r3, r2
 8002c90:	2200      	movs	r2, #0
 8002c92:	701a      	strb	r2, [r3, #0]
    				          coils[starting_Address + rep + 2] = 1;
 8002c94:	89fa      	ldrh	r2, [r7, #14]
 8002c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c98:	4413      	add	r3, r2
 8002c9a:	3302      	adds	r3, #2
 8002c9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c9e:	4413      	add	r3, r2
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	701a      	strb	r2, [r3, #0]
    				          coils[starting_Address + rep + 3] = 1;
 8002ca4:	89fa      	ldrh	r2, [r7, #14]
 8002ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca8:	4413      	add	r3, r2
 8002caa:	3303      	adds	r3, #3
 8002cac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002cae:	4413      	add	r3, r2
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	701a      	strb	r2, [r3, #0]
    				          rep += 4;
 8002cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb6:	3304      	adds	r3, #4
 8002cb8:	62bb      	str	r3, [r7, #40]	; 0x28
                      break;
 8002cba:	e1b9      	b.n	8003030 <write_multiple_coils+0x1430>
                    case 0x0E:
                      coils[starting_Address + rep] = 0;
 8002cbc:	89fa      	ldrh	r2, [r7, #14]
 8002cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc0:	4413      	add	r3, r2
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cc6:	4413      	add	r3, r2
 8002cc8:	2200      	movs	r2, #0
 8002cca:	701a      	strb	r2, [r3, #0]
    				          coils[starting_Address + rep + 1] = 1;
 8002ccc:	89fa      	ldrh	r2, [r7, #14]
 8002cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd0:	4413      	add	r3, r2
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002cd6:	4413      	add	r3, r2
 8002cd8:	2201      	movs	r2, #1
 8002cda:	701a      	strb	r2, [r3, #0]
    				          coils[starting_Address + rep + 2] = 1;
 8002cdc:	89fa      	ldrh	r2, [r7, #14]
 8002cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce0:	4413      	add	r3, r2
 8002ce2:	3302      	adds	r3, #2
 8002ce4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ce6:	4413      	add	r3, r2
 8002ce8:	2201      	movs	r2, #1
 8002cea:	701a      	strb	r2, [r3, #0]
    				          coils[starting_Address + rep + 3] = 1;
 8002cec:	89fa      	ldrh	r2, [r7, #14]
 8002cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf0:	4413      	add	r3, r2
 8002cf2:	3303      	adds	r3, #3
 8002cf4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002cf6:	4413      	add	r3, r2
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	701a      	strb	r2, [r3, #0]
                      rep += 4;
 8002cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cfe:	3304      	adds	r3, #4
 8002d00:	62bb      	str	r3, [r7, #40]	; 0x28
    				          break;
 8002d02:	e195      	b.n	8003030 <write_multiple_coils+0x1430>
                    case 0x0F:
                      coils[starting_Address + rep] = 1;
 8002d04:	89fa      	ldrh	r2, [r7, #14]
 8002d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d08:	4413      	add	r3, r2
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d0e:	4413      	add	r3, r2
 8002d10:	2201      	movs	r2, #1
 8002d12:	701a      	strb	r2, [r3, #0]
    				          coils[starting_Address + rep + 1] = 1;
 8002d14:	89fa      	ldrh	r2, [r7, #14]
 8002d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d18:	4413      	add	r3, r2
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d1e:	4413      	add	r3, r2
 8002d20:	2201      	movs	r2, #1
 8002d22:	701a      	strb	r2, [r3, #0]
    				          coils[starting_Address + rep + 2] = 1;
 8002d24:	89fa      	ldrh	r2, [r7, #14]
 8002d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d28:	4413      	add	r3, r2
 8002d2a:	3302      	adds	r3, #2
 8002d2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d2e:	4413      	add	r3, r2
 8002d30:	2201      	movs	r2, #1
 8002d32:	701a      	strb	r2, [r3, #0]
    				          coils[starting_Address + rep + 3] = 1;
 8002d34:	89fa      	ldrh	r2, [r7, #14]
 8002d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d38:	4413      	add	r3, r2
 8002d3a:	3303      	adds	r3, #3
 8002d3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d3e:	4413      	add	r3, r2
 8002d40:	2201      	movs	r2, #1
 8002d42:	701a      	strb	r2, [r3, #0]
    				          rep += 4;
 8002d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d46:	3304      	adds	r3, #4
 8002d48:	62bb      	str	r3, [r7, #40]	; 0x28
    					        break;
 8002d4a:	e171      	b.n	8003030 <write_multiple_coils+0x1430>
    							}
    			      }else if(j==1){
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	f040 8169 	bne.w	8003026 <write_multiple_coils+0x1426>
    			        temp_hex = (output_value[q] >> 4) & 0x0F;
 8002d54:	6a3b      	ldr	r3, [r7, #32]
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	881b      	ldrh	r3, [r3, #0]
 8002d5e:	091b      	lsrs	r3, r3, #4
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	f003 030f 	and.w	r3, r3, #15
 8002d68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    							switch (temp2 - 4){
 8002d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d6e:	3b04      	subs	r3, #4
 8002d70:	2b03      	cmp	r3, #3
 8002d72:	d076      	beq.n	8002e62 <write_multiple_coils+0x1262>
 8002d74:	2b03      	cmp	r3, #3
 8002d76:	f300 815b 	bgt.w	8003030 <write_multiple_coils+0x1430>
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d002      	beq.n	8002d84 <write_multiple_coils+0x1184>
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d01a      	beq.n	8002db8 <write_multiple_coils+0x11b8>
 8002d82:	e155      	b.n	8003030 <write_multiple_coils+0x1430>
    								case 1:
    									switch (temp_hex){
 8002d84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d002      	beq.n	8002d92 <write_multiple_coils+0x1192>
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d009      	beq.n	8002da4 <write_multiple_coils+0x11a4>
    										  break;
    										case 0x01:
    											coils[starting_Address +rep] = 1;
    										  break;
    									}
    									break;
 8002d90:	e14e      	b.n	8003030 <write_multiple_coils+0x1430>
    											coils[starting_Address +rep] = 0;
 8002d92:	89fa      	ldrh	r2, [r7, #14]
 8002d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d96:	4413      	add	r3, r2
 8002d98:	461a      	mov	r2, r3
 8002d9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d9c:	4413      	add	r3, r2
 8002d9e:	2200      	movs	r2, #0
 8002da0:	701a      	strb	r2, [r3, #0]
    										  break;
 8002da2:	e008      	b.n	8002db6 <write_multiple_coils+0x11b6>
    											coils[starting_Address +rep] = 1;
 8002da4:	89fa      	ldrh	r2, [r7, #14]
 8002da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da8:	4413      	add	r3, r2
 8002daa:	461a      	mov	r2, r3
 8002dac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dae:	4413      	add	r3, r2
 8002db0:	2201      	movs	r2, #1
 8002db2:	701a      	strb	r2, [r3, #0]
    										  break;
 8002db4:	bf00      	nop
    									break;
 8002db6:	e13b      	b.n	8003030 <write_multiple_coils+0x1430>
    								case 2:
    									switch (temp_hex){
 8002db8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002dbc:	2b03      	cmp	r3, #3
 8002dbe:	f200 8134 	bhi.w	800302a <write_multiple_coils+0x142a>
 8002dc2:	a201      	add	r2, pc, #4	; (adr r2, 8002dc8 <write_multiple_coils+0x11c8>)
 8002dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc8:	08002dd9 	.word	0x08002dd9
 8002dcc:	08002dfb 	.word	0x08002dfb
 8002dd0:	08002e1d 	.word	0x08002e1d
 8002dd4:	08002e3f 	.word	0x08002e3f
    									  case 0x00:
    										  coils[starting_Address +rep] = 0;
 8002dd8:	89fa      	ldrh	r2, [r7, #14]
 8002dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ddc:	4413      	add	r3, r2
 8002dde:	461a      	mov	r2, r3
 8002de0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002de2:	4413      	add	r3, r2
 8002de4:	2200      	movs	r2, #0
 8002de6:	701a      	strb	r2, [r3, #0]
    										  coils[starting_Address +rep+1] = 0;
 8002de8:	89fa      	ldrh	r2, [r7, #14]
 8002dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dec:	4413      	add	r3, r2
 8002dee:	3301      	adds	r3, #1
 8002df0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002df2:	4413      	add	r3, r2
 8002df4:	2200      	movs	r2, #0
 8002df6:	701a      	strb	r2, [r3, #0]
    										  break;
 8002df8:	e032      	b.n	8002e60 <write_multiple_coils+0x1260>
    										case 0x01:
    											coils[starting_Address +rep] = 1;
 8002dfa:	89fa      	ldrh	r2, [r7, #14]
 8002dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfe:	4413      	add	r3, r2
 8002e00:	461a      	mov	r2, r3
 8002e02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e04:	4413      	add	r3, r2
 8002e06:	2201      	movs	r2, #1
 8002e08:	701a      	strb	r2, [r3, #0]
                          coils[starting_Address +rep+1] = 0;
 8002e0a:	89fa      	ldrh	r2, [r7, #14]
 8002e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e0e:	4413      	add	r3, r2
 8002e10:	3301      	adds	r3, #1
 8002e12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e14:	4413      	add	r3, r2
 8002e16:	2200      	movs	r2, #0
 8002e18:	701a      	strb	r2, [r3, #0]
                          break;
 8002e1a:	e021      	b.n	8002e60 <write_multiple_coils+0x1260>
    										case 0x02:
    											coils[starting_Address +rep] = 0;
 8002e1c:	89fa      	ldrh	r2, [r7, #14]
 8002e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e20:	4413      	add	r3, r2
 8002e22:	461a      	mov	r2, r3
 8002e24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e26:	4413      	add	r3, r2
 8002e28:	2200      	movs	r2, #0
 8002e2a:	701a      	strb	r2, [r3, #0]
                          coils[starting_Address +rep+1] = 1;
 8002e2c:	89fa      	ldrh	r2, [r7, #14]
 8002e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e30:	4413      	add	r3, r2
 8002e32:	3301      	adds	r3, #1
 8002e34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e36:	4413      	add	r3, r2
 8002e38:	2201      	movs	r2, #1
 8002e3a:	701a      	strb	r2, [r3, #0]
                          break;
 8002e3c:	e010      	b.n	8002e60 <write_multiple_coils+0x1260>
    										case 0x03:
    											coils[starting_Address +rep] = 1;
 8002e3e:	89fa      	ldrh	r2, [r7, #14]
 8002e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e42:	4413      	add	r3, r2
 8002e44:	461a      	mov	r2, r3
 8002e46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e48:	4413      	add	r3, r2
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	701a      	strb	r2, [r3, #0]
                          coils[starting_Address +rep+1] = 1;
 8002e4e:	89fa      	ldrh	r2, [r7, #14]
 8002e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e52:	4413      	add	r3, r2
 8002e54:	3301      	adds	r3, #1
 8002e56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e58:	4413      	add	r3, r2
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	701a      	strb	r2, [r3, #0]
                          break;
 8002e5e:	bf00      	nop
    									}
    									break;
 8002e60:	e0e3      	b.n	800302a <write_multiple_coils+0x142a>
    								case 3:
    									switch (temp_hex){
 8002e62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e66:	2b07      	cmp	r3, #7
 8002e68:	f200 80e1 	bhi.w	800302e <write_multiple_coils+0x142e>
 8002e6c:	a201      	add	r2, pc, #4	; (adr r2, 8002e74 <write_multiple_coils+0x1274>)
 8002e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e72:	bf00      	nop
 8002e74:	08002e95 	.word	0x08002e95
 8002e78:	08002ec7 	.word	0x08002ec7
 8002e7c:	08002ef9 	.word	0x08002ef9
 8002e80:	08002f2b 	.word	0x08002f2b
 8002e84:	08002f5d 	.word	0x08002f5d
 8002e88:	08002f8f 	.word	0x08002f8f
 8002e8c:	08002fc1 	.word	0x08002fc1
 8002e90:	08002ff3 	.word	0x08002ff3
    									  case 0x00:
    										  coils[starting_Address +rep] = 0;
 8002e94:	89fa      	ldrh	r2, [r7, #14]
 8002e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e98:	4413      	add	r3, r2
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e9e:	4413      	add	r3, r2
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	701a      	strb	r2, [r3, #0]
    										  coils[starting_Address +rep+1] = 0;
 8002ea4:	89fa      	ldrh	r2, [r7, #14]
 8002ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea8:	4413      	add	r3, r2
 8002eaa:	3301      	adds	r3, #1
 8002eac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002eae:	4413      	add	r3, r2
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	701a      	strb	r2, [r3, #0]
    										  coils[starting_Address +rep+2] = 0;
 8002eb4:	89fa      	ldrh	r2, [r7, #14]
 8002eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb8:	4413      	add	r3, r2
 8002eba:	3302      	adds	r3, #2
 8002ebc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ebe:	4413      	add	r3, r2
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	701a      	strb	r2, [r3, #0]
    										  break;
 8002ec4:	e0ae      	b.n	8003024 <write_multiple_coils+0x1424>
    										case 0x01:
    											coils[starting_Address +rep] = 1;
 8002ec6:	89fa      	ldrh	r2, [r7, #14]
 8002ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eca:	4413      	add	r3, r2
 8002ecc:	461a      	mov	r2, r3
 8002ece:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ed0:	4413      	add	r3, r2
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	701a      	strb	r2, [r3, #0]
                          coils[starting_Address +rep+1] = 0;
 8002ed6:	89fa      	ldrh	r2, [r7, #14]
 8002ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eda:	4413      	add	r3, r2
 8002edc:	3301      	adds	r3, #1
 8002ede:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ee0:	4413      	add	r3, r2
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	701a      	strb	r2, [r3, #0]
    										  coils[starting_Address +rep+2] = 0;
 8002ee6:	89fa      	ldrh	r2, [r7, #14]
 8002ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eea:	4413      	add	r3, r2
 8002eec:	3302      	adds	r3, #2
 8002eee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ef0:	4413      	add	r3, r2
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	701a      	strb	r2, [r3, #0]
                          break;
 8002ef6:	e095      	b.n	8003024 <write_multiple_coils+0x1424>
    										case 0x02:
    											coils[starting_Address +rep] = 0;
 8002ef8:	89fa      	ldrh	r2, [r7, #14]
 8002efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002efc:	4413      	add	r3, r2
 8002efe:	461a      	mov	r2, r3
 8002f00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f02:	4413      	add	r3, r2
 8002f04:	2200      	movs	r2, #0
 8002f06:	701a      	strb	r2, [r3, #0]
                          coils[starting_Address +rep+1] = 1;
 8002f08:	89fa      	ldrh	r2, [r7, #14]
 8002f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0c:	4413      	add	r3, r2
 8002f0e:	3301      	adds	r3, #1
 8002f10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f12:	4413      	add	r3, r2
 8002f14:	2201      	movs	r2, #1
 8002f16:	701a      	strb	r2, [r3, #0]
    										  coils[starting_Address +rep+2] = 0;
 8002f18:	89fa      	ldrh	r2, [r7, #14]
 8002f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1c:	4413      	add	r3, r2
 8002f1e:	3302      	adds	r3, #2
 8002f20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f22:	4413      	add	r3, r2
 8002f24:	2200      	movs	r2, #0
 8002f26:	701a      	strb	r2, [r3, #0]
                          break;
 8002f28:	e07c      	b.n	8003024 <write_multiple_coils+0x1424>
    										case 0x03:
    											coils[starting_Address +rep] = 1;
 8002f2a:	89fa      	ldrh	r2, [r7, #14]
 8002f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f2e:	4413      	add	r3, r2
 8002f30:	461a      	mov	r2, r3
 8002f32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f34:	4413      	add	r3, r2
 8002f36:	2201      	movs	r2, #1
 8002f38:	701a      	strb	r2, [r3, #0]
                          coils[starting_Address +rep+1] = 1;
 8002f3a:	89fa      	ldrh	r2, [r7, #14]
 8002f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f3e:	4413      	add	r3, r2
 8002f40:	3301      	adds	r3, #1
 8002f42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f44:	4413      	add	r3, r2
 8002f46:	2201      	movs	r2, #1
 8002f48:	701a      	strb	r2, [r3, #0]
    										  coils[starting_Address +rep+2] = 0;
 8002f4a:	89fa      	ldrh	r2, [r7, #14]
 8002f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f4e:	4413      	add	r3, r2
 8002f50:	3302      	adds	r3, #2
 8002f52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f54:	4413      	add	r3, r2
 8002f56:	2200      	movs	r2, #0
 8002f58:	701a      	strb	r2, [r3, #0]
                          break;
 8002f5a:	e063      	b.n	8003024 <write_multiple_coils+0x1424>
    									  case 0x04:
    										  coils[starting_Address +rep] = 0;
 8002f5c:	89fa      	ldrh	r2, [r7, #14]
 8002f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f60:	4413      	add	r3, r2
 8002f62:	461a      	mov	r2, r3
 8002f64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f66:	4413      	add	r3, r2
 8002f68:	2200      	movs	r2, #0
 8002f6a:	701a      	strb	r2, [r3, #0]
    										  coils[starting_Address +rep+1] = 0;
 8002f6c:	89fa      	ldrh	r2, [r7, #14]
 8002f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f70:	4413      	add	r3, r2
 8002f72:	3301      	adds	r3, #1
 8002f74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f76:	4413      	add	r3, r2
 8002f78:	2200      	movs	r2, #0
 8002f7a:	701a      	strb	r2, [r3, #0]
    										  coils[starting_Address +rep+2] = 1;
 8002f7c:	89fa      	ldrh	r2, [r7, #14]
 8002f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f80:	4413      	add	r3, r2
 8002f82:	3302      	adds	r3, #2
 8002f84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f86:	4413      	add	r3, r2
 8002f88:	2201      	movs	r2, #1
 8002f8a:	701a      	strb	r2, [r3, #0]
    										  break;
 8002f8c:	e04a      	b.n	8003024 <write_multiple_coils+0x1424>
    										case 0x05:
    											coils[starting_Address +rep] = 1;
 8002f8e:	89fa      	ldrh	r2, [r7, #14]
 8002f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f92:	4413      	add	r3, r2
 8002f94:	461a      	mov	r2, r3
 8002f96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f98:	4413      	add	r3, r2
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	701a      	strb	r2, [r3, #0]
                          coils[starting_Address +rep+1] = 0;
 8002f9e:	89fa      	ldrh	r2, [r7, #14]
 8002fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa2:	4413      	add	r3, r2
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fa8:	4413      	add	r3, r2
 8002faa:	2200      	movs	r2, #0
 8002fac:	701a      	strb	r2, [r3, #0]
    										  coils[starting_Address +rep+2] = 1;
 8002fae:	89fa      	ldrh	r2, [r7, #14]
 8002fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb2:	4413      	add	r3, r2
 8002fb4:	3302      	adds	r3, #2
 8002fb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fb8:	4413      	add	r3, r2
 8002fba:	2201      	movs	r2, #1
 8002fbc:	701a      	strb	r2, [r3, #0]
                          break;
 8002fbe:	e031      	b.n	8003024 <write_multiple_coils+0x1424>
    										case 0x06:
    											coils[starting_Address +rep] = 0;
 8002fc0:	89fa      	ldrh	r2, [r7, #14]
 8002fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc4:	4413      	add	r3, r2
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fca:	4413      	add	r3, r2
 8002fcc:	2200      	movs	r2, #0
 8002fce:	701a      	strb	r2, [r3, #0]
                          coils[starting_Address +rep+1] = 1;
 8002fd0:	89fa      	ldrh	r2, [r7, #14]
 8002fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd4:	4413      	add	r3, r2
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fda:	4413      	add	r3, r2
 8002fdc:	2201      	movs	r2, #1
 8002fde:	701a      	strb	r2, [r3, #0]
    										  coils[starting_Address +rep+2] = 1;
 8002fe0:	89fa      	ldrh	r2, [r7, #14]
 8002fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe4:	4413      	add	r3, r2
 8002fe6:	3302      	adds	r3, #2
 8002fe8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fea:	4413      	add	r3, r2
 8002fec:	2201      	movs	r2, #1
 8002fee:	701a      	strb	r2, [r3, #0]
                          break;
 8002ff0:	e018      	b.n	8003024 <write_multiple_coils+0x1424>
    										case 0x07:
    											coils[starting_Address +rep] = 1;
 8002ff2:	89fa      	ldrh	r2, [r7, #14]
 8002ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff6:	4413      	add	r3, r2
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ffc:	4413      	add	r3, r2
 8002ffe:	2201      	movs	r2, #1
 8003000:	701a      	strb	r2, [r3, #0]
                          coils[starting_Address +rep+1] = 1;
 8003002:	89fa      	ldrh	r2, [r7, #14]
 8003004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003006:	4413      	add	r3, r2
 8003008:	3301      	adds	r3, #1
 800300a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800300c:	4413      	add	r3, r2
 800300e:	2201      	movs	r2, #1
 8003010:	701a      	strb	r2, [r3, #0]
    										  coils[starting_Address +rep+2] = 1;
 8003012:	89fa      	ldrh	r2, [r7, #14]
 8003014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003016:	4413      	add	r3, r2
 8003018:	3302      	adds	r3, #2
 800301a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800301c:	4413      	add	r3, r2
 800301e:	2201      	movs	r2, #1
 8003020:	701a      	strb	r2, [r3, #0]
                          break;
 8003022:	bf00      	nop
    									}
    									break;
 8003024:	e003      	b.n	800302e <write_multiple_coils+0x142e>
    							}

    				    }
 8003026:	bf00      	nop
 8003028:	e002      	b.n	8003030 <write_multiple_coils+0x1430>
    									break;
 800302a:	bf00      	nop
 800302c:	e000      	b.n	8003030 <write_multiple_coils+0x1430>
    									break;
 800302e:	bf00      	nop
    			    for(int j=0; j<2; j++){
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	3301      	adds	r3, #1
 8003034:	61bb      	str	r3, [r7, #24]
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	2b01      	cmp	r3, #1
 800303a:	f77f ac11 	ble.w	8002860 <write_multiple_coils+0xc60>
 800303e:	e3b0      	b.n	80037a2 <write_multiple_coils+0x1ba2>
    					}
    			 }else if(temp2 <= 4 && temp2 >= 1){
 8003040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003042:	2b04      	cmp	r3, #4
 8003044:	f300 83a8 	bgt.w	8003798 <write_multiple_coils+0x1b98>
 8003048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800304a:	2b00      	cmp	r3, #0
 800304c:	f340 83a4 	ble.w	8003798 <write_multiple_coils+0x1b98>
    				  temp_hex = output_value[q]&0x0F;
 8003050:	6a3b      	ldr	r3, [r7, #32]
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	4413      	add	r3, r2
 8003058:	881b      	ldrh	r3, [r3, #0]
 800305a:	b2db      	uxtb	r3, r3
 800305c:	f003 030f 	and.w	r3, r3, #15
 8003060:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    					switch (temp2){
 8003064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003066:	3b01      	subs	r3, #1
 8003068:	2b03      	cmp	r3, #3
 800306a:	f200 839a 	bhi.w	80037a2 <write_multiple_coils+0x1ba2>
 800306e:	a201      	add	r2, pc, #4	; (adr r2, 8003074 <write_multiple_coils+0x1474>)
 8003070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003074:	08003085 	.word	0x08003085
 8003078:	080030b9 	.word	0x080030b9
 800307c:	08003163 	.word	0x08003163
 8003080:	08003327 	.word	0x08003327
    						case 1:
    							switch (temp_hex){
 8003084:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003088:	2b00      	cmp	r3, #0
 800308a:	d002      	beq.n	8003092 <write_multiple_coils+0x1492>
 800308c:	2b01      	cmp	r3, #1
 800308e:	d009      	beq.n	80030a4 <write_multiple_coils+0x14a4>
    								  break;
    								case 0x01:
    									coils[starting_Address +rep] = 1;
    								  break;
    							}
    							break;
 8003090:	e387      	b.n	80037a2 <write_multiple_coils+0x1ba2>
    									coils[starting_Address +rep] = 0;
 8003092:	89fa      	ldrh	r2, [r7, #14]
 8003094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003096:	4413      	add	r3, r2
 8003098:	461a      	mov	r2, r3
 800309a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800309c:	4413      	add	r3, r2
 800309e:	2200      	movs	r2, #0
 80030a0:	701a      	strb	r2, [r3, #0]
    								  break;
 80030a2:	e008      	b.n	80030b6 <write_multiple_coils+0x14b6>
    									coils[starting_Address +rep] = 1;
 80030a4:	89fa      	ldrh	r2, [r7, #14]
 80030a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a8:	4413      	add	r3, r2
 80030aa:	461a      	mov	r2, r3
 80030ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030ae:	4413      	add	r3, r2
 80030b0:	2201      	movs	r2, #1
 80030b2:	701a      	strb	r2, [r3, #0]
    								  break;
 80030b4:	bf00      	nop
    							break;
 80030b6:	e374      	b.n	80037a2 <write_multiple_coils+0x1ba2>
    						case 2:
    							switch (temp_hex){
 80030b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030bc:	2b03      	cmp	r3, #3
 80030be:	f200 836d 	bhi.w	800379c <write_multiple_coils+0x1b9c>
 80030c2:	a201      	add	r2, pc, #4	; (adr r2, 80030c8 <write_multiple_coils+0x14c8>)
 80030c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c8:	080030d9 	.word	0x080030d9
 80030cc:	080030fb 	.word	0x080030fb
 80030d0:	0800311d 	.word	0x0800311d
 80030d4:	0800313f 	.word	0x0800313f
    							  case 0x00:
    								  coils[starting_Address +rep] = 0;
 80030d8:	89fa      	ldrh	r2, [r7, #14]
 80030da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030dc:	4413      	add	r3, r2
 80030de:	461a      	mov	r2, r3
 80030e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030e2:	4413      	add	r3, r2
 80030e4:	2200      	movs	r2, #0
 80030e6:	701a      	strb	r2, [r3, #0]
    									coils[starting_Address +rep+1] = 0;
 80030e8:	89fa      	ldrh	r2, [r7, #14]
 80030ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ec:	4413      	add	r3, r2
 80030ee:	3301      	adds	r3, #1
 80030f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030f2:	4413      	add	r3, r2
 80030f4:	2200      	movs	r2, #0
 80030f6:	701a      	strb	r2, [r3, #0]
    								  break;
 80030f8:	e032      	b.n	8003160 <write_multiple_coils+0x1560>
    								case 0x01:
    									coils[starting_Address +rep] = 1;
 80030fa:	89fa      	ldrh	r2, [r7, #14]
 80030fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030fe:	4413      	add	r3, r2
 8003100:	461a      	mov	r2, r3
 8003102:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003104:	4413      	add	r3, r2
 8003106:	2201      	movs	r2, #1
 8003108:	701a      	strb	r2, [r3, #0]
                      coils[starting_Address +rep+1] = 0;
 800310a:	89fa      	ldrh	r2, [r7, #14]
 800310c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800310e:	4413      	add	r3, r2
 8003110:	3301      	adds	r3, #1
 8003112:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003114:	4413      	add	r3, r2
 8003116:	2200      	movs	r2, #0
 8003118:	701a      	strb	r2, [r3, #0]
                      break;
 800311a:	e021      	b.n	8003160 <write_multiple_coils+0x1560>
    								case 0x02:
    									coils[starting_Address +rep] = 0;
 800311c:	89fa      	ldrh	r2, [r7, #14]
 800311e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003120:	4413      	add	r3, r2
 8003122:	461a      	mov	r2, r3
 8003124:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003126:	4413      	add	r3, r2
 8003128:	2200      	movs	r2, #0
 800312a:	701a      	strb	r2, [r3, #0]
                      coils[starting_Address +rep+1] = 1;
 800312c:	89fa      	ldrh	r2, [r7, #14]
 800312e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003130:	4413      	add	r3, r2
 8003132:	3301      	adds	r3, #1
 8003134:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003136:	4413      	add	r3, r2
 8003138:	2201      	movs	r2, #1
 800313a:	701a      	strb	r2, [r3, #0]
                      break;
 800313c:	e010      	b.n	8003160 <write_multiple_coils+0x1560>
    							  case 0x03:
    									coils[starting_Address +rep] = 1;
 800313e:	89fa      	ldrh	r2, [r7, #14]
 8003140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003142:	4413      	add	r3, r2
 8003144:	461a      	mov	r2, r3
 8003146:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003148:	4413      	add	r3, r2
 800314a:	2201      	movs	r2, #1
 800314c:	701a      	strb	r2, [r3, #0]
                      coils[starting_Address +rep+1] = 1;
 800314e:	89fa      	ldrh	r2, [r7, #14]
 8003150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003152:	4413      	add	r3, r2
 8003154:	3301      	adds	r3, #1
 8003156:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003158:	4413      	add	r3, r2
 800315a:	2201      	movs	r2, #1
 800315c:	701a      	strb	r2, [r3, #0]
                      break;
 800315e:	bf00      	nop
    									}
    							break;
 8003160:	e31c      	b.n	800379c <write_multiple_coils+0x1b9c>
    						case 3:
    							switch (temp_hex){
 8003162:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003166:	2b07      	cmp	r3, #7
 8003168:	f200 831a 	bhi.w	80037a0 <write_multiple_coils+0x1ba0>
 800316c:	a201      	add	r2, pc, #4	; (adr r2, 8003174 <write_multiple_coils+0x1574>)
 800316e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003172:	bf00      	nop
 8003174:	08003195 	.word	0x08003195
 8003178:	080031c7 	.word	0x080031c7
 800317c:	080031f9 	.word	0x080031f9
 8003180:	0800322b 	.word	0x0800322b
 8003184:	0800325d 	.word	0x0800325d
 8003188:	0800328f 	.word	0x0800328f
 800318c:	080032c1 	.word	0x080032c1
 8003190:	080032f3 	.word	0x080032f3
    								case 0x00:
    								  coils[starting_Address +rep] = 0;
 8003194:	89fa      	ldrh	r2, [r7, #14]
 8003196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003198:	4413      	add	r3, r2
 800319a:	461a      	mov	r2, r3
 800319c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800319e:	4413      	add	r3, r2
 80031a0:	2200      	movs	r2, #0
 80031a2:	701a      	strb	r2, [r3, #0]
    									coils[starting_Address +rep+1] = 0;
 80031a4:	89fa      	ldrh	r2, [r7, #14]
 80031a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a8:	4413      	add	r3, r2
 80031aa:	3301      	adds	r3, #1
 80031ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031ae:	4413      	add	r3, r2
 80031b0:	2200      	movs	r2, #0
 80031b2:	701a      	strb	r2, [r3, #0]
    								  coils[starting_Address +rep+2] = 0;
 80031b4:	89fa      	ldrh	r2, [r7, #14]
 80031b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b8:	4413      	add	r3, r2
 80031ba:	3302      	adds	r3, #2
 80031bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031be:	4413      	add	r3, r2
 80031c0:	2200      	movs	r2, #0
 80031c2:	701a      	strb	r2, [r3, #0]
    									break;
 80031c4:	e0ae      	b.n	8003324 <write_multiple_coils+0x1724>
    								case 0x01:
    									coils[starting_Address +rep] = 1;
 80031c6:	89fa      	ldrh	r2, [r7, #14]
 80031c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ca:	4413      	add	r3, r2
 80031cc:	461a      	mov	r2, r3
 80031ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031d0:	4413      	add	r3, r2
 80031d2:	2201      	movs	r2, #1
 80031d4:	701a      	strb	r2, [r3, #0]
                      coils[starting_Address +rep+1] = 0;
 80031d6:	89fa      	ldrh	r2, [r7, #14]
 80031d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031da:	4413      	add	r3, r2
 80031dc:	3301      	adds	r3, #1
 80031de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031e0:	4413      	add	r3, r2
 80031e2:	2200      	movs	r2, #0
 80031e4:	701a      	strb	r2, [r3, #0]
    								  coils[starting_Address +rep+2] = 0;
 80031e6:	89fa      	ldrh	r2, [r7, #14]
 80031e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ea:	4413      	add	r3, r2
 80031ec:	3302      	adds	r3, #2
 80031ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031f0:	4413      	add	r3, r2
 80031f2:	2200      	movs	r2, #0
 80031f4:	701a      	strb	r2, [r3, #0]
                       break;
 80031f6:	e095      	b.n	8003324 <write_multiple_coils+0x1724>
    								case 0x02:
    									coils[starting_Address +rep] = 0;
 80031f8:	89fa      	ldrh	r2, [r7, #14]
 80031fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031fc:	4413      	add	r3, r2
 80031fe:	461a      	mov	r2, r3
 8003200:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003202:	4413      	add	r3, r2
 8003204:	2200      	movs	r2, #0
 8003206:	701a      	strb	r2, [r3, #0]
                      coils[starting_Address +rep+1] = 1;
 8003208:	89fa      	ldrh	r2, [r7, #14]
 800320a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320c:	4413      	add	r3, r2
 800320e:	3301      	adds	r3, #1
 8003210:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003212:	4413      	add	r3, r2
 8003214:	2201      	movs	r2, #1
 8003216:	701a      	strb	r2, [r3, #0]
    									coils[starting_Address +rep+2] = 0;
 8003218:	89fa      	ldrh	r2, [r7, #14]
 800321a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321c:	4413      	add	r3, r2
 800321e:	3302      	adds	r3, #2
 8003220:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003222:	4413      	add	r3, r2
 8003224:	2200      	movs	r2, #0
 8003226:	701a      	strb	r2, [r3, #0]
                      break;
 8003228:	e07c      	b.n	8003324 <write_multiple_coils+0x1724>
    								case 0x03:
    									coils[starting_Address +rep] = 1;
 800322a:	89fa      	ldrh	r2, [r7, #14]
 800322c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800322e:	4413      	add	r3, r2
 8003230:	461a      	mov	r2, r3
 8003232:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003234:	4413      	add	r3, r2
 8003236:	2201      	movs	r2, #1
 8003238:	701a      	strb	r2, [r3, #0]
                      coils[starting_Address +rep+1] = 1;
 800323a:	89fa      	ldrh	r2, [r7, #14]
 800323c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800323e:	4413      	add	r3, r2
 8003240:	3301      	adds	r3, #1
 8003242:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003244:	4413      	add	r3, r2
 8003246:	2201      	movs	r2, #1
 8003248:	701a      	strb	r2, [r3, #0]
    								  coils[starting_Address +rep+2] = 0;
 800324a:	89fa      	ldrh	r2, [r7, #14]
 800324c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324e:	4413      	add	r3, r2
 8003250:	3302      	adds	r3, #2
 8003252:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003254:	4413      	add	r3, r2
 8003256:	2200      	movs	r2, #0
 8003258:	701a      	strb	r2, [r3, #0]
                      break;
 800325a:	e063      	b.n	8003324 <write_multiple_coils+0x1724>
    								case 0x04:
    								  coils[starting_Address +rep] = 0;
 800325c:	89fa      	ldrh	r2, [r7, #14]
 800325e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003260:	4413      	add	r3, r2
 8003262:	461a      	mov	r2, r3
 8003264:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003266:	4413      	add	r3, r2
 8003268:	2200      	movs	r2, #0
 800326a:	701a      	strb	r2, [r3, #0]
    								  coils[starting_Address +rep+1] = 0;
 800326c:	89fa      	ldrh	r2, [r7, #14]
 800326e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003270:	4413      	add	r3, r2
 8003272:	3301      	adds	r3, #1
 8003274:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003276:	4413      	add	r3, r2
 8003278:	2200      	movs	r2, #0
 800327a:	701a      	strb	r2, [r3, #0]
    									coils[starting_Address +rep+2] = 1;
 800327c:	89fa      	ldrh	r2, [r7, #14]
 800327e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003280:	4413      	add	r3, r2
 8003282:	3302      	adds	r3, #2
 8003284:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003286:	4413      	add	r3, r2
 8003288:	2201      	movs	r2, #1
 800328a:	701a      	strb	r2, [r3, #0]
    									break;
 800328c:	e04a      	b.n	8003324 <write_multiple_coils+0x1724>
    								case 0x05:
    									coils[starting_Address +rep] = 1;
 800328e:	89fa      	ldrh	r2, [r7, #14]
 8003290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003292:	4413      	add	r3, r2
 8003294:	461a      	mov	r2, r3
 8003296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003298:	4413      	add	r3, r2
 800329a:	2201      	movs	r2, #1
 800329c:	701a      	strb	r2, [r3, #0]
                      coils[starting_Address +rep+1] = 0;
 800329e:	89fa      	ldrh	r2, [r7, #14]
 80032a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a2:	4413      	add	r3, r2
 80032a4:	3301      	adds	r3, #1
 80032a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032a8:	4413      	add	r3, r2
 80032aa:	2200      	movs	r2, #0
 80032ac:	701a      	strb	r2, [r3, #0]
    									coils[starting_Address +rep+2] = 1;
 80032ae:	89fa      	ldrh	r2, [r7, #14]
 80032b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b2:	4413      	add	r3, r2
 80032b4:	3302      	adds	r3, #2
 80032b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032b8:	4413      	add	r3, r2
 80032ba:	2201      	movs	r2, #1
 80032bc:	701a      	strb	r2, [r3, #0]
                      break;
 80032be:	e031      	b.n	8003324 <write_multiple_coils+0x1724>
    								case 0x06:
    									coils[starting_Address +rep] = 0;
 80032c0:	89fa      	ldrh	r2, [r7, #14]
 80032c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c4:	4413      	add	r3, r2
 80032c6:	461a      	mov	r2, r3
 80032c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032ca:	4413      	add	r3, r2
 80032cc:	2200      	movs	r2, #0
 80032ce:	701a      	strb	r2, [r3, #0]
                      coils[starting_Address +rep+1] = 1;
 80032d0:	89fa      	ldrh	r2, [r7, #14]
 80032d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d4:	4413      	add	r3, r2
 80032d6:	3301      	adds	r3, #1
 80032d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032da:	4413      	add	r3, r2
 80032dc:	2201      	movs	r2, #1
 80032de:	701a      	strb	r2, [r3, #0]
    									coils[starting_Address +rep+2] = 1;
 80032e0:	89fa      	ldrh	r2, [r7, #14]
 80032e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e4:	4413      	add	r3, r2
 80032e6:	3302      	adds	r3, #2
 80032e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032ea:	4413      	add	r3, r2
 80032ec:	2201      	movs	r2, #1
 80032ee:	701a      	strb	r2, [r3, #0]
                      break;
 80032f0:	e018      	b.n	8003324 <write_multiple_coils+0x1724>
    								case 0x07:
    									coils[starting_Address +rep] = 1;
 80032f2:	89fa      	ldrh	r2, [r7, #14]
 80032f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f6:	4413      	add	r3, r2
 80032f8:	461a      	mov	r2, r3
 80032fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032fc:	4413      	add	r3, r2
 80032fe:	2201      	movs	r2, #1
 8003300:	701a      	strb	r2, [r3, #0]
                      coils[starting_Address +rep+1] = 1;
 8003302:	89fa      	ldrh	r2, [r7, #14]
 8003304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003306:	4413      	add	r3, r2
 8003308:	3301      	adds	r3, #1
 800330a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800330c:	4413      	add	r3, r2
 800330e:	2201      	movs	r2, #1
 8003310:	701a      	strb	r2, [r3, #0]
    								  coils[starting_Address +rep+2] = 1;
 8003312:	89fa      	ldrh	r2, [r7, #14]
 8003314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003316:	4413      	add	r3, r2
 8003318:	3302      	adds	r3, #2
 800331a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800331c:	4413      	add	r3, r2
 800331e:	2201      	movs	r2, #1
 8003320:	701a      	strb	r2, [r3, #0]
                      break;
 8003322:	bf00      	nop
    							}
    							break;
 8003324:	e23c      	b.n	80037a0 <write_multiple_coils+0x1ba0>
    						case 4:
    							switch (temp_hex){
 8003326:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800332a:	2b0f      	cmp	r3, #15
 800332c:	f200 8239 	bhi.w	80037a2 <write_multiple_coils+0x1ba2>
 8003330:	a201      	add	r2, pc, #4	; (adr r2, 8003338 <write_multiple_coils+0x1738>)
 8003332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003336:	bf00      	nop
 8003338:	08003379 	.word	0x08003379
 800333c:	080033bb 	.word	0x080033bb
 8003340:	080033fd 	.word	0x080033fd
 8003344:	0800343f 	.word	0x0800343f
 8003348:	08003481 	.word	0x08003481
 800334c:	080034c3 	.word	0x080034c3
 8003350:	08003505 	.word	0x08003505
 8003354:	08003547 	.word	0x08003547
 8003358:	08003589 	.word	0x08003589
 800335c:	080035cb 	.word	0x080035cb
 8003360:	0800360d 	.word	0x0800360d
 8003364:	0800364f 	.word	0x0800364f
 8003368:	08003691 	.word	0x08003691
 800336c:	080036d3 	.word	0x080036d3
 8003370:	08003715 	.word	0x08003715
 8003374:	08003757 	.word	0x08003757
    								case 0x00:
    								  coils[starting_Address +rep] = 0;
 8003378:	89fa      	ldrh	r2, [r7, #14]
 800337a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800337c:	4413      	add	r3, r2
 800337e:	461a      	mov	r2, r3
 8003380:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003382:	4413      	add	r3, r2
 8003384:	2200      	movs	r2, #0
 8003386:	701a      	strb	r2, [r3, #0]
    									coils[starting_Address +rep+1] = 0;
 8003388:	89fa      	ldrh	r2, [r7, #14]
 800338a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800338c:	4413      	add	r3, r2
 800338e:	3301      	adds	r3, #1
 8003390:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003392:	4413      	add	r3, r2
 8003394:	2200      	movs	r2, #0
 8003396:	701a      	strb	r2, [r3, #0]
    								  coils[starting_Address +rep+2] = 0;
 8003398:	89fa      	ldrh	r2, [r7, #14]
 800339a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800339c:	4413      	add	r3, r2
 800339e:	3302      	adds	r3, #2
 80033a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033a2:	4413      	add	r3, r2
 80033a4:	2200      	movs	r2, #0
 80033a6:	701a      	strb	r2, [r3, #0]
    								  coils[starting_Address +rep+3] = 0;
 80033a8:	89fa      	ldrh	r2, [r7, #14]
 80033aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ac:	4413      	add	r3, r2
 80033ae:	3303      	adds	r3, #3
 80033b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033b2:	4413      	add	r3, r2
 80033b4:	2200      	movs	r2, #0
 80033b6:	701a      	strb	r2, [r3, #0]
    									break;
 80033b8:	e1f3      	b.n	80037a2 <write_multiple_coils+0x1ba2>
    								case 0x01:
    									coils[starting_Address +rep] = 1;
 80033ba:	89fa      	ldrh	r2, [r7, #14]
 80033bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033be:	4413      	add	r3, r2
 80033c0:	461a      	mov	r2, r3
 80033c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033c4:	4413      	add	r3, r2
 80033c6:	2201      	movs	r2, #1
 80033c8:	701a      	strb	r2, [r3, #0]
                      coils[starting_Address +rep+1] = 0;
 80033ca:	89fa      	ldrh	r2, [r7, #14]
 80033cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ce:	4413      	add	r3, r2
 80033d0:	3301      	adds	r3, #1
 80033d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033d4:	4413      	add	r3, r2
 80033d6:	2200      	movs	r2, #0
 80033d8:	701a      	strb	r2, [r3, #0]
    								  coils[starting_Address +rep+2] = 0;
 80033da:	89fa      	ldrh	r2, [r7, #14]
 80033dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033de:	4413      	add	r3, r2
 80033e0:	3302      	adds	r3, #2
 80033e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033e4:	4413      	add	r3, r2
 80033e6:	2200      	movs	r2, #0
 80033e8:	701a      	strb	r2, [r3, #0]
    								  coils[starting_Address +rep+3] = 0;
 80033ea:	89fa      	ldrh	r2, [r7, #14]
 80033ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ee:	4413      	add	r3, r2
 80033f0:	3303      	adds	r3, #3
 80033f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033f4:	4413      	add	r3, r2
 80033f6:	2200      	movs	r2, #0
 80033f8:	701a      	strb	r2, [r3, #0]
                       break;
 80033fa:	e1d2      	b.n	80037a2 <write_multiple_coils+0x1ba2>
    								case 0x02:
    									coils[starting_Address +rep] = 0;
 80033fc:	89fa      	ldrh	r2, [r7, #14]
 80033fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003400:	4413      	add	r3, r2
 8003402:	461a      	mov	r2, r3
 8003404:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003406:	4413      	add	r3, r2
 8003408:	2200      	movs	r2, #0
 800340a:	701a      	strb	r2, [r3, #0]
                      coils[starting_Address +rep+1] = 1;
 800340c:	89fa      	ldrh	r2, [r7, #14]
 800340e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003410:	4413      	add	r3, r2
 8003412:	3301      	adds	r3, #1
 8003414:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003416:	4413      	add	r3, r2
 8003418:	2201      	movs	r2, #1
 800341a:	701a      	strb	r2, [r3, #0]
    									coils[starting_Address +rep+2] = 0;
 800341c:	89fa      	ldrh	r2, [r7, #14]
 800341e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003420:	4413      	add	r3, r2
 8003422:	3302      	adds	r3, #2
 8003424:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003426:	4413      	add	r3, r2
 8003428:	2200      	movs	r2, #0
 800342a:	701a      	strb	r2, [r3, #0]
    								  coils[starting_Address +rep+3] = 0;
 800342c:	89fa      	ldrh	r2, [r7, #14]
 800342e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003430:	4413      	add	r3, r2
 8003432:	3303      	adds	r3, #3
 8003434:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003436:	4413      	add	r3, r2
 8003438:	2200      	movs	r2, #0
 800343a:	701a      	strb	r2, [r3, #0]
                      break;
 800343c:	e1b1      	b.n	80037a2 <write_multiple_coils+0x1ba2>
    								case 0x03:
    									coils[starting_Address +rep] = 1;
 800343e:	89fa      	ldrh	r2, [r7, #14]
 8003440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003442:	4413      	add	r3, r2
 8003444:	461a      	mov	r2, r3
 8003446:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003448:	4413      	add	r3, r2
 800344a:	2201      	movs	r2, #1
 800344c:	701a      	strb	r2, [r3, #0]
                      coils[starting_Address +rep+1] = 1;
 800344e:	89fa      	ldrh	r2, [r7, #14]
 8003450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003452:	4413      	add	r3, r2
 8003454:	3301      	adds	r3, #1
 8003456:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003458:	4413      	add	r3, r2
 800345a:	2201      	movs	r2, #1
 800345c:	701a      	strb	r2, [r3, #0]
    								  coils[starting_Address +rep+2] = 0;
 800345e:	89fa      	ldrh	r2, [r7, #14]
 8003460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003462:	4413      	add	r3, r2
 8003464:	3302      	adds	r3, #2
 8003466:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003468:	4413      	add	r3, r2
 800346a:	2200      	movs	r2, #0
 800346c:	701a      	strb	r2, [r3, #0]
    								  coils[starting_Address +rep+3] = 0;
 800346e:	89fa      	ldrh	r2, [r7, #14]
 8003470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003472:	4413      	add	r3, r2
 8003474:	3303      	adds	r3, #3
 8003476:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003478:	4413      	add	r3, r2
 800347a:	2200      	movs	r2, #0
 800347c:	701a      	strb	r2, [r3, #0]
                      break;
 800347e:	e190      	b.n	80037a2 <write_multiple_coils+0x1ba2>
    								case 0x04:
    								  coils[starting_Address +rep] = 0;
 8003480:	89fa      	ldrh	r2, [r7, #14]
 8003482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003484:	4413      	add	r3, r2
 8003486:	461a      	mov	r2, r3
 8003488:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800348a:	4413      	add	r3, r2
 800348c:	2200      	movs	r2, #0
 800348e:	701a      	strb	r2, [r3, #0]
    								  coils[starting_Address +rep+1] = 0;
 8003490:	89fa      	ldrh	r2, [r7, #14]
 8003492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003494:	4413      	add	r3, r2
 8003496:	3301      	adds	r3, #1
 8003498:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800349a:	4413      	add	r3, r2
 800349c:	2200      	movs	r2, #0
 800349e:	701a      	strb	r2, [r3, #0]
    									coils[starting_Address +rep+2] = 1;
 80034a0:	89fa      	ldrh	r2, [r7, #14]
 80034a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a4:	4413      	add	r3, r2
 80034a6:	3302      	adds	r3, #2
 80034a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034aa:	4413      	add	r3, r2
 80034ac:	2201      	movs	r2, #1
 80034ae:	701a      	strb	r2, [r3, #0]
    								  coils[starting_Address +rep+3] = 0;
 80034b0:	89fa      	ldrh	r2, [r7, #14]
 80034b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b4:	4413      	add	r3, r2
 80034b6:	3303      	adds	r3, #3
 80034b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034ba:	4413      	add	r3, r2
 80034bc:	2200      	movs	r2, #0
 80034be:	701a      	strb	r2, [r3, #0]
    									break;
 80034c0:	e16f      	b.n	80037a2 <write_multiple_coils+0x1ba2>
    								case 0x05:
    									coils[starting_Address +rep] = 1;
 80034c2:	89fa      	ldrh	r2, [r7, #14]
 80034c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c6:	4413      	add	r3, r2
 80034c8:	461a      	mov	r2, r3
 80034ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034cc:	4413      	add	r3, r2
 80034ce:	2201      	movs	r2, #1
 80034d0:	701a      	strb	r2, [r3, #0]
                      coils[starting_Address +rep+1] = 0;
 80034d2:	89fa      	ldrh	r2, [r7, #14]
 80034d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d6:	4413      	add	r3, r2
 80034d8:	3301      	adds	r3, #1
 80034da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034dc:	4413      	add	r3, r2
 80034de:	2200      	movs	r2, #0
 80034e0:	701a      	strb	r2, [r3, #0]
    									coils[starting_Address +rep+2] = 1;
 80034e2:	89fa      	ldrh	r2, [r7, #14]
 80034e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e6:	4413      	add	r3, r2
 80034e8:	3302      	adds	r3, #2
 80034ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034ec:	4413      	add	r3, r2
 80034ee:	2201      	movs	r2, #1
 80034f0:	701a      	strb	r2, [r3, #0]
    									coils[starting_Address +rep+3] = 0;
 80034f2:	89fa      	ldrh	r2, [r7, #14]
 80034f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f6:	4413      	add	r3, r2
 80034f8:	3303      	adds	r3, #3
 80034fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034fc:	4413      	add	r3, r2
 80034fe:	2200      	movs	r2, #0
 8003500:	701a      	strb	r2, [r3, #0]
                      break;
 8003502:	e14e      	b.n	80037a2 <write_multiple_coils+0x1ba2>
    								case 0x06:
    									coils[starting_Address +rep] = 0;
 8003504:	89fa      	ldrh	r2, [r7, #14]
 8003506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003508:	4413      	add	r3, r2
 800350a:	461a      	mov	r2, r3
 800350c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800350e:	4413      	add	r3, r2
 8003510:	2200      	movs	r2, #0
 8003512:	701a      	strb	r2, [r3, #0]
                      coils[starting_Address +rep+1] = 1;
 8003514:	89fa      	ldrh	r2, [r7, #14]
 8003516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003518:	4413      	add	r3, r2
 800351a:	3301      	adds	r3, #1
 800351c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800351e:	4413      	add	r3, r2
 8003520:	2201      	movs	r2, #1
 8003522:	701a      	strb	r2, [r3, #0]
    									coils[starting_Address +rep+2] = 1;
 8003524:	89fa      	ldrh	r2, [r7, #14]
 8003526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003528:	4413      	add	r3, r2
 800352a:	3302      	adds	r3, #2
 800352c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800352e:	4413      	add	r3, r2
 8003530:	2201      	movs	r2, #1
 8003532:	701a      	strb	r2, [r3, #0]
    								  coils[starting_Address +rep+3] = 0;
 8003534:	89fa      	ldrh	r2, [r7, #14]
 8003536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003538:	4413      	add	r3, r2
 800353a:	3303      	adds	r3, #3
 800353c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800353e:	4413      	add	r3, r2
 8003540:	2200      	movs	r2, #0
 8003542:	701a      	strb	r2, [r3, #0]
                      break;
 8003544:	e12d      	b.n	80037a2 <write_multiple_coils+0x1ba2>
    								case 0x07:
    									coils[starting_Address +rep] = 1;
 8003546:	89fa      	ldrh	r2, [r7, #14]
 8003548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354a:	4413      	add	r3, r2
 800354c:	461a      	mov	r2, r3
 800354e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003550:	4413      	add	r3, r2
 8003552:	2201      	movs	r2, #1
 8003554:	701a      	strb	r2, [r3, #0]
                      coils[starting_Address +rep+1] = 1;
 8003556:	89fa      	ldrh	r2, [r7, #14]
 8003558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355a:	4413      	add	r3, r2
 800355c:	3301      	adds	r3, #1
 800355e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003560:	4413      	add	r3, r2
 8003562:	2201      	movs	r2, #1
 8003564:	701a      	strb	r2, [r3, #0]
    								  coils[starting_Address +rep+2] = 1;
 8003566:	89fa      	ldrh	r2, [r7, #14]
 8003568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800356a:	4413      	add	r3, r2
 800356c:	3302      	adds	r3, #2
 800356e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003570:	4413      	add	r3, r2
 8003572:	2201      	movs	r2, #1
 8003574:	701a      	strb	r2, [r3, #0]
    								  coils[starting_Address +rep+3] = 0;
 8003576:	89fa      	ldrh	r2, [r7, #14]
 8003578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357a:	4413      	add	r3, r2
 800357c:	3303      	adds	r3, #3
 800357e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003580:	4413      	add	r3, r2
 8003582:	2200      	movs	r2, #0
 8003584:	701a      	strb	r2, [r3, #0]
                      break;
 8003586:	e10c      	b.n	80037a2 <write_multiple_coils+0x1ba2>
    								case 0x08:
    								  coils[starting_Address +rep] = 0;
 8003588:	89fa      	ldrh	r2, [r7, #14]
 800358a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800358c:	4413      	add	r3, r2
 800358e:	461a      	mov	r2, r3
 8003590:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003592:	4413      	add	r3, r2
 8003594:	2200      	movs	r2, #0
 8003596:	701a      	strb	r2, [r3, #0]
    									coils[starting_Address +rep+1] = 0;
 8003598:	89fa      	ldrh	r2, [r7, #14]
 800359a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800359c:	4413      	add	r3, r2
 800359e:	3301      	adds	r3, #1
 80035a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035a2:	4413      	add	r3, r2
 80035a4:	2200      	movs	r2, #0
 80035a6:	701a      	strb	r2, [r3, #0]
    								  coils[starting_Address +rep+2] = 0;
 80035a8:	89fa      	ldrh	r2, [r7, #14]
 80035aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ac:	4413      	add	r3, r2
 80035ae:	3302      	adds	r3, #2
 80035b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035b2:	4413      	add	r3, r2
 80035b4:	2200      	movs	r2, #0
 80035b6:	701a      	strb	r2, [r3, #0]
    								  coils[starting_Address +rep+3] = 1;
 80035b8:	89fa      	ldrh	r2, [r7, #14]
 80035ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035bc:	4413      	add	r3, r2
 80035be:	3303      	adds	r3, #3
 80035c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035c2:	4413      	add	r3, r2
 80035c4:	2201      	movs	r2, #1
 80035c6:	701a      	strb	r2, [r3, #0]
    									break;
 80035c8:	e0eb      	b.n	80037a2 <write_multiple_coils+0x1ba2>
    								case 0x09:
    									coils[starting_Address +rep] = 1;
 80035ca:	89fa      	ldrh	r2, [r7, #14]
 80035cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ce:	4413      	add	r3, r2
 80035d0:	461a      	mov	r2, r3
 80035d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035d4:	4413      	add	r3, r2
 80035d6:	2201      	movs	r2, #1
 80035d8:	701a      	strb	r2, [r3, #0]
                      coils[starting_Address +rep+1] = 0;
 80035da:	89fa      	ldrh	r2, [r7, #14]
 80035dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035de:	4413      	add	r3, r2
 80035e0:	3301      	adds	r3, #1
 80035e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035e4:	4413      	add	r3, r2
 80035e6:	2200      	movs	r2, #0
 80035e8:	701a      	strb	r2, [r3, #0]
    								  coils[starting_Address +rep+2] = 0;
 80035ea:	89fa      	ldrh	r2, [r7, #14]
 80035ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ee:	4413      	add	r3, r2
 80035f0:	3302      	adds	r3, #2
 80035f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035f4:	4413      	add	r3, r2
 80035f6:	2200      	movs	r2, #0
 80035f8:	701a      	strb	r2, [r3, #0]
    								  coils[starting_Address +rep+3] = 1;
 80035fa:	89fa      	ldrh	r2, [r7, #14]
 80035fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035fe:	4413      	add	r3, r2
 8003600:	3303      	adds	r3, #3
 8003602:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003604:	4413      	add	r3, r2
 8003606:	2201      	movs	r2, #1
 8003608:	701a      	strb	r2, [r3, #0]
                       break;
 800360a:	e0ca      	b.n	80037a2 <write_multiple_coils+0x1ba2>
    								case 0x0A:
    									coils[starting_Address +rep] = 0;
 800360c:	89fa      	ldrh	r2, [r7, #14]
 800360e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003610:	4413      	add	r3, r2
 8003612:	461a      	mov	r2, r3
 8003614:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003616:	4413      	add	r3, r2
 8003618:	2200      	movs	r2, #0
 800361a:	701a      	strb	r2, [r3, #0]
                      coils[starting_Address +rep+1] = 1;
 800361c:	89fa      	ldrh	r2, [r7, #14]
 800361e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003620:	4413      	add	r3, r2
 8003622:	3301      	adds	r3, #1
 8003624:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003626:	4413      	add	r3, r2
 8003628:	2201      	movs	r2, #1
 800362a:	701a      	strb	r2, [r3, #0]
    									coils[starting_Address +rep+2] = 0;
 800362c:	89fa      	ldrh	r2, [r7, #14]
 800362e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003630:	4413      	add	r3, r2
 8003632:	3302      	adds	r3, #2
 8003634:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003636:	4413      	add	r3, r2
 8003638:	2200      	movs	r2, #0
 800363a:	701a      	strb	r2, [r3, #0]
    								  coils[starting_Address +rep+3] = 1;
 800363c:	89fa      	ldrh	r2, [r7, #14]
 800363e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003640:	4413      	add	r3, r2
 8003642:	3303      	adds	r3, #3
 8003644:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003646:	4413      	add	r3, r2
 8003648:	2201      	movs	r2, #1
 800364a:	701a      	strb	r2, [r3, #0]
                      break;
 800364c:	e0a9      	b.n	80037a2 <write_multiple_coils+0x1ba2>
    								case 0x0B:
    									coils[starting_Address +rep] = 1;
 800364e:	89fa      	ldrh	r2, [r7, #14]
 8003650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003652:	4413      	add	r3, r2
 8003654:	461a      	mov	r2, r3
 8003656:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003658:	4413      	add	r3, r2
 800365a:	2201      	movs	r2, #1
 800365c:	701a      	strb	r2, [r3, #0]
                      coils[starting_Address +rep+1] = 1;
 800365e:	89fa      	ldrh	r2, [r7, #14]
 8003660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003662:	4413      	add	r3, r2
 8003664:	3301      	adds	r3, #1
 8003666:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003668:	4413      	add	r3, r2
 800366a:	2201      	movs	r2, #1
 800366c:	701a      	strb	r2, [r3, #0]
    								  coils[starting_Address +rep+2] = 0;
 800366e:	89fa      	ldrh	r2, [r7, #14]
 8003670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003672:	4413      	add	r3, r2
 8003674:	3302      	adds	r3, #2
 8003676:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003678:	4413      	add	r3, r2
 800367a:	2200      	movs	r2, #0
 800367c:	701a      	strb	r2, [r3, #0]
    								  coils[starting_Address +rep+3] = 1;
 800367e:	89fa      	ldrh	r2, [r7, #14]
 8003680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003682:	4413      	add	r3, r2
 8003684:	3303      	adds	r3, #3
 8003686:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003688:	4413      	add	r3, r2
 800368a:	2201      	movs	r2, #1
 800368c:	701a      	strb	r2, [r3, #0]
                      break;
 800368e:	e088      	b.n	80037a2 <write_multiple_coils+0x1ba2>
    								case 0x0C:
    								  coils[starting_Address +rep] = 0;
 8003690:	89fa      	ldrh	r2, [r7, #14]
 8003692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003694:	4413      	add	r3, r2
 8003696:	461a      	mov	r2, r3
 8003698:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800369a:	4413      	add	r3, r2
 800369c:	2200      	movs	r2, #0
 800369e:	701a      	strb	r2, [r3, #0]
    								  coils[starting_Address +rep+1] = 0;
 80036a0:	89fa      	ldrh	r2, [r7, #14]
 80036a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a4:	4413      	add	r3, r2
 80036a6:	3301      	adds	r3, #1
 80036a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036aa:	4413      	add	r3, r2
 80036ac:	2200      	movs	r2, #0
 80036ae:	701a      	strb	r2, [r3, #0]
    									coils[starting_Address +rep+2] = 1;
 80036b0:	89fa      	ldrh	r2, [r7, #14]
 80036b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b4:	4413      	add	r3, r2
 80036b6:	3302      	adds	r3, #2
 80036b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036ba:	4413      	add	r3, r2
 80036bc:	2201      	movs	r2, #1
 80036be:	701a      	strb	r2, [r3, #0]
    								  coils[starting_Address +rep+3] = 1;
 80036c0:	89fa      	ldrh	r2, [r7, #14]
 80036c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c4:	4413      	add	r3, r2
 80036c6:	3303      	adds	r3, #3
 80036c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036ca:	4413      	add	r3, r2
 80036cc:	2201      	movs	r2, #1
 80036ce:	701a      	strb	r2, [r3, #0]
    									break;
 80036d0:	e067      	b.n	80037a2 <write_multiple_coils+0x1ba2>
    								case 0x0D:
    									coils[starting_Address +rep] = 1;
 80036d2:	89fa      	ldrh	r2, [r7, #14]
 80036d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d6:	4413      	add	r3, r2
 80036d8:	461a      	mov	r2, r3
 80036da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036dc:	4413      	add	r3, r2
 80036de:	2201      	movs	r2, #1
 80036e0:	701a      	strb	r2, [r3, #0]
                      coils[starting_Address +rep+1] = 0;
 80036e2:	89fa      	ldrh	r2, [r7, #14]
 80036e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e6:	4413      	add	r3, r2
 80036e8:	3301      	adds	r3, #1
 80036ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036ec:	4413      	add	r3, r2
 80036ee:	2200      	movs	r2, #0
 80036f0:	701a      	strb	r2, [r3, #0]
    									coils[starting_Address +rep+2] = 1;
 80036f2:	89fa      	ldrh	r2, [r7, #14]
 80036f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f6:	4413      	add	r3, r2
 80036f8:	3302      	adds	r3, #2
 80036fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036fc:	4413      	add	r3, r2
 80036fe:	2201      	movs	r2, #1
 8003700:	701a      	strb	r2, [r3, #0]
    								  coils[starting_Address +rep+3] = 1;
 8003702:	89fa      	ldrh	r2, [r7, #14]
 8003704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003706:	4413      	add	r3, r2
 8003708:	3303      	adds	r3, #3
 800370a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800370c:	4413      	add	r3, r2
 800370e:	2201      	movs	r2, #1
 8003710:	701a      	strb	r2, [r3, #0]
                      break;
 8003712:	e046      	b.n	80037a2 <write_multiple_coils+0x1ba2>
    								case 0x0E:
    									coils[starting_Address +rep] = 0;
 8003714:	89fa      	ldrh	r2, [r7, #14]
 8003716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003718:	4413      	add	r3, r2
 800371a:	461a      	mov	r2, r3
 800371c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800371e:	4413      	add	r3, r2
 8003720:	2200      	movs	r2, #0
 8003722:	701a      	strb	r2, [r3, #0]
                      coils[starting_Address +rep+1] = 1;
 8003724:	89fa      	ldrh	r2, [r7, #14]
 8003726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003728:	4413      	add	r3, r2
 800372a:	3301      	adds	r3, #1
 800372c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800372e:	4413      	add	r3, r2
 8003730:	2201      	movs	r2, #1
 8003732:	701a      	strb	r2, [r3, #0]
    									coils[starting_Address +rep+2] = 1;
 8003734:	89fa      	ldrh	r2, [r7, #14]
 8003736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003738:	4413      	add	r3, r2
 800373a:	3302      	adds	r3, #2
 800373c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800373e:	4413      	add	r3, r2
 8003740:	2201      	movs	r2, #1
 8003742:	701a      	strb	r2, [r3, #0]
    								  coils[starting_Address +rep+3] = 1;
 8003744:	89fa      	ldrh	r2, [r7, #14]
 8003746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003748:	4413      	add	r3, r2
 800374a:	3303      	adds	r3, #3
 800374c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800374e:	4413      	add	r3, r2
 8003750:	2201      	movs	r2, #1
 8003752:	701a      	strb	r2, [r3, #0]
                      break;
 8003754:	e025      	b.n	80037a2 <write_multiple_coils+0x1ba2>
    								case 0x0F:
    									coils[starting_Address +rep] = 1;
 8003756:	89fa      	ldrh	r2, [r7, #14]
 8003758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800375a:	4413      	add	r3, r2
 800375c:	461a      	mov	r2, r3
 800375e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003760:	4413      	add	r3, r2
 8003762:	2201      	movs	r2, #1
 8003764:	701a      	strb	r2, [r3, #0]
                      coils[starting_Address +rep+1] = 1;
 8003766:	89fa      	ldrh	r2, [r7, #14]
 8003768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800376a:	4413      	add	r3, r2
 800376c:	3301      	adds	r3, #1
 800376e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003770:	4413      	add	r3, r2
 8003772:	2201      	movs	r2, #1
 8003774:	701a      	strb	r2, [r3, #0]
    								  coils[starting_Address +rep+2] = 1;
 8003776:	89fa      	ldrh	r2, [r7, #14]
 8003778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377a:	4413      	add	r3, r2
 800377c:	3302      	adds	r3, #2
 800377e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003780:	4413      	add	r3, r2
 8003782:	2201      	movs	r2, #1
 8003784:	701a      	strb	r2, [r3, #0]
    								  coils[starting_Address +rep+3] = 1;
 8003786:	89fa      	ldrh	r2, [r7, #14]
 8003788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800378a:	4413      	add	r3, r2
 800378c:	3303      	adds	r3, #3
 800378e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003790:	4413      	add	r3, r2
 8003792:	2201      	movs	r2, #1
 8003794:	701a      	strb	r2, [r3, #0]
                      break;
 8003796:	e004      	b.n	80037a2 <write_multiple_coils+0x1ba2>
    							}
    						}
 8003798:	bf00      	nop
 800379a:	e002      	b.n	80037a2 <write_multiple_coils+0x1ba2>
    							break;
 800379c:	bf00      	nop
 800379e:	e000      	b.n	80037a2 <write_multiple_coils+0x1ba2>
    							break;
 80037a0:	bf00      	nop
    			 }
    			 temp2 -=8;
 80037a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a4:	3b08      	subs	r3, #8
 80037a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    		for(int q=0; q<num_of_coils/8 +1;q++){
 80037a8:	6a3b      	ldr	r3, [r7, #32]
 80037aa:	3301      	adds	r3, #1
 80037ac:	623b      	str	r3, [r7, #32]
 80037ae:	89bb      	ldrh	r3, [r7, #12]
 80037b0:	08db      	lsrs	r3, r3, #3
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	461a      	mov	r2, r3
 80037b6:	6a3b      	ldr	r3, [r7, #32]
 80037b8:	4293      	cmp	r3, r2
 80037ba:	f77e adae 	ble.w	800231a <write_multiple_coils+0x71a>
 80037be:	e005      	b.n	80037cc <write_multiple_coils+0x1bcc>
    		}
    	}
		}else{
		  flag = 1;
 80037c0:	4b19      	ldr	r3, [pc, #100]	; (8003828 <write_multiple_coils+0x1c28>)
 80037c2:	2201      	movs	r2, #1
 80037c4:	601a      	str	r2, [r3, #0]
			exception_code = 0x04;
 80037c6:	4b19      	ldr	r3, [pc, #100]	; (800382c <write_multiple_coils+0x1c2c>)
 80037c8:	2204      	movs	r2, #4
 80037ca:	801a      	strh	r2, [r3, #0]
		}
		if(flag == 1){
 80037cc:	4b16      	ldr	r3, [pc, #88]	; (8003828 <write_multiple_coils+0x1c28>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d124      	bne.n	800381e <write_multiple_coils+0x1c1e>

		x[0] = Slave_Address;
 80037d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037d6:	2201      	movs	r2, #1
 80037d8:	701a      	strb	r2, [r3, #0]
		x[1] = 0x8F;
 80037da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037dc:	3301      	adds	r3, #1
 80037de:	228f      	movs	r2, #143	; 0x8f
 80037e0:	701a      	strb	r2, [r3, #0]
		x[2] = exception_code;
 80037e2:	4b12      	ldr	r3, [pc, #72]	; (800382c <write_multiple_coils+0x1c2c>)
 80037e4:	881a      	ldrh	r2, [r3, #0]
 80037e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037e8:	3302      	adds	r3, #2
 80037ea:	b2d2      	uxtb	r2, r2
 80037ec:	701a      	strb	r2, [r3, #0]
		slave_crc_send = crc16(x,3);
 80037ee:	2103      	movs	r1, #3
 80037f0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80037f2:	f7fd fa8d 	bl	8000d10 <crc16>
 80037f6:	4603      	mov	r3, r0
 80037f8:	82fb      	strh	r3, [r7, #22]
	  x[4] = slave_crc_send >> 8 & 0xFF;
 80037fa:	8afb      	ldrh	r3, [r7, #22]
 80037fc:	0a1b      	lsrs	r3, r3, #8
 80037fe:	b29a      	uxth	r2, r3
 8003800:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003802:	3304      	adds	r3, #4
 8003804:	b2d2      	uxtb	r2, r2
 8003806:	701a      	strb	r2, [r3, #0]
	  x[3] = slave_crc_send & 0xFF;
 8003808:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800380a:	3303      	adds	r3, #3
 800380c:	8afa      	ldrh	r2, [r7, #22]
 800380e:	b2d2      	uxtb	r2, r2
 8003810:	701a      	strb	r2, [r3, #0]
		sending_byte_count = 5;
 8003812:	4b07      	ldr	r3, [pc, #28]	; (8003830 <write_multiple_coils+0x1c30>)
 8003814:	2205      	movs	r2, #5
 8003816:	601a      	str	r2, [r3, #0]
		flag = 0;
 8003818:	4b03      	ldr	r3, [pc, #12]	; (8003828 <write_multiple_coils+0x1c28>)
 800381a:	2200      	movs	r2, #0
 800381c:	601a      	str	r2, [r3, #0]
		}
}
 800381e:	bf00      	nop
 8003820:	3740      	adds	r7, #64	; 0x40
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	20002b18 	.word	0x20002b18
 800382c:	200003f4 	.word	0x200003f4
 8003830:	200003f8 	.word	0x200003f8

08003834 <write_multiple_registers>:

//----------------------------------------------------------------------------------------------------------------------------------------

void write_multiple_registers(uint16_t starting_Address, uint16_t bytes,uint16_t num_of_regs, unsigned int input_regs[], unsigned int regs[],uint8_t x[]){
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
 800383a:	607b      	str	r3, [r7, #4]
 800383c:	4603      	mov	r3, r0
 800383e:	81fb      	strh	r3, [r7, #14]
 8003840:	460b      	mov	r3, r1
 8003842:	81bb      	strh	r3, [r7, #12]
 8003844:	4613      	mov	r3, r2
 8003846:	817b      	strh	r3, [r7, #10]
	 uint16_t slave_crc_send;
	 if(num_of_regs < 0 || num_of_regs > 0x007B || bytes != num_of_regs*2){
 8003848:	897b      	ldrh	r3, [r7, #10]
 800384a:	2b7b      	cmp	r3, #123	; 0x7b
 800384c:	d804      	bhi.n	8003858 <write_multiple_registers+0x24>
 800384e:	89ba      	ldrh	r2, [r7, #12]
 8003850:	897b      	ldrh	r3, [r7, #10]
 8003852:	005b      	lsls	r3, r3, #1
 8003854:	429a      	cmp	r2, r3
 8003856:	d006      	beq.n	8003866 <write_multiple_registers+0x32>
	     exception_code = 0x03;
 8003858:	4b50      	ldr	r3, [pc, #320]	; (800399c <write_multiple_registers+0x168>)
 800385a:	2203      	movs	r2, #3
 800385c:	801a      	strh	r2, [r3, #0]
		   flag = 1;
 800385e:	4b50      	ldr	r3, [pc, #320]	; (80039a0 <write_multiple_registers+0x16c>)
 8003860:	2201      	movs	r2, #1
 8003862:	601a      	str	r2, [r3, #0]
 8003864:	e06d      	b.n	8003942 <write_multiple_registers+0x10e>
	 }else if(starting_Address < len_of_regs && starting_Address + num_of_regs < len_of_regs){
 8003866:	89fa      	ldrh	r2, [r7, #14]
 8003868:	4b4e      	ldr	r3, [pc, #312]	; (80039a4 <write_multiple_registers+0x170>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	429a      	cmp	r2, r3
 800386e:	da0d      	bge.n	800388c <write_multiple_registers+0x58>
 8003870:	89fa      	ldrh	r2, [r7, #14]
 8003872:	897b      	ldrh	r3, [r7, #10]
 8003874:	441a      	add	r2, r3
 8003876:	4b4b      	ldr	r3, [pc, #300]	; (80039a4 <write_multiple_registers+0x170>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	429a      	cmp	r2, r3
 800387c:	da06      	bge.n	800388c <write_multiple_registers+0x58>
	     exception_code = 0x02;
 800387e:	4b47      	ldr	r3, [pc, #284]	; (800399c <write_multiple_registers+0x168>)
 8003880:	2202      	movs	r2, #2
 8003882:	801a      	strh	r2, [r3, #0]
		   flag = 1;
 8003884:	4b46      	ldr	r3, [pc, #280]	; (80039a0 <write_multiple_registers+0x16c>)
 8003886:	2201      	movs	r2, #1
 8003888:	601a      	str	r2, [r3, #0]
 800388a:	e05a      	b.n	8003942 <write_multiple_registers+0x10e>
	 }else if(starting_Address + num_of_regs < len_of_regs && num_of_regs >= 0 && num_of_regs <= 0x007B){
 800388c:	89fa      	ldrh	r2, [r7, #14]
 800388e:	897b      	ldrh	r3, [r7, #10]
 8003890:	441a      	add	r2, r3
 8003892:	4b44      	ldr	r3, [pc, #272]	; (80039a4 <write_multiple_registers+0x170>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	429a      	cmp	r2, r3
 8003898:	da4d      	bge.n	8003936 <write_multiple_registers+0x102>
 800389a:	897b      	ldrh	r3, [r7, #10]
 800389c:	2b7b      	cmp	r3, #123	; 0x7b
 800389e:	d84a      	bhi.n	8003936 <write_multiple_registers+0x102>
    	x[0] = Slave_Address;
 80038a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a2:	2201      	movs	r2, #1
 80038a4:	701a      	strb	r2, [r3, #0]
			x[1] = 0x10;
 80038a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a8:	3301      	adds	r3, #1
 80038aa:	2210      	movs	r2, #16
 80038ac:	701a      	strb	r2, [r3, #0]
			x[2] = (starting_Address >> 8) & 0xFF;
 80038ae:	89fb      	ldrh	r3, [r7, #14]
 80038b0:	0a1b      	lsrs	r3, r3, #8
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b6:	3302      	adds	r3, #2
 80038b8:	b2d2      	uxtb	r2, r2
 80038ba:	701a      	strb	r2, [r3, #0]
			x[3] =  starting_Address & 0xFF;
 80038bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038be:	3303      	adds	r3, #3
 80038c0:	89fa      	ldrh	r2, [r7, #14]
 80038c2:	b2d2      	uxtb	r2, r2
 80038c4:	701a      	strb	r2, [r3, #0]
			x[4] = (num_of_regs >> 8) & 0xFF;
 80038c6:	897b      	ldrh	r3, [r7, #10]
 80038c8:	0a1b      	lsrs	r3, r3, #8
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ce:	3304      	adds	r3, #4
 80038d0:	b2d2      	uxtb	r2, r2
 80038d2:	701a      	strb	r2, [r3, #0]
			x[5] =  num_of_regs & 0xFF;
 80038d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d6:	3305      	adds	r3, #5
 80038d8:	897a      	ldrh	r2, [r7, #10]
 80038da:	b2d2      	uxtb	r2, r2
 80038dc:	701a      	strb	r2, [r3, #0]
		  slave_crc_send = crc16(x,6);
 80038de:	2106      	movs	r1, #6
 80038e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038e2:	f7fd fa15 	bl	8000d10 <crc16>
 80038e6:	4603      	mov	r3, r0
 80038e8:	827b      	strh	r3, [r7, #18]
			x[7] = slave_crc_send >> 8 & 0xFF;
 80038ea:	8a7b      	ldrh	r3, [r7, #18]
 80038ec:	0a1b      	lsrs	r3, r3, #8
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f2:	3307      	adds	r3, #7
 80038f4:	b2d2      	uxtb	r2, r2
 80038f6:	701a      	strb	r2, [r3, #0]
			x[6] = slave_crc_send & 0xFF;
 80038f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fa:	3306      	adds	r3, #6
 80038fc:	8a7a      	ldrh	r2, [r7, #18]
 80038fe:	b2d2      	uxtb	r2, r2
 8003900:	701a      	strb	r2, [r3, #0]
			sending_byte_count = 8;
 8003902:	4b29      	ldr	r3, [pc, #164]	; (80039a8 <write_multiple_registers+0x174>)
 8003904:	2208      	movs	r2, #8
 8003906:	601a      	str	r2, [r3, #0]
   	for(int i=0; i<num_of_regs; i++){
 8003908:	2300      	movs	r3, #0
 800390a:	617b      	str	r3, [r7, #20]
 800390c:	e00e      	b.n	800392c <write_multiple_registers+0xf8>
		  regs[starting_Address + i] = input_regs[i];
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	441a      	add	r2, r3
 8003916:	89f9      	ldrh	r1, [r7, #14]
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	440b      	add	r3, r1
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	6a39      	ldr	r1, [r7, #32]
 8003920:	440b      	add	r3, r1
 8003922:	6812      	ldr	r2, [r2, #0]
 8003924:	601a      	str	r2, [r3, #0]
   	for(int i=0; i<num_of_regs; i++){
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	3301      	adds	r3, #1
 800392a:	617b      	str	r3, [r7, #20]
 800392c:	897b      	ldrh	r3, [r7, #10]
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	429a      	cmp	r2, r3
 8003932:	dbec      	blt.n	800390e <write_multiple_registers+0xda>
 8003934:	e005      	b.n	8003942 <write_multiple_registers+0x10e>
	  }
	}else{
	    exception_code = 0x04;
 8003936:	4b19      	ldr	r3, [pc, #100]	; (800399c <write_multiple_registers+0x168>)
 8003938:	2204      	movs	r2, #4
 800393a:	801a      	strh	r2, [r3, #0]
		  flag = 1;
 800393c:	4b18      	ldr	r3, [pc, #96]	; (80039a0 <write_multiple_registers+0x16c>)
 800393e:	2201      	movs	r2, #1
 8003940:	601a      	str	r2, [r3, #0]
	}
	if(flag == 1){
 8003942:	4b17      	ldr	r3, [pc, #92]	; (80039a0 <write_multiple_registers+0x16c>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d124      	bne.n	8003994 <write_multiple_registers+0x160>
		x[0] = Slave_Address;
 800394a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394c:	2201      	movs	r2, #1
 800394e:	701a      	strb	r2, [r3, #0]
		x[1] = 0x90;
 8003950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003952:	3301      	adds	r3, #1
 8003954:	2290      	movs	r2, #144	; 0x90
 8003956:	701a      	strb	r2, [r3, #0]
		x[2] = exception_code;
 8003958:	4b10      	ldr	r3, [pc, #64]	; (800399c <write_multiple_registers+0x168>)
 800395a:	881a      	ldrh	r2, [r3, #0]
 800395c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395e:	3302      	adds	r3, #2
 8003960:	b2d2      	uxtb	r2, r2
 8003962:	701a      	strb	r2, [r3, #0]
		slave_crc_send = crc16(x,3);
 8003964:	2103      	movs	r1, #3
 8003966:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003968:	f7fd f9d2 	bl	8000d10 <crc16>
 800396c:	4603      	mov	r3, r0
 800396e:	827b      	strh	r3, [r7, #18]
	  x[4] = slave_crc_send >> 8 & 0xFF;
 8003970:	8a7b      	ldrh	r3, [r7, #18]
 8003972:	0a1b      	lsrs	r3, r3, #8
 8003974:	b29a      	uxth	r2, r3
 8003976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003978:	3304      	adds	r3, #4
 800397a:	b2d2      	uxtb	r2, r2
 800397c:	701a      	strb	r2, [r3, #0]
	  x[3] = slave_crc_send & 0xFF;
 800397e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003980:	3303      	adds	r3, #3
 8003982:	8a7a      	ldrh	r2, [r7, #18]
 8003984:	b2d2      	uxtb	r2, r2
 8003986:	701a      	strb	r2, [r3, #0]
		sending_byte_count = 5;
 8003988:	4b07      	ldr	r3, [pc, #28]	; (80039a8 <write_multiple_registers+0x174>)
 800398a:	2205      	movs	r2, #5
 800398c:	601a      	str	r2, [r3, #0]
		flag = 0;
 800398e:	4b04      	ldr	r3, [pc, #16]	; (80039a0 <write_multiple_registers+0x16c>)
 8003990:	2200      	movs	r2, #0
 8003992:	601a      	str	r2, [r3, #0]
	}
}
 8003994:	bf00      	nop
 8003996:	3718      	adds	r7, #24
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	200003f4 	.word	0x200003f4
 80039a0:	20002b18 	.word	0x20002b18
 80039a4:	20000190 	.word	0x20000190
 80039a8:	200003f8 	.word	0x200003f8

080039ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039b2:	2300      	movs	r3, #0
 80039b4:	607b      	str	r3, [r7, #4]
 80039b6:	4b10      	ldr	r3, [pc, #64]	; (80039f8 <HAL_MspInit+0x4c>)
 80039b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ba:	4a0f      	ldr	r2, [pc, #60]	; (80039f8 <HAL_MspInit+0x4c>)
 80039bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039c0:	6453      	str	r3, [r2, #68]	; 0x44
 80039c2:	4b0d      	ldr	r3, [pc, #52]	; (80039f8 <HAL_MspInit+0x4c>)
 80039c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ca:	607b      	str	r3, [r7, #4]
 80039cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80039ce:	2300      	movs	r3, #0
 80039d0:	603b      	str	r3, [r7, #0]
 80039d2:	4b09      	ldr	r3, [pc, #36]	; (80039f8 <HAL_MspInit+0x4c>)
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	4a08      	ldr	r2, [pc, #32]	; (80039f8 <HAL_MspInit+0x4c>)
 80039d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039dc:	6413      	str	r3, [r2, #64]	; 0x40
 80039de:	4b06      	ldr	r3, [pc, #24]	; (80039f8 <HAL_MspInit+0x4c>)
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e6:	603b      	str	r3, [r7, #0]
 80039e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039ea:	bf00      	nop
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	40023800 	.word	0x40023800

080039fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a00:	e7fe      	b.n	8003a00 <NMI_Handler+0x4>

08003a02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a02:	b480      	push	{r7}
 8003a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a06:	e7fe      	b.n	8003a06 <HardFault_Handler+0x4>

08003a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a0c:	e7fe      	b.n	8003a0c <MemManage_Handler+0x4>

08003a0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a0e:	b480      	push	{r7}
 8003a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a12:	e7fe      	b.n	8003a12 <BusFault_Handler+0x4>

08003a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a14:	b480      	push	{r7}
 8003a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a18:	e7fe      	b.n	8003a18 <UsageFault_Handler+0x4>

08003a1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a1e:	bf00      	nop
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a2c:	bf00      	nop
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr

08003a36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a36:	b480      	push	{r7}
 8003a38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a3a:	bf00      	nop
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a48:	f000 f914 	bl	8003c74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a4c:	bf00      	nop
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003a54:	4802      	ldr	r0, [pc, #8]	; (8003a60 <USART1_IRQHandler+0x10>)
 8003a56:	f001 f987 	bl	8004d68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003a5a:	bf00      	nop
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	20003ab4 	.word	0x20003ab4

08003a64 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003a68:	4b11      	ldr	r3, [pc, #68]	; (8003ab0 <MX_USART1_UART_Init+0x4c>)
 8003a6a:	4a12      	ldr	r2, [pc, #72]	; (8003ab4 <MX_USART1_UART_Init+0x50>)
 8003a6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003a6e:	4b10      	ldr	r3, [pc, #64]	; (8003ab0 <MX_USART1_UART_Init+0x4c>)
 8003a70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003a74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003a76:	4b0e      	ldr	r3, [pc, #56]	; (8003ab0 <MX_USART1_UART_Init+0x4c>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003a7c:	4b0c      	ldr	r3, [pc, #48]	; (8003ab0 <MX_USART1_UART_Init+0x4c>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003a82:	4b0b      	ldr	r3, [pc, #44]	; (8003ab0 <MX_USART1_UART_Init+0x4c>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003a88:	4b09      	ldr	r3, [pc, #36]	; (8003ab0 <MX_USART1_UART_Init+0x4c>)
 8003a8a:	220c      	movs	r2, #12
 8003a8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a8e:	4b08      	ldr	r3, [pc, #32]	; (8003ab0 <MX_USART1_UART_Init+0x4c>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a94:	4b06      	ldr	r3, [pc, #24]	; (8003ab0 <MX_USART1_UART_Init+0x4c>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003a9a:	4805      	ldr	r0, [pc, #20]	; (8003ab0 <MX_USART1_UART_Init+0x4c>)
 8003a9c:	f001 f8a2 	bl	8004be4 <HAL_UART_Init>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003aa6:	f7fd f92d 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003aaa:	bf00      	nop
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	20003ab4 	.word	0x20003ab4
 8003ab4:	40011000 	.word	0x40011000

08003ab8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b08a      	sub	sp, #40	; 0x28
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ac0:	f107 0314 	add.w	r3, r7, #20
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	601a      	str	r2, [r3, #0]
 8003ac8:	605a      	str	r2, [r3, #4]
 8003aca:	609a      	str	r2, [r3, #8]
 8003acc:	60da      	str	r2, [r3, #12]
 8003ace:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a1d      	ldr	r2, [pc, #116]	; (8003b4c <HAL_UART_MspInit+0x94>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d134      	bne.n	8003b44 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003ada:	2300      	movs	r3, #0
 8003adc:	613b      	str	r3, [r7, #16]
 8003ade:	4b1c      	ldr	r3, [pc, #112]	; (8003b50 <HAL_UART_MspInit+0x98>)
 8003ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae2:	4a1b      	ldr	r2, [pc, #108]	; (8003b50 <HAL_UART_MspInit+0x98>)
 8003ae4:	f043 0310 	orr.w	r3, r3, #16
 8003ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8003aea:	4b19      	ldr	r3, [pc, #100]	; (8003b50 <HAL_UART_MspInit+0x98>)
 8003aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aee:	f003 0310 	and.w	r3, r3, #16
 8003af2:	613b      	str	r3, [r7, #16]
 8003af4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003af6:	2300      	movs	r3, #0
 8003af8:	60fb      	str	r3, [r7, #12]
 8003afa:	4b15      	ldr	r3, [pc, #84]	; (8003b50 <HAL_UART_MspInit+0x98>)
 8003afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afe:	4a14      	ldr	r2, [pc, #80]	; (8003b50 <HAL_UART_MspInit+0x98>)
 8003b00:	f043 0301 	orr.w	r3, r3, #1
 8003b04:	6313      	str	r3, [r2, #48]	; 0x30
 8003b06:	4b12      	ldr	r3, [pc, #72]	; (8003b50 <HAL_UART_MspInit+0x98>)
 8003b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	60fb      	str	r3, [r7, #12]
 8003b10:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003b12:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003b16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b18:	2302      	movs	r3, #2
 8003b1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b20:	2303      	movs	r3, #3
 8003b22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003b24:	2307      	movs	r3, #7
 8003b26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b28:	f107 0314 	add.w	r3, r7, #20
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	4809      	ldr	r0, [pc, #36]	; (8003b54 <HAL_UART_MspInit+0x9c>)
 8003b30:	f000 fa64 	bl	8003ffc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003b34:	2200      	movs	r2, #0
 8003b36:	2100      	movs	r1, #0
 8003b38:	2025      	movs	r0, #37	; 0x25
 8003b3a:	f000 f996 	bl	8003e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003b3e:	2025      	movs	r0, #37	; 0x25
 8003b40:	f000 f9af 	bl	8003ea2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003b44:	bf00      	nop
 8003b46:	3728      	adds	r7, #40	; 0x28
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	40011000 	.word	0x40011000
 8003b50:	40023800 	.word	0x40023800
 8003b54:	40020000 	.word	0x40020000

08003b58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003b58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003b5c:	480d      	ldr	r0, [pc, #52]	; (8003b94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003b5e:	490e      	ldr	r1, [pc, #56]	; (8003b98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003b60:	4a0e      	ldr	r2, [pc, #56]	; (8003b9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003b62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b64:	e002      	b.n	8003b6c <LoopCopyDataInit>

08003b66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b6a:	3304      	adds	r3, #4

08003b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b70:	d3f9      	bcc.n	8003b66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b72:	4a0b      	ldr	r2, [pc, #44]	; (8003ba0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003b74:	4c0b      	ldr	r4, [pc, #44]	; (8003ba4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003b76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b78:	e001      	b.n	8003b7e <LoopFillZerobss>

08003b7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b7c:	3204      	adds	r2, #4

08003b7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b80:	d3fb      	bcc.n	8003b7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003b82:	f000 f813 	bl	8003bac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b86:	f001 ffdf 	bl	8005b48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b8a:	f7fc fcc7 	bl	800051c <main>
  bx  lr    
 8003b8e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003b90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003b94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b98:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8003b9c:	08005de0 	.word	0x08005de0
  ldr r2, =_sbss
 8003ba0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003ba4:	20003afc 	.word	0x20003afc

08003ba8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ba8:	e7fe      	b.n	8003ba8 <ADC_IRQHandler>
	...

08003bac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003bac:	b480      	push	{r7}
 8003bae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003bb0:	4b06      	ldr	r3, [pc, #24]	; (8003bcc <SystemInit+0x20>)
 8003bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb6:	4a05      	ldr	r2, [pc, #20]	; (8003bcc <SystemInit+0x20>)
 8003bb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003bc0:	bf00      	nop
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	e000ed00 	.word	0xe000ed00

08003bd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003bd4:	4b0e      	ldr	r3, [pc, #56]	; (8003c10 <HAL_Init+0x40>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a0d      	ldr	r2, [pc, #52]	; (8003c10 <HAL_Init+0x40>)
 8003bda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003be0:	4b0b      	ldr	r3, [pc, #44]	; (8003c10 <HAL_Init+0x40>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a0a      	ldr	r2, [pc, #40]	; (8003c10 <HAL_Init+0x40>)
 8003be6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003bec:	4b08      	ldr	r3, [pc, #32]	; (8003c10 <HAL_Init+0x40>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a07      	ldr	r2, [pc, #28]	; (8003c10 <HAL_Init+0x40>)
 8003bf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bf6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bf8:	2003      	movs	r0, #3
 8003bfa:	f000 f92b 	bl	8003e54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003bfe:	200f      	movs	r0, #15
 8003c00:	f000 f808 	bl	8003c14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c04:	f7ff fed2 	bl	80039ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	40023c00 	.word	0x40023c00

08003c14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c1c:	4b12      	ldr	r3, [pc, #72]	; (8003c68 <HAL_InitTick+0x54>)
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	4b12      	ldr	r3, [pc, #72]	; (8003c6c <HAL_InitTick+0x58>)
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	4619      	mov	r1, r3
 8003c26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 f943 	bl	8003ebe <HAL_SYSTICK_Config>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e00e      	b.n	8003c60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2b0f      	cmp	r3, #15
 8003c46:	d80a      	bhi.n	8003c5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c48:	2200      	movs	r2, #0
 8003c4a:	6879      	ldr	r1, [r7, #4]
 8003c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c50:	f000 f90b 	bl	8003e6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c54:	4a06      	ldr	r2, [pc, #24]	; (8003c70 <HAL_InitTick+0x5c>)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	e000      	b.n	8003c60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3708      	adds	r7, #8
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	200001cc 	.word	0x200001cc
 8003c6c:	200001d4 	.word	0x200001d4
 8003c70:	200001d0 	.word	0x200001d0

08003c74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c74:	b480      	push	{r7}
 8003c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c78:	4b06      	ldr	r3, [pc, #24]	; (8003c94 <HAL_IncTick+0x20>)
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	4b06      	ldr	r3, [pc, #24]	; (8003c98 <HAL_IncTick+0x24>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4413      	add	r3, r2
 8003c84:	4a04      	ldr	r2, [pc, #16]	; (8003c98 <HAL_IncTick+0x24>)
 8003c86:	6013      	str	r3, [r2, #0]
}
 8003c88:	bf00      	nop
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	200001d4 	.word	0x200001d4
 8003c98:	20003af8 	.word	0x20003af8

08003c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8003ca0:	4b03      	ldr	r3, [pc, #12]	; (8003cb0 <HAL_GetTick+0x14>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	20003af8 	.word	0x20003af8

08003cb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f003 0307 	and.w	r3, r3, #7
 8003cc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cc4:	4b0c      	ldr	r3, [pc, #48]	; (8003cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cca:	68ba      	ldr	r2, [r7, #8]
 8003ccc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ce6:	4a04      	ldr	r2, [pc, #16]	; (8003cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	60d3      	str	r3, [r2, #12]
}
 8003cec:	bf00      	nop
 8003cee:	3714      	adds	r7, #20
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr
 8003cf8:	e000ed00 	.word	0xe000ed00

08003cfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d00:	4b04      	ldr	r3, [pc, #16]	; (8003d14 <__NVIC_GetPriorityGrouping+0x18>)
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	0a1b      	lsrs	r3, r3, #8
 8003d06:	f003 0307 	and.w	r3, r3, #7
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	e000ed00 	.word	0xe000ed00

08003d18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	4603      	mov	r3, r0
 8003d20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	db0b      	blt.n	8003d42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d2a:	79fb      	ldrb	r3, [r7, #7]
 8003d2c:	f003 021f 	and.w	r2, r3, #31
 8003d30:	4907      	ldr	r1, [pc, #28]	; (8003d50 <__NVIC_EnableIRQ+0x38>)
 8003d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d36:	095b      	lsrs	r3, r3, #5
 8003d38:	2001      	movs	r0, #1
 8003d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d42:	bf00      	nop
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	e000e100 	.word	0xe000e100

08003d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	6039      	str	r1, [r7, #0]
 8003d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	db0a      	blt.n	8003d7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	b2da      	uxtb	r2, r3
 8003d6c:	490c      	ldr	r1, [pc, #48]	; (8003da0 <__NVIC_SetPriority+0x4c>)
 8003d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d72:	0112      	lsls	r2, r2, #4
 8003d74:	b2d2      	uxtb	r2, r2
 8003d76:	440b      	add	r3, r1
 8003d78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d7c:	e00a      	b.n	8003d94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	b2da      	uxtb	r2, r3
 8003d82:	4908      	ldr	r1, [pc, #32]	; (8003da4 <__NVIC_SetPriority+0x50>)
 8003d84:	79fb      	ldrb	r3, [r7, #7]
 8003d86:	f003 030f 	and.w	r3, r3, #15
 8003d8a:	3b04      	subs	r3, #4
 8003d8c:	0112      	lsls	r2, r2, #4
 8003d8e:	b2d2      	uxtb	r2, r2
 8003d90:	440b      	add	r3, r1
 8003d92:	761a      	strb	r2, [r3, #24]
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr
 8003da0:	e000e100 	.word	0xe000e100
 8003da4:	e000ed00 	.word	0xe000ed00

08003da8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b089      	sub	sp, #36	; 0x24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f003 0307 	and.w	r3, r3, #7
 8003dba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	f1c3 0307 	rsb	r3, r3, #7
 8003dc2:	2b04      	cmp	r3, #4
 8003dc4:	bf28      	it	cs
 8003dc6:	2304      	movcs	r3, #4
 8003dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	3304      	adds	r3, #4
 8003dce:	2b06      	cmp	r3, #6
 8003dd0:	d902      	bls.n	8003dd8 <NVIC_EncodePriority+0x30>
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	3b03      	subs	r3, #3
 8003dd6:	e000      	b.n	8003dda <NVIC_EncodePriority+0x32>
 8003dd8:	2300      	movs	r3, #0
 8003dda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	fa02 f303 	lsl.w	r3, r2, r3
 8003de6:	43da      	mvns	r2, r3
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	401a      	ands	r2, r3
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003df0:	f04f 31ff 	mov.w	r1, #4294967295
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dfa:	43d9      	mvns	r1, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e00:	4313      	orrs	r3, r2
         );
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3724      	adds	r7, #36	; 0x24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
	...

08003e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e20:	d301      	bcc.n	8003e26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e22:	2301      	movs	r3, #1
 8003e24:	e00f      	b.n	8003e46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e26:	4a0a      	ldr	r2, [pc, #40]	; (8003e50 <SysTick_Config+0x40>)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e2e:	210f      	movs	r1, #15
 8003e30:	f04f 30ff 	mov.w	r0, #4294967295
 8003e34:	f7ff ff8e 	bl	8003d54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e38:	4b05      	ldr	r3, [pc, #20]	; (8003e50 <SysTick_Config+0x40>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e3e:	4b04      	ldr	r3, [pc, #16]	; (8003e50 <SysTick_Config+0x40>)
 8003e40:	2207      	movs	r2, #7
 8003e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	e000e010 	.word	0xe000e010

08003e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f7ff ff29 	bl	8003cb4 <__NVIC_SetPriorityGrouping>
}
 8003e62:	bf00      	nop
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b086      	sub	sp, #24
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	4603      	mov	r3, r0
 8003e72:	60b9      	str	r1, [r7, #8]
 8003e74:	607a      	str	r2, [r7, #4]
 8003e76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e7c:	f7ff ff3e 	bl	8003cfc <__NVIC_GetPriorityGrouping>
 8003e80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	68b9      	ldr	r1, [r7, #8]
 8003e86:	6978      	ldr	r0, [r7, #20]
 8003e88:	f7ff ff8e 	bl	8003da8 <NVIC_EncodePriority>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e92:	4611      	mov	r1, r2
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7ff ff5d 	bl	8003d54 <__NVIC_SetPriority>
}
 8003e9a:	bf00      	nop
 8003e9c:	3718      	adds	r7, #24
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b082      	sub	sp, #8
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7ff ff31 	bl	8003d18 <__NVIC_EnableIRQ>
}
 8003eb6:	bf00      	nop
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b082      	sub	sp, #8
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7ff ffa2 	bl	8003e10 <SysTick_Config>
 8003ecc:	4603      	mov	r3, r0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b084      	sub	sp, #16
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003ee4:	f7ff feda 	bl	8003c9c <HAL_GetTick>
 8003ee8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d008      	beq.n	8003f08 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2280      	movs	r2, #128	; 0x80
 8003efa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e052      	b.n	8003fae <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f022 0216 	bic.w	r2, r2, #22
 8003f16:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	695a      	ldr	r2, [r3, #20]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f26:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d103      	bne.n	8003f38 <HAL_DMA_Abort+0x62>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d007      	beq.n	8003f48 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f022 0208 	bic.w	r2, r2, #8
 8003f46:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f022 0201 	bic.w	r2, r2, #1
 8003f56:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f58:	e013      	b.n	8003f82 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f5a:	f7ff fe9f 	bl	8003c9c <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b05      	cmp	r3, #5
 8003f66:	d90c      	bls.n	8003f82 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2203      	movs	r2, #3
 8003f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e015      	b.n	8003fae <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0301 	and.w	r3, r3, #1
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1e4      	bne.n	8003f5a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f94:	223f      	movs	r2, #63	; 0x3f
 8003f96:	409a      	lsls	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b083      	sub	sp, #12
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d004      	beq.n	8003fd4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2280      	movs	r2, #128	; 0x80
 8003fce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e00c      	b.n	8003fee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2205      	movs	r2, #5
 8003fd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f022 0201 	bic.w	r2, r2, #1
 8003fea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
	...

08003ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b089      	sub	sp, #36	; 0x24
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004006:	2300      	movs	r3, #0
 8004008:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800400a:	2300      	movs	r3, #0
 800400c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800400e:	2300      	movs	r3, #0
 8004010:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004012:	2300      	movs	r3, #0
 8004014:	61fb      	str	r3, [r7, #28]
 8004016:	e16b      	b.n	80042f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004018:	2201      	movs	r2, #1
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	fa02 f303 	lsl.w	r3, r2, r3
 8004020:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	4013      	ands	r3, r2
 800402a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	429a      	cmp	r2, r3
 8004032:	f040 815a 	bne.w	80042ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f003 0303 	and.w	r3, r3, #3
 800403e:	2b01      	cmp	r3, #1
 8004040:	d005      	beq.n	800404e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800404a:	2b02      	cmp	r3, #2
 800404c:	d130      	bne.n	80040b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	005b      	lsls	r3, r3, #1
 8004058:	2203      	movs	r2, #3
 800405a:	fa02 f303 	lsl.w	r3, r2, r3
 800405e:	43db      	mvns	r3, r3
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	4013      	ands	r3, r2
 8004064:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	68da      	ldr	r2, [r3, #12]
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	005b      	lsls	r3, r3, #1
 800406e:	fa02 f303 	lsl.w	r3, r2, r3
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	4313      	orrs	r3, r2
 8004076:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	69ba      	ldr	r2, [r7, #24]
 800407c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004084:	2201      	movs	r2, #1
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	fa02 f303 	lsl.w	r3, r2, r3
 800408c:	43db      	mvns	r3, r3
 800408e:	69ba      	ldr	r2, [r7, #24]
 8004090:	4013      	ands	r3, r2
 8004092:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	091b      	lsrs	r3, r3, #4
 800409a:	f003 0201 	and.w	r2, r3, #1
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	fa02 f303 	lsl.w	r3, r2, r3
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f003 0303 	and.w	r3, r3, #3
 80040b8:	2b03      	cmp	r3, #3
 80040ba:	d017      	beq.n	80040ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	2203      	movs	r2, #3
 80040c8:	fa02 f303 	lsl.w	r3, r2, r3
 80040cc:	43db      	mvns	r3, r3
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	4013      	ands	r3, r2
 80040d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	005b      	lsls	r3, r3, #1
 80040dc:	fa02 f303 	lsl.w	r3, r2, r3
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f003 0303 	and.w	r3, r3, #3
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d123      	bne.n	8004140 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	08da      	lsrs	r2, r3, #3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	3208      	adds	r2, #8
 8004100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004104:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	f003 0307 	and.w	r3, r3, #7
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	220f      	movs	r2, #15
 8004110:	fa02 f303 	lsl.w	r3, r2, r3
 8004114:	43db      	mvns	r3, r3
 8004116:	69ba      	ldr	r2, [r7, #24]
 8004118:	4013      	ands	r3, r2
 800411a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	691a      	ldr	r2, [r3, #16]
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	f003 0307 	and.w	r3, r3, #7
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	fa02 f303 	lsl.w	r3, r2, r3
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	4313      	orrs	r3, r2
 8004130:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	08da      	lsrs	r2, r3, #3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	3208      	adds	r2, #8
 800413a:	69b9      	ldr	r1, [r7, #24]
 800413c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	2203      	movs	r2, #3
 800414c:	fa02 f303 	lsl.w	r3, r2, r3
 8004150:	43db      	mvns	r3, r3
 8004152:	69ba      	ldr	r2, [r7, #24]
 8004154:	4013      	ands	r3, r2
 8004156:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f003 0203 	and.w	r2, r3, #3
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	005b      	lsls	r3, r3, #1
 8004164:	fa02 f303 	lsl.w	r3, r2, r3
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	4313      	orrs	r3, r2
 800416c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800417c:	2b00      	cmp	r3, #0
 800417e:	f000 80b4 	beq.w	80042ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004182:	2300      	movs	r3, #0
 8004184:	60fb      	str	r3, [r7, #12]
 8004186:	4b60      	ldr	r3, [pc, #384]	; (8004308 <HAL_GPIO_Init+0x30c>)
 8004188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800418a:	4a5f      	ldr	r2, [pc, #380]	; (8004308 <HAL_GPIO_Init+0x30c>)
 800418c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004190:	6453      	str	r3, [r2, #68]	; 0x44
 8004192:	4b5d      	ldr	r3, [pc, #372]	; (8004308 <HAL_GPIO_Init+0x30c>)
 8004194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004196:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800419e:	4a5b      	ldr	r2, [pc, #364]	; (800430c <HAL_GPIO_Init+0x310>)
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	089b      	lsrs	r3, r3, #2
 80041a4:	3302      	adds	r3, #2
 80041a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	f003 0303 	and.w	r3, r3, #3
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	220f      	movs	r2, #15
 80041b6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ba:	43db      	mvns	r3, r3
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	4013      	ands	r3, r2
 80041c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a52      	ldr	r2, [pc, #328]	; (8004310 <HAL_GPIO_Init+0x314>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d02b      	beq.n	8004222 <HAL_GPIO_Init+0x226>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a51      	ldr	r2, [pc, #324]	; (8004314 <HAL_GPIO_Init+0x318>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d025      	beq.n	800421e <HAL_GPIO_Init+0x222>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a50      	ldr	r2, [pc, #320]	; (8004318 <HAL_GPIO_Init+0x31c>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d01f      	beq.n	800421a <HAL_GPIO_Init+0x21e>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a4f      	ldr	r2, [pc, #316]	; (800431c <HAL_GPIO_Init+0x320>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d019      	beq.n	8004216 <HAL_GPIO_Init+0x21a>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a4e      	ldr	r2, [pc, #312]	; (8004320 <HAL_GPIO_Init+0x324>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d013      	beq.n	8004212 <HAL_GPIO_Init+0x216>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a4d      	ldr	r2, [pc, #308]	; (8004324 <HAL_GPIO_Init+0x328>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d00d      	beq.n	800420e <HAL_GPIO_Init+0x212>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a4c      	ldr	r2, [pc, #304]	; (8004328 <HAL_GPIO_Init+0x32c>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d007      	beq.n	800420a <HAL_GPIO_Init+0x20e>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a4b      	ldr	r2, [pc, #300]	; (800432c <HAL_GPIO_Init+0x330>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d101      	bne.n	8004206 <HAL_GPIO_Init+0x20a>
 8004202:	2307      	movs	r3, #7
 8004204:	e00e      	b.n	8004224 <HAL_GPIO_Init+0x228>
 8004206:	2308      	movs	r3, #8
 8004208:	e00c      	b.n	8004224 <HAL_GPIO_Init+0x228>
 800420a:	2306      	movs	r3, #6
 800420c:	e00a      	b.n	8004224 <HAL_GPIO_Init+0x228>
 800420e:	2305      	movs	r3, #5
 8004210:	e008      	b.n	8004224 <HAL_GPIO_Init+0x228>
 8004212:	2304      	movs	r3, #4
 8004214:	e006      	b.n	8004224 <HAL_GPIO_Init+0x228>
 8004216:	2303      	movs	r3, #3
 8004218:	e004      	b.n	8004224 <HAL_GPIO_Init+0x228>
 800421a:	2302      	movs	r3, #2
 800421c:	e002      	b.n	8004224 <HAL_GPIO_Init+0x228>
 800421e:	2301      	movs	r3, #1
 8004220:	e000      	b.n	8004224 <HAL_GPIO_Init+0x228>
 8004222:	2300      	movs	r3, #0
 8004224:	69fa      	ldr	r2, [r7, #28]
 8004226:	f002 0203 	and.w	r2, r2, #3
 800422a:	0092      	lsls	r2, r2, #2
 800422c:	4093      	lsls	r3, r2
 800422e:	69ba      	ldr	r2, [r7, #24]
 8004230:	4313      	orrs	r3, r2
 8004232:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004234:	4935      	ldr	r1, [pc, #212]	; (800430c <HAL_GPIO_Init+0x310>)
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	089b      	lsrs	r3, r3, #2
 800423a:	3302      	adds	r3, #2
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004242:	4b3b      	ldr	r3, [pc, #236]	; (8004330 <HAL_GPIO_Init+0x334>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	43db      	mvns	r3, r3
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	4013      	ands	r3, r2
 8004250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d003      	beq.n	8004266 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	4313      	orrs	r3, r2
 8004264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004266:	4a32      	ldr	r2, [pc, #200]	; (8004330 <HAL_GPIO_Init+0x334>)
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800426c:	4b30      	ldr	r3, [pc, #192]	; (8004330 <HAL_GPIO_Init+0x334>)
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	43db      	mvns	r3, r3
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	4013      	ands	r3, r2
 800427a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d003      	beq.n	8004290 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	4313      	orrs	r3, r2
 800428e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004290:	4a27      	ldr	r2, [pc, #156]	; (8004330 <HAL_GPIO_Init+0x334>)
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004296:	4b26      	ldr	r3, [pc, #152]	; (8004330 <HAL_GPIO_Init+0x334>)
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	43db      	mvns	r3, r3
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	4013      	ands	r3, r2
 80042a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d003      	beq.n	80042ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80042ba:	4a1d      	ldr	r2, [pc, #116]	; (8004330 <HAL_GPIO_Init+0x334>)
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80042c0:	4b1b      	ldr	r3, [pc, #108]	; (8004330 <HAL_GPIO_Init+0x334>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	43db      	mvns	r3, r3
 80042ca:	69ba      	ldr	r2, [r7, #24]
 80042cc:	4013      	ands	r3, r2
 80042ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d003      	beq.n	80042e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80042dc:	69ba      	ldr	r2, [r7, #24]
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042e4:	4a12      	ldr	r2, [pc, #72]	; (8004330 <HAL_GPIO_Init+0x334>)
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	3301      	adds	r3, #1
 80042ee:	61fb      	str	r3, [r7, #28]
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	2b0f      	cmp	r3, #15
 80042f4:	f67f ae90 	bls.w	8004018 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80042f8:	bf00      	nop
 80042fa:	bf00      	nop
 80042fc:	3724      	adds	r7, #36	; 0x24
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	40023800 	.word	0x40023800
 800430c:	40013800 	.word	0x40013800
 8004310:	40020000 	.word	0x40020000
 8004314:	40020400 	.word	0x40020400
 8004318:	40020800 	.word	0x40020800
 800431c:	40020c00 	.word	0x40020c00
 8004320:	40021000 	.word	0x40021000
 8004324:	40021400 	.word	0x40021400
 8004328:	40021800 	.word	0x40021800
 800432c:	40021c00 	.word	0x40021c00
 8004330:	40013c00 	.word	0x40013c00

08004334 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b086      	sub	sp, #24
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d101      	bne.n	8004346 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e267      	b.n	8004816 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	2b00      	cmp	r3, #0
 8004350:	d075      	beq.n	800443e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004352:	4b88      	ldr	r3, [pc, #544]	; (8004574 <HAL_RCC_OscConfig+0x240>)
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f003 030c 	and.w	r3, r3, #12
 800435a:	2b04      	cmp	r3, #4
 800435c:	d00c      	beq.n	8004378 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800435e:	4b85      	ldr	r3, [pc, #532]	; (8004574 <HAL_RCC_OscConfig+0x240>)
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004366:	2b08      	cmp	r3, #8
 8004368:	d112      	bne.n	8004390 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800436a:	4b82      	ldr	r3, [pc, #520]	; (8004574 <HAL_RCC_OscConfig+0x240>)
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004372:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004376:	d10b      	bne.n	8004390 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004378:	4b7e      	ldr	r3, [pc, #504]	; (8004574 <HAL_RCC_OscConfig+0x240>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d05b      	beq.n	800443c <HAL_RCC_OscConfig+0x108>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d157      	bne.n	800443c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e242      	b.n	8004816 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004398:	d106      	bne.n	80043a8 <HAL_RCC_OscConfig+0x74>
 800439a:	4b76      	ldr	r3, [pc, #472]	; (8004574 <HAL_RCC_OscConfig+0x240>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a75      	ldr	r2, [pc, #468]	; (8004574 <HAL_RCC_OscConfig+0x240>)
 80043a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043a4:	6013      	str	r3, [r2, #0]
 80043a6:	e01d      	b.n	80043e4 <HAL_RCC_OscConfig+0xb0>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043b0:	d10c      	bne.n	80043cc <HAL_RCC_OscConfig+0x98>
 80043b2:	4b70      	ldr	r3, [pc, #448]	; (8004574 <HAL_RCC_OscConfig+0x240>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a6f      	ldr	r2, [pc, #444]	; (8004574 <HAL_RCC_OscConfig+0x240>)
 80043b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043bc:	6013      	str	r3, [r2, #0]
 80043be:	4b6d      	ldr	r3, [pc, #436]	; (8004574 <HAL_RCC_OscConfig+0x240>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a6c      	ldr	r2, [pc, #432]	; (8004574 <HAL_RCC_OscConfig+0x240>)
 80043c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043c8:	6013      	str	r3, [r2, #0]
 80043ca:	e00b      	b.n	80043e4 <HAL_RCC_OscConfig+0xb0>
 80043cc:	4b69      	ldr	r3, [pc, #420]	; (8004574 <HAL_RCC_OscConfig+0x240>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a68      	ldr	r2, [pc, #416]	; (8004574 <HAL_RCC_OscConfig+0x240>)
 80043d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043d6:	6013      	str	r3, [r2, #0]
 80043d8:	4b66      	ldr	r3, [pc, #408]	; (8004574 <HAL_RCC_OscConfig+0x240>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a65      	ldr	r2, [pc, #404]	; (8004574 <HAL_RCC_OscConfig+0x240>)
 80043de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d013      	beq.n	8004414 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ec:	f7ff fc56 	bl	8003c9c <HAL_GetTick>
 80043f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043f2:	e008      	b.n	8004406 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043f4:	f7ff fc52 	bl	8003c9c <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b64      	cmp	r3, #100	; 0x64
 8004400:	d901      	bls.n	8004406 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e207      	b.n	8004816 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004406:	4b5b      	ldr	r3, [pc, #364]	; (8004574 <HAL_RCC_OscConfig+0x240>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d0f0      	beq.n	80043f4 <HAL_RCC_OscConfig+0xc0>
 8004412:	e014      	b.n	800443e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004414:	f7ff fc42 	bl	8003c9c <HAL_GetTick>
 8004418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800441a:	e008      	b.n	800442e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800441c:	f7ff fc3e 	bl	8003c9c <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b64      	cmp	r3, #100	; 0x64
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e1f3      	b.n	8004816 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800442e:	4b51      	ldr	r3, [pc, #324]	; (8004574 <HAL_RCC_OscConfig+0x240>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1f0      	bne.n	800441c <HAL_RCC_OscConfig+0xe8>
 800443a:	e000      	b.n	800443e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800443c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d063      	beq.n	8004512 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800444a:	4b4a      	ldr	r3, [pc, #296]	; (8004574 <HAL_RCC_OscConfig+0x240>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f003 030c 	and.w	r3, r3, #12
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00b      	beq.n	800446e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004456:	4b47      	ldr	r3, [pc, #284]	; (8004574 <HAL_RCC_OscConfig+0x240>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800445e:	2b08      	cmp	r3, #8
 8004460:	d11c      	bne.n	800449c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004462:	4b44      	ldr	r3, [pc, #272]	; (8004574 <HAL_RCC_OscConfig+0x240>)
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d116      	bne.n	800449c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800446e:	4b41      	ldr	r3, [pc, #260]	; (8004574 <HAL_RCC_OscConfig+0x240>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b00      	cmp	r3, #0
 8004478:	d005      	beq.n	8004486 <HAL_RCC_OscConfig+0x152>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d001      	beq.n	8004486 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e1c7      	b.n	8004816 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004486:	4b3b      	ldr	r3, [pc, #236]	; (8004574 <HAL_RCC_OscConfig+0x240>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	00db      	lsls	r3, r3, #3
 8004494:	4937      	ldr	r1, [pc, #220]	; (8004574 <HAL_RCC_OscConfig+0x240>)
 8004496:	4313      	orrs	r3, r2
 8004498:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800449a:	e03a      	b.n	8004512 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d020      	beq.n	80044e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044a4:	4b34      	ldr	r3, [pc, #208]	; (8004578 <HAL_RCC_OscConfig+0x244>)
 80044a6:	2201      	movs	r2, #1
 80044a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044aa:	f7ff fbf7 	bl	8003c9c <HAL_GetTick>
 80044ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044b0:	e008      	b.n	80044c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044b2:	f7ff fbf3 	bl	8003c9c <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d901      	bls.n	80044c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e1a8      	b.n	8004816 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044c4:	4b2b      	ldr	r3, [pc, #172]	; (8004574 <HAL_RCC_OscConfig+0x240>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d0f0      	beq.n	80044b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044d0:	4b28      	ldr	r3, [pc, #160]	; (8004574 <HAL_RCC_OscConfig+0x240>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	00db      	lsls	r3, r3, #3
 80044de:	4925      	ldr	r1, [pc, #148]	; (8004574 <HAL_RCC_OscConfig+0x240>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	600b      	str	r3, [r1, #0]
 80044e4:	e015      	b.n	8004512 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044e6:	4b24      	ldr	r3, [pc, #144]	; (8004578 <HAL_RCC_OscConfig+0x244>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ec:	f7ff fbd6 	bl	8003c9c <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044f4:	f7ff fbd2 	bl	8003c9c <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e187      	b.n	8004816 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004506:	4b1b      	ldr	r3, [pc, #108]	; (8004574 <HAL_RCC_OscConfig+0x240>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1f0      	bne.n	80044f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0308 	and.w	r3, r3, #8
 800451a:	2b00      	cmp	r3, #0
 800451c:	d036      	beq.n	800458c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d016      	beq.n	8004554 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004526:	4b15      	ldr	r3, [pc, #84]	; (800457c <HAL_RCC_OscConfig+0x248>)
 8004528:	2201      	movs	r2, #1
 800452a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800452c:	f7ff fbb6 	bl	8003c9c <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004534:	f7ff fbb2 	bl	8003c9c <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b02      	cmp	r3, #2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e167      	b.n	8004816 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004546:	4b0b      	ldr	r3, [pc, #44]	; (8004574 <HAL_RCC_OscConfig+0x240>)
 8004548:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0f0      	beq.n	8004534 <HAL_RCC_OscConfig+0x200>
 8004552:	e01b      	b.n	800458c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004554:	4b09      	ldr	r3, [pc, #36]	; (800457c <HAL_RCC_OscConfig+0x248>)
 8004556:	2200      	movs	r2, #0
 8004558:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800455a:	f7ff fb9f 	bl	8003c9c <HAL_GetTick>
 800455e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004560:	e00e      	b.n	8004580 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004562:	f7ff fb9b 	bl	8003c9c <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d907      	bls.n	8004580 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e150      	b.n	8004816 <HAL_RCC_OscConfig+0x4e2>
 8004574:	40023800 	.word	0x40023800
 8004578:	42470000 	.word	0x42470000
 800457c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004580:	4b88      	ldr	r3, [pc, #544]	; (80047a4 <HAL_RCC_OscConfig+0x470>)
 8004582:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1ea      	bne.n	8004562 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0304 	and.w	r3, r3, #4
 8004594:	2b00      	cmp	r3, #0
 8004596:	f000 8097 	beq.w	80046c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800459a:	2300      	movs	r3, #0
 800459c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800459e:	4b81      	ldr	r3, [pc, #516]	; (80047a4 <HAL_RCC_OscConfig+0x470>)
 80045a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d10f      	bne.n	80045ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045aa:	2300      	movs	r3, #0
 80045ac:	60bb      	str	r3, [r7, #8]
 80045ae:	4b7d      	ldr	r3, [pc, #500]	; (80047a4 <HAL_RCC_OscConfig+0x470>)
 80045b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b2:	4a7c      	ldr	r2, [pc, #496]	; (80047a4 <HAL_RCC_OscConfig+0x470>)
 80045b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045b8:	6413      	str	r3, [r2, #64]	; 0x40
 80045ba:	4b7a      	ldr	r3, [pc, #488]	; (80047a4 <HAL_RCC_OscConfig+0x470>)
 80045bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045c2:	60bb      	str	r3, [r7, #8]
 80045c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045c6:	2301      	movs	r3, #1
 80045c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ca:	4b77      	ldr	r3, [pc, #476]	; (80047a8 <HAL_RCC_OscConfig+0x474>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d118      	bne.n	8004608 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045d6:	4b74      	ldr	r3, [pc, #464]	; (80047a8 <HAL_RCC_OscConfig+0x474>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a73      	ldr	r2, [pc, #460]	; (80047a8 <HAL_RCC_OscConfig+0x474>)
 80045dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045e2:	f7ff fb5b 	bl	8003c9c <HAL_GetTick>
 80045e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045e8:	e008      	b.n	80045fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045ea:	f7ff fb57 	bl	8003c9c <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d901      	bls.n	80045fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e10c      	b.n	8004816 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045fc:	4b6a      	ldr	r3, [pc, #424]	; (80047a8 <HAL_RCC_OscConfig+0x474>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004604:	2b00      	cmp	r3, #0
 8004606:	d0f0      	beq.n	80045ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	2b01      	cmp	r3, #1
 800460e:	d106      	bne.n	800461e <HAL_RCC_OscConfig+0x2ea>
 8004610:	4b64      	ldr	r3, [pc, #400]	; (80047a4 <HAL_RCC_OscConfig+0x470>)
 8004612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004614:	4a63      	ldr	r2, [pc, #396]	; (80047a4 <HAL_RCC_OscConfig+0x470>)
 8004616:	f043 0301 	orr.w	r3, r3, #1
 800461a:	6713      	str	r3, [r2, #112]	; 0x70
 800461c:	e01c      	b.n	8004658 <HAL_RCC_OscConfig+0x324>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	2b05      	cmp	r3, #5
 8004624:	d10c      	bne.n	8004640 <HAL_RCC_OscConfig+0x30c>
 8004626:	4b5f      	ldr	r3, [pc, #380]	; (80047a4 <HAL_RCC_OscConfig+0x470>)
 8004628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462a:	4a5e      	ldr	r2, [pc, #376]	; (80047a4 <HAL_RCC_OscConfig+0x470>)
 800462c:	f043 0304 	orr.w	r3, r3, #4
 8004630:	6713      	str	r3, [r2, #112]	; 0x70
 8004632:	4b5c      	ldr	r3, [pc, #368]	; (80047a4 <HAL_RCC_OscConfig+0x470>)
 8004634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004636:	4a5b      	ldr	r2, [pc, #364]	; (80047a4 <HAL_RCC_OscConfig+0x470>)
 8004638:	f043 0301 	orr.w	r3, r3, #1
 800463c:	6713      	str	r3, [r2, #112]	; 0x70
 800463e:	e00b      	b.n	8004658 <HAL_RCC_OscConfig+0x324>
 8004640:	4b58      	ldr	r3, [pc, #352]	; (80047a4 <HAL_RCC_OscConfig+0x470>)
 8004642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004644:	4a57      	ldr	r2, [pc, #348]	; (80047a4 <HAL_RCC_OscConfig+0x470>)
 8004646:	f023 0301 	bic.w	r3, r3, #1
 800464a:	6713      	str	r3, [r2, #112]	; 0x70
 800464c:	4b55      	ldr	r3, [pc, #340]	; (80047a4 <HAL_RCC_OscConfig+0x470>)
 800464e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004650:	4a54      	ldr	r2, [pc, #336]	; (80047a4 <HAL_RCC_OscConfig+0x470>)
 8004652:	f023 0304 	bic.w	r3, r3, #4
 8004656:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d015      	beq.n	800468c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004660:	f7ff fb1c 	bl	8003c9c <HAL_GetTick>
 8004664:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004666:	e00a      	b.n	800467e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004668:	f7ff fb18 	bl	8003c9c <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	f241 3288 	movw	r2, #5000	; 0x1388
 8004676:	4293      	cmp	r3, r2
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e0cb      	b.n	8004816 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800467e:	4b49      	ldr	r3, [pc, #292]	; (80047a4 <HAL_RCC_OscConfig+0x470>)
 8004680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d0ee      	beq.n	8004668 <HAL_RCC_OscConfig+0x334>
 800468a:	e014      	b.n	80046b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800468c:	f7ff fb06 	bl	8003c9c <HAL_GetTick>
 8004690:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004692:	e00a      	b.n	80046aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004694:	f7ff fb02 	bl	8003c9c <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	f241 3288 	movw	r2, #5000	; 0x1388
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e0b5      	b.n	8004816 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046aa:	4b3e      	ldr	r3, [pc, #248]	; (80047a4 <HAL_RCC_OscConfig+0x470>)
 80046ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1ee      	bne.n	8004694 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046b6:	7dfb      	ldrb	r3, [r7, #23]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d105      	bne.n	80046c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046bc:	4b39      	ldr	r3, [pc, #228]	; (80047a4 <HAL_RCC_OscConfig+0x470>)
 80046be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c0:	4a38      	ldr	r2, [pc, #224]	; (80047a4 <HAL_RCC_OscConfig+0x470>)
 80046c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f000 80a1 	beq.w	8004814 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046d2:	4b34      	ldr	r3, [pc, #208]	; (80047a4 <HAL_RCC_OscConfig+0x470>)
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f003 030c 	and.w	r3, r3, #12
 80046da:	2b08      	cmp	r3, #8
 80046dc:	d05c      	beq.n	8004798 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d141      	bne.n	800476a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046e6:	4b31      	ldr	r3, [pc, #196]	; (80047ac <HAL_RCC_OscConfig+0x478>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ec:	f7ff fad6 	bl	8003c9c <HAL_GetTick>
 80046f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046f2:	e008      	b.n	8004706 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046f4:	f7ff fad2 	bl	8003c9c <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d901      	bls.n	8004706 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e087      	b.n	8004816 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004706:	4b27      	ldr	r3, [pc, #156]	; (80047a4 <HAL_RCC_OscConfig+0x470>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1f0      	bne.n	80046f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	69da      	ldr	r2, [r3, #28]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	431a      	orrs	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004720:	019b      	lsls	r3, r3, #6
 8004722:	431a      	orrs	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004728:	085b      	lsrs	r3, r3, #1
 800472a:	3b01      	subs	r3, #1
 800472c:	041b      	lsls	r3, r3, #16
 800472e:	431a      	orrs	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004734:	061b      	lsls	r3, r3, #24
 8004736:	491b      	ldr	r1, [pc, #108]	; (80047a4 <HAL_RCC_OscConfig+0x470>)
 8004738:	4313      	orrs	r3, r2
 800473a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800473c:	4b1b      	ldr	r3, [pc, #108]	; (80047ac <HAL_RCC_OscConfig+0x478>)
 800473e:	2201      	movs	r2, #1
 8004740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004742:	f7ff faab 	bl	8003c9c <HAL_GetTick>
 8004746:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004748:	e008      	b.n	800475c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800474a:	f7ff faa7 	bl	8003c9c <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	2b02      	cmp	r3, #2
 8004756:	d901      	bls.n	800475c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e05c      	b.n	8004816 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800475c:	4b11      	ldr	r3, [pc, #68]	; (80047a4 <HAL_RCC_OscConfig+0x470>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d0f0      	beq.n	800474a <HAL_RCC_OscConfig+0x416>
 8004768:	e054      	b.n	8004814 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800476a:	4b10      	ldr	r3, [pc, #64]	; (80047ac <HAL_RCC_OscConfig+0x478>)
 800476c:	2200      	movs	r2, #0
 800476e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004770:	f7ff fa94 	bl	8003c9c <HAL_GetTick>
 8004774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004776:	e008      	b.n	800478a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004778:	f7ff fa90 	bl	8003c9c <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	2b02      	cmp	r3, #2
 8004784:	d901      	bls.n	800478a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e045      	b.n	8004816 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800478a:	4b06      	ldr	r3, [pc, #24]	; (80047a4 <HAL_RCC_OscConfig+0x470>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1f0      	bne.n	8004778 <HAL_RCC_OscConfig+0x444>
 8004796:	e03d      	b.n	8004814 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d107      	bne.n	80047b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e038      	b.n	8004816 <HAL_RCC_OscConfig+0x4e2>
 80047a4:	40023800 	.word	0x40023800
 80047a8:	40007000 	.word	0x40007000
 80047ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047b0:	4b1b      	ldr	r3, [pc, #108]	; (8004820 <HAL_RCC_OscConfig+0x4ec>)
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d028      	beq.n	8004810 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d121      	bne.n	8004810 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d11a      	bne.n	8004810 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047e0:	4013      	ands	r3, r2
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d111      	bne.n	8004810 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f6:	085b      	lsrs	r3, r3, #1
 80047f8:	3b01      	subs	r3, #1
 80047fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d107      	bne.n	8004810 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800480c:	429a      	cmp	r2, r3
 800480e:	d001      	beq.n	8004814 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e000      	b.n	8004816 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3718      	adds	r7, #24
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	40023800 	.word	0x40023800

08004824 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d101      	bne.n	8004838 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e0cc      	b.n	80049d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004838:	4b68      	ldr	r3, [pc, #416]	; (80049dc <HAL_RCC_ClockConfig+0x1b8>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0307 	and.w	r3, r3, #7
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	429a      	cmp	r2, r3
 8004844:	d90c      	bls.n	8004860 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004846:	4b65      	ldr	r3, [pc, #404]	; (80049dc <HAL_RCC_ClockConfig+0x1b8>)
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	b2d2      	uxtb	r2, r2
 800484c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800484e:	4b63      	ldr	r3, [pc, #396]	; (80049dc <HAL_RCC_ClockConfig+0x1b8>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0307 	and.w	r3, r3, #7
 8004856:	683a      	ldr	r2, [r7, #0]
 8004858:	429a      	cmp	r2, r3
 800485a:	d001      	beq.n	8004860 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e0b8      	b.n	80049d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d020      	beq.n	80048ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0304 	and.w	r3, r3, #4
 8004874:	2b00      	cmp	r3, #0
 8004876:	d005      	beq.n	8004884 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004878:	4b59      	ldr	r3, [pc, #356]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	4a58      	ldr	r2, [pc, #352]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 800487e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004882:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0308 	and.w	r3, r3, #8
 800488c:	2b00      	cmp	r3, #0
 800488e:	d005      	beq.n	800489c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004890:	4b53      	ldr	r3, [pc, #332]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	4a52      	ldr	r2, [pc, #328]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004896:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800489a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800489c:	4b50      	ldr	r3, [pc, #320]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	494d      	ldr	r1, [pc, #308]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d044      	beq.n	8004944 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d107      	bne.n	80048d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048c2:	4b47      	ldr	r3, [pc, #284]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d119      	bne.n	8004902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e07f      	b.n	80049d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d003      	beq.n	80048e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048de:	2b03      	cmp	r3, #3
 80048e0:	d107      	bne.n	80048f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048e2:	4b3f      	ldr	r3, [pc, #252]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d109      	bne.n	8004902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e06f      	b.n	80049d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048f2:	4b3b      	ldr	r3, [pc, #236]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e067      	b.n	80049d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004902:	4b37      	ldr	r3, [pc, #220]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f023 0203 	bic.w	r2, r3, #3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	4934      	ldr	r1, [pc, #208]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004910:	4313      	orrs	r3, r2
 8004912:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004914:	f7ff f9c2 	bl	8003c9c <HAL_GetTick>
 8004918:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800491a:	e00a      	b.n	8004932 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800491c:	f7ff f9be 	bl	8003c9c <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	f241 3288 	movw	r2, #5000	; 0x1388
 800492a:	4293      	cmp	r3, r2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e04f      	b.n	80049d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004932:	4b2b      	ldr	r3, [pc, #172]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f003 020c 	and.w	r2, r3, #12
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	429a      	cmp	r2, r3
 8004942:	d1eb      	bne.n	800491c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004944:	4b25      	ldr	r3, [pc, #148]	; (80049dc <HAL_RCC_ClockConfig+0x1b8>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0307 	and.w	r3, r3, #7
 800494c:	683a      	ldr	r2, [r7, #0]
 800494e:	429a      	cmp	r2, r3
 8004950:	d20c      	bcs.n	800496c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004952:	4b22      	ldr	r3, [pc, #136]	; (80049dc <HAL_RCC_ClockConfig+0x1b8>)
 8004954:	683a      	ldr	r2, [r7, #0]
 8004956:	b2d2      	uxtb	r2, r2
 8004958:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800495a:	4b20      	ldr	r3, [pc, #128]	; (80049dc <HAL_RCC_ClockConfig+0x1b8>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0307 	and.w	r3, r3, #7
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	429a      	cmp	r2, r3
 8004966:	d001      	beq.n	800496c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e032      	b.n	80049d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0304 	and.w	r3, r3, #4
 8004974:	2b00      	cmp	r3, #0
 8004976:	d008      	beq.n	800498a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004978:	4b19      	ldr	r3, [pc, #100]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	4916      	ldr	r1, [pc, #88]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004986:	4313      	orrs	r3, r2
 8004988:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0308 	and.w	r3, r3, #8
 8004992:	2b00      	cmp	r3, #0
 8004994:	d009      	beq.n	80049aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004996:	4b12      	ldr	r3, [pc, #72]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	00db      	lsls	r3, r3, #3
 80049a4:	490e      	ldr	r1, [pc, #56]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049aa:	f000 f821 	bl	80049f0 <HAL_RCC_GetSysClockFreq>
 80049ae:	4602      	mov	r2, r0
 80049b0:	4b0b      	ldr	r3, [pc, #44]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	091b      	lsrs	r3, r3, #4
 80049b6:	f003 030f 	and.w	r3, r3, #15
 80049ba:	490a      	ldr	r1, [pc, #40]	; (80049e4 <HAL_RCC_ClockConfig+0x1c0>)
 80049bc:	5ccb      	ldrb	r3, [r1, r3]
 80049be:	fa22 f303 	lsr.w	r3, r2, r3
 80049c2:	4a09      	ldr	r2, [pc, #36]	; (80049e8 <HAL_RCC_ClockConfig+0x1c4>)
 80049c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049c6:	4b09      	ldr	r3, [pc, #36]	; (80049ec <HAL_RCC_ClockConfig+0x1c8>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7ff f922 	bl	8003c14 <HAL_InitTick>

  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	40023c00 	.word	0x40023c00
 80049e0:	40023800 	.word	0x40023800
 80049e4:	08005db8 	.word	0x08005db8
 80049e8:	200001cc 	.word	0x200001cc
 80049ec:	200001d0 	.word	0x200001d0

080049f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049f4:	b090      	sub	sp, #64	; 0x40
 80049f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80049f8:	2300      	movs	r3, #0
 80049fa:	637b      	str	r3, [r7, #52]	; 0x34
 80049fc:	2300      	movs	r3, #0
 80049fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a00:	2300      	movs	r3, #0
 8004a02:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004a04:	2300      	movs	r3, #0
 8004a06:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a08:	4b59      	ldr	r3, [pc, #356]	; (8004b70 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f003 030c 	and.w	r3, r3, #12
 8004a10:	2b08      	cmp	r3, #8
 8004a12:	d00d      	beq.n	8004a30 <HAL_RCC_GetSysClockFreq+0x40>
 8004a14:	2b08      	cmp	r3, #8
 8004a16:	f200 80a1 	bhi.w	8004b5c <HAL_RCC_GetSysClockFreq+0x16c>
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d002      	beq.n	8004a24 <HAL_RCC_GetSysClockFreq+0x34>
 8004a1e:	2b04      	cmp	r3, #4
 8004a20:	d003      	beq.n	8004a2a <HAL_RCC_GetSysClockFreq+0x3a>
 8004a22:	e09b      	b.n	8004b5c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a24:	4b53      	ldr	r3, [pc, #332]	; (8004b74 <HAL_RCC_GetSysClockFreq+0x184>)
 8004a26:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004a28:	e09b      	b.n	8004b62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a2a:	4b53      	ldr	r3, [pc, #332]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a2c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004a2e:	e098      	b.n	8004b62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a30:	4b4f      	ldr	r3, [pc, #316]	; (8004b70 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a38:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a3a:	4b4d      	ldr	r3, [pc, #308]	; (8004b70 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d028      	beq.n	8004a98 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a46:	4b4a      	ldr	r3, [pc, #296]	; (8004b70 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	099b      	lsrs	r3, r3, #6
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	623b      	str	r3, [r7, #32]
 8004a50:	627a      	str	r2, [r7, #36]	; 0x24
 8004a52:	6a3b      	ldr	r3, [r7, #32]
 8004a54:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004a58:	2100      	movs	r1, #0
 8004a5a:	4b47      	ldr	r3, [pc, #284]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a5c:	fb03 f201 	mul.w	r2, r3, r1
 8004a60:	2300      	movs	r3, #0
 8004a62:	fb00 f303 	mul.w	r3, r0, r3
 8004a66:	4413      	add	r3, r2
 8004a68:	4a43      	ldr	r2, [pc, #268]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a6a:	fba0 1202 	umull	r1, r2, r0, r2
 8004a6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a70:	460a      	mov	r2, r1
 8004a72:	62ba      	str	r2, [r7, #40]	; 0x28
 8004a74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a76:	4413      	add	r3, r2
 8004a78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	61bb      	str	r3, [r7, #24]
 8004a80:	61fa      	str	r2, [r7, #28]
 8004a82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a86:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004a8a:	f7fb fb9d 	bl	80001c8 <__aeabi_uldivmod>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	460b      	mov	r3, r1
 8004a92:	4613      	mov	r3, r2
 8004a94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a96:	e053      	b.n	8004b40 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a98:	4b35      	ldr	r3, [pc, #212]	; (8004b70 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	099b      	lsrs	r3, r3, #6
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	613b      	str	r3, [r7, #16]
 8004aa2:	617a      	str	r2, [r7, #20]
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004aaa:	f04f 0b00 	mov.w	fp, #0
 8004aae:	4652      	mov	r2, sl
 8004ab0:	465b      	mov	r3, fp
 8004ab2:	f04f 0000 	mov.w	r0, #0
 8004ab6:	f04f 0100 	mov.w	r1, #0
 8004aba:	0159      	lsls	r1, r3, #5
 8004abc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ac0:	0150      	lsls	r0, r2, #5
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	ebb2 080a 	subs.w	r8, r2, sl
 8004aca:	eb63 090b 	sbc.w	r9, r3, fp
 8004ace:	f04f 0200 	mov.w	r2, #0
 8004ad2:	f04f 0300 	mov.w	r3, #0
 8004ad6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004ada:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004ade:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004ae2:	ebb2 0408 	subs.w	r4, r2, r8
 8004ae6:	eb63 0509 	sbc.w	r5, r3, r9
 8004aea:	f04f 0200 	mov.w	r2, #0
 8004aee:	f04f 0300 	mov.w	r3, #0
 8004af2:	00eb      	lsls	r3, r5, #3
 8004af4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004af8:	00e2      	lsls	r2, r4, #3
 8004afa:	4614      	mov	r4, r2
 8004afc:	461d      	mov	r5, r3
 8004afe:	eb14 030a 	adds.w	r3, r4, sl
 8004b02:	603b      	str	r3, [r7, #0]
 8004b04:	eb45 030b 	adc.w	r3, r5, fp
 8004b08:	607b      	str	r3, [r7, #4]
 8004b0a:	f04f 0200 	mov.w	r2, #0
 8004b0e:	f04f 0300 	mov.w	r3, #0
 8004b12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b16:	4629      	mov	r1, r5
 8004b18:	028b      	lsls	r3, r1, #10
 8004b1a:	4621      	mov	r1, r4
 8004b1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b20:	4621      	mov	r1, r4
 8004b22:	028a      	lsls	r2, r1, #10
 8004b24:	4610      	mov	r0, r2
 8004b26:	4619      	mov	r1, r3
 8004b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	60bb      	str	r3, [r7, #8]
 8004b2e:	60fa      	str	r2, [r7, #12]
 8004b30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b34:	f7fb fb48 	bl	80001c8 <__aeabi_uldivmod>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b40:	4b0b      	ldr	r3, [pc, #44]	; (8004b70 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	0c1b      	lsrs	r3, r3, #16
 8004b46:	f003 0303 	and.w	r3, r3, #3
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	005b      	lsls	r3, r3, #1
 8004b4e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004b50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b58:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004b5a:	e002      	b.n	8004b62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b5c:	4b05      	ldr	r3, [pc, #20]	; (8004b74 <HAL_RCC_GetSysClockFreq+0x184>)
 8004b5e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004b60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3740      	adds	r7, #64	; 0x40
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b6e:	bf00      	nop
 8004b70:	40023800 	.word	0x40023800
 8004b74:	00f42400 	.word	0x00f42400
 8004b78:	017d7840 	.word	0x017d7840

08004b7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b80:	4b03      	ldr	r3, [pc, #12]	; (8004b90 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b82:	681b      	ldr	r3, [r3, #0]
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	200001cc 	.word	0x200001cc

08004b94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b98:	f7ff fff0 	bl	8004b7c <HAL_RCC_GetHCLKFreq>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	4b05      	ldr	r3, [pc, #20]	; (8004bb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	0a9b      	lsrs	r3, r3, #10
 8004ba4:	f003 0307 	and.w	r3, r3, #7
 8004ba8:	4903      	ldr	r1, [pc, #12]	; (8004bb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004baa:	5ccb      	ldrb	r3, [r1, r3]
 8004bac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	40023800 	.word	0x40023800
 8004bb8:	08005dc8 	.word	0x08005dc8

08004bbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004bc0:	f7ff ffdc 	bl	8004b7c <HAL_RCC_GetHCLKFreq>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	4b05      	ldr	r3, [pc, #20]	; (8004bdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	0b5b      	lsrs	r3, r3, #13
 8004bcc:	f003 0307 	and.w	r3, r3, #7
 8004bd0:	4903      	ldr	r1, [pc, #12]	; (8004be0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bd2:	5ccb      	ldrb	r3, [r1, r3]
 8004bd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	40023800 	.word	0x40023800
 8004be0:	08005dc8 	.word	0x08005dc8

08004be4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d101      	bne.n	8004bf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e03f      	b.n	8004c76 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d106      	bne.n	8004c10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f7fe ff54 	bl	8003ab8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2224      	movs	r2, #36	; 0x24
 8004c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68da      	ldr	r2, [r3, #12]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 fd19 	bl	8005660 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	691a      	ldr	r2, [r3, #16]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	695a      	ldr	r2, [r3, #20]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68da      	ldr	r2, [r3, #12]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2220      	movs	r2, #32
 8004c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2220      	movs	r2, #32
 8004c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3708      	adds	r7, #8
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}

08004c7e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b085      	sub	sp, #20
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	60f8      	str	r0, [r7, #12]
 8004c86:	60b9      	str	r1, [r7, #8]
 8004c88:	4613      	mov	r3, r2
 8004c8a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	2b20      	cmp	r3, #32
 8004c96:	d130      	bne.n	8004cfa <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d002      	beq.n	8004ca4 <HAL_UART_Transmit_IT+0x26>
 8004c9e:	88fb      	ldrh	r3, [r7, #6]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d101      	bne.n	8004ca8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e029      	b.n	8004cfc <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d101      	bne.n	8004cb6 <HAL_UART_Transmit_IT+0x38>
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	e022      	b.n	8004cfc <HAL_UART_Transmit_IT+0x7e>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	88fa      	ldrh	r2, [r7, #6]
 8004cc8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	88fa      	ldrh	r2, [r7, #6]
 8004cce:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2221      	movs	r2, #33	; 0x21
 8004cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68da      	ldr	r2, [r3, #12]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004cf4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	e000      	b.n	8004cfc <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004cfa:	2302      	movs	r3, #2
  }
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3714      	adds	r7, #20
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	4613      	mov	r3, r2
 8004d14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	2b20      	cmp	r3, #32
 8004d20:	d11d      	bne.n	8004d5e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d002      	beq.n	8004d2e <HAL_UART_Receive_IT+0x26>
 8004d28:	88fb      	ldrh	r3, [r7, #6]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e016      	b.n	8004d60 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d101      	bne.n	8004d40 <HAL_UART_Receive_IT+0x38>
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	e00f      	b.n	8004d60 <HAL_UART_Receive_IT+0x58>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004d4e:	88fb      	ldrh	r3, [r7, #6]
 8004d50:	461a      	mov	r2, r3
 8004d52:	68b9      	ldr	r1, [r7, #8]
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f000 faab 	bl	80052b0 <UART_Start_Receive_IT>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	e000      	b.n	8004d60 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004d5e:	2302      	movs	r3, #2
  }
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b0ba      	sub	sp, #232	; 0xe8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004d94:	2300      	movs	r3, #0
 8004d96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d9e:	f003 030f 	and.w	r3, r3, #15
 8004da2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004da6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d10f      	bne.n	8004dce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004db2:	f003 0320 	and.w	r3, r3, #32
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d009      	beq.n	8004dce <HAL_UART_IRQHandler+0x66>
 8004dba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dbe:	f003 0320 	and.w	r3, r3, #32
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d003      	beq.n	8004dce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 fb8f 	bl	80054ea <UART_Receive_IT>
      return;
 8004dcc:	e256      	b.n	800527c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004dce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f000 80de 	beq.w	8004f94 <HAL_UART_IRQHandler+0x22c>
 8004dd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ddc:	f003 0301 	and.w	r3, r3, #1
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d106      	bne.n	8004df2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004de4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004de8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f000 80d1 	beq.w	8004f94 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00b      	beq.n	8004e16 <HAL_UART_IRQHandler+0xae>
 8004dfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d005      	beq.n	8004e16 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0e:	f043 0201 	orr.w	r2, r3, #1
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e1a:	f003 0304 	and.w	r3, r3, #4
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00b      	beq.n	8004e3a <HAL_UART_IRQHandler+0xd2>
 8004e22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d005      	beq.n	8004e3a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e32:	f043 0202 	orr.w	r2, r3, #2
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00b      	beq.n	8004e5e <HAL_UART_IRQHandler+0xf6>
 8004e46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d005      	beq.n	8004e5e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e56:	f043 0204 	orr.w	r2, r3, #4
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e62:	f003 0308 	and.w	r3, r3, #8
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d011      	beq.n	8004e8e <HAL_UART_IRQHandler+0x126>
 8004e6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e6e:	f003 0320 	and.w	r3, r3, #32
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d105      	bne.n	8004e82 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004e76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d005      	beq.n	8004e8e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e86:	f043 0208 	orr.w	r2, r3, #8
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	f000 81ed 	beq.w	8005272 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e9c:	f003 0320 	and.w	r3, r3, #32
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d008      	beq.n	8004eb6 <HAL_UART_IRQHandler+0x14e>
 8004ea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ea8:	f003 0320 	and.w	r3, r3, #32
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d002      	beq.n	8004eb6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 fb1a 	bl	80054ea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	695b      	ldr	r3, [r3, #20]
 8004ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec0:	2b40      	cmp	r3, #64	; 0x40
 8004ec2:	bf0c      	ite	eq
 8004ec4:	2301      	moveq	r3, #1
 8004ec6:	2300      	movne	r3, #0
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed2:	f003 0308 	and.w	r3, r3, #8
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d103      	bne.n	8004ee2 <HAL_UART_IRQHandler+0x17a>
 8004eda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d04f      	beq.n	8004f82 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 fa22 	bl	800532c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef2:	2b40      	cmp	r3, #64	; 0x40
 8004ef4:	d141      	bne.n	8004f7a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	3314      	adds	r3, #20
 8004efc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f04:	e853 3f00 	ldrex	r3, [r3]
 8004f08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004f0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004f10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	3314      	adds	r3, #20
 8004f1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004f22:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004f26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004f2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004f32:	e841 2300 	strex	r3, r2, [r1]
 8004f36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004f3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1d9      	bne.n	8004ef6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d013      	beq.n	8004f72 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4e:	4a7d      	ldr	r2, [pc, #500]	; (8005144 <HAL_UART_IRQHandler+0x3dc>)
 8004f50:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7ff f82d 	bl	8003fb6 <HAL_DMA_Abort_IT>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d016      	beq.n	8004f90 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f6c:	4610      	mov	r0, r2
 8004f6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f70:	e00e      	b.n	8004f90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f986 	bl	8005284 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f78:	e00a      	b.n	8004f90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 f982 	bl	8005284 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f80:	e006      	b.n	8004f90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 f97e 	bl	8005284 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004f8e:	e170      	b.n	8005272 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f90:	bf00      	nop
    return;
 8004f92:	e16e      	b.n	8005272 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	f040 814a 	bne.w	8005232 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fa2:	f003 0310 	and.w	r3, r3, #16
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	f000 8143 	beq.w	8005232 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004fac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fb0:	f003 0310 	and.w	r3, r3, #16
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f000 813c 	beq.w	8005232 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fba:	2300      	movs	r3, #0
 8004fbc:	60bb      	str	r3, [r7, #8]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	60bb      	str	r3, [r7, #8]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	60bb      	str	r3, [r7, #8]
 8004fce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fda:	2b40      	cmp	r3, #64	; 0x40
 8004fdc:	f040 80b4 	bne.w	8005148 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004fec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f000 8140 	beq.w	8005276 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ffa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ffe:	429a      	cmp	r2, r3
 8005000:	f080 8139 	bcs.w	8005276 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800500a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005010:	69db      	ldr	r3, [r3, #28]
 8005012:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005016:	f000 8088 	beq.w	800512a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	330c      	adds	r3, #12
 8005020:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005024:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005028:	e853 3f00 	ldrex	r3, [r3]
 800502c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005030:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005034:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005038:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	330c      	adds	r3, #12
 8005042:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005046:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800504a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005052:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005056:	e841 2300 	strex	r3, r2, [r1]
 800505a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800505e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1d9      	bne.n	800501a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	3314      	adds	r3, #20
 800506c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800506e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005070:	e853 3f00 	ldrex	r3, [r3]
 8005074:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005076:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005078:	f023 0301 	bic.w	r3, r3, #1
 800507c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	3314      	adds	r3, #20
 8005086:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800508a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800508e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005090:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005092:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005096:	e841 2300 	strex	r3, r2, [r1]
 800509a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800509c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1e1      	bne.n	8005066 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	3314      	adds	r3, #20
 80050a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050ac:	e853 3f00 	ldrex	r3, [r3]
 80050b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80050b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	3314      	adds	r3, #20
 80050c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80050c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80050c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80050cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80050ce:	e841 2300 	strex	r3, r2, [r1]
 80050d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80050d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d1e3      	bne.n	80050a2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2220      	movs	r2, #32
 80050de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	330c      	adds	r3, #12
 80050ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050f2:	e853 3f00 	ldrex	r3, [r3]
 80050f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80050f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050fa:	f023 0310 	bic.w	r3, r3, #16
 80050fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	330c      	adds	r3, #12
 8005108:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800510c:	65ba      	str	r2, [r7, #88]	; 0x58
 800510e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005110:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005112:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005114:	e841 2300 	strex	r3, r2, [r1]
 8005118:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800511a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1e3      	bne.n	80050e8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005124:	4618      	mov	r0, r3
 8005126:	f7fe fed6 	bl	8003ed6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005132:	b29b      	uxth	r3, r3
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	b29b      	uxth	r3, r3
 8005138:	4619      	mov	r1, r3
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 f8ac 	bl	8005298 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005140:	e099      	b.n	8005276 <HAL_UART_IRQHandler+0x50e>
 8005142:	bf00      	nop
 8005144:	080053f3 	.word	0x080053f3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005150:	b29b      	uxth	r3, r3
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800515c:	b29b      	uxth	r3, r3
 800515e:	2b00      	cmp	r3, #0
 8005160:	f000 808b 	beq.w	800527a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005164:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005168:	2b00      	cmp	r3, #0
 800516a:	f000 8086 	beq.w	800527a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	330c      	adds	r3, #12
 8005174:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005178:	e853 3f00 	ldrex	r3, [r3]
 800517c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800517e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005180:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005184:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	330c      	adds	r3, #12
 800518e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005192:	647a      	str	r2, [r7, #68]	; 0x44
 8005194:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005196:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005198:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800519a:	e841 2300 	strex	r3, r2, [r1]
 800519e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80051a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1e3      	bne.n	800516e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	3314      	adds	r3, #20
 80051ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b0:	e853 3f00 	ldrex	r3, [r3]
 80051b4:	623b      	str	r3, [r7, #32]
   return(result);
 80051b6:	6a3b      	ldr	r3, [r7, #32]
 80051b8:	f023 0301 	bic.w	r3, r3, #1
 80051bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	3314      	adds	r3, #20
 80051c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80051ca:	633a      	str	r2, [r7, #48]	; 0x30
 80051cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051d2:	e841 2300 	strex	r3, r2, [r1]
 80051d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80051d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1e3      	bne.n	80051a6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2220      	movs	r2, #32
 80051e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	330c      	adds	r3, #12
 80051f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	e853 3f00 	ldrex	r3, [r3]
 80051fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f023 0310 	bic.w	r3, r3, #16
 8005202:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	330c      	adds	r3, #12
 800520c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005210:	61fa      	str	r2, [r7, #28]
 8005212:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005214:	69b9      	ldr	r1, [r7, #24]
 8005216:	69fa      	ldr	r2, [r7, #28]
 8005218:	e841 2300 	strex	r3, r2, [r1]
 800521c:	617b      	str	r3, [r7, #20]
   return(result);
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1e3      	bne.n	80051ec <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005224:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005228:	4619      	mov	r1, r3
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f834 	bl	8005298 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005230:	e023      	b.n	800527a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800523a:	2b00      	cmp	r3, #0
 800523c:	d009      	beq.n	8005252 <HAL_UART_IRQHandler+0x4ea>
 800523e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 f8e5 	bl	800541a <UART_Transmit_IT>
    return;
 8005250:	e014      	b.n	800527c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00e      	beq.n	800527c <HAL_UART_IRQHandler+0x514>
 800525e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005266:	2b00      	cmp	r3, #0
 8005268:	d008      	beq.n	800527c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 f925 	bl	80054ba <UART_EndTransmit_IT>
    return;
 8005270:	e004      	b.n	800527c <HAL_UART_IRQHandler+0x514>
    return;
 8005272:	bf00      	nop
 8005274:	e002      	b.n	800527c <HAL_UART_IRQHandler+0x514>
      return;
 8005276:	bf00      	nop
 8005278:	e000      	b.n	800527c <HAL_UART_IRQHandler+0x514>
      return;
 800527a:	bf00      	nop
  }
}
 800527c:	37e8      	adds	r7, #232	; 0xe8
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop

08005284 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800528c:	bf00      	nop
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	460b      	mov	r3, r1
 80052a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80052a4:	bf00      	nop
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	4613      	mov	r3, r2
 80052bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	88fa      	ldrh	r2, [r7, #6]
 80052c8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	88fa      	ldrh	r2, [r7, #6]
 80052ce:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2222      	movs	r2, #34	; 0x22
 80052da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d007      	beq.n	80052fe <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68da      	ldr	r2, [r3, #12]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052fc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	695a      	ldr	r2, [r3, #20]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f042 0201 	orr.w	r2, r2, #1
 800530c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68da      	ldr	r2, [r3, #12]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f042 0220 	orr.w	r2, r2, #32
 800531c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	3714      	adds	r7, #20
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800532c:	b480      	push	{r7}
 800532e:	b095      	sub	sp, #84	; 0x54
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	330c      	adds	r3, #12
 800533a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800533e:	e853 3f00 	ldrex	r3, [r3]
 8005342:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005346:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800534a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	330c      	adds	r3, #12
 8005352:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005354:	643a      	str	r2, [r7, #64]	; 0x40
 8005356:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005358:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800535a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800535c:	e841 2300 	strex	r3, r2, [r1]
 8005360:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1e5      	bne.n	8005334 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	3314      	adds	r3, #20
 800536e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005370:	6a3b      	ldr	r3, [r7, #32]
 8005372:	e853 3f00 	ldrex	r3, [r3]
 8005376:	61fb      	str	r3, [r7, #28]
   return(result);
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	f023 0301 	bic.w	r3, r3, #1
 800537e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	3314      	adds	r3, #20
 8005386:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005388:	62fa      	str	r2, [r7, #44]	; 0x2c
 800538a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800538e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005390:	e841 2300 	strex	r3, r2, [r1]
 8005394:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1e5      	bne.n	8005368 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d119      	bne.n	80053d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	330c      	adds	r3, #12
 80053aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	e853 3f00 	ldrex	r3, [r3]
 80053b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	f023 0310 	bic.w	r3, r3, #16
 80053ba:	647b      	str	r3, [r7, #68]	; 0x44
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	330c      	adds	r3, #12
 80053c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053c4:	61ba      	str	r2, [r7, #24]
 80053c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c8:	6979      	ldr	r1, [r7, #20]
 80053ca:	69ba      	ldr	r2, [r7, #24]
 80053cc:	e841 2300 	strex	r3, r2, [r1]
 80053d0:	613b      	str	r3, [r7, #16]
   return(result);
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d1e5      	bne.n	80053a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2220      	movs	r2, #32
 80053dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80053e6:	bf00      	nop
 80053e8:	3754      	adds	r7, #84	; 0x54
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr

080053f2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053f2:	b580      	push	{r7, lr}
 80053f4:	b084      	sub	sp, #16
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f7ff ff39 	bl	8005284 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005412:	bf00      	nop
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}

0800541a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800541a:	b480      	push	{r7}
 800541c:	b085      	sub	sp, #20
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005428:	b2db      	uxtb	r3, r3
 800542a:	2b21      	cmp	r3, #33	; 0x21
 800542c:	d13e      	bne.n	80054ac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005436:	d114      	bne.n	8005462 <UART_Transmit_IT+0x48>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d110      	bne.n	8005462 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a1b      	ldr	r3, [r3, #32]
 8005444:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	881b      	ldrh	r3, [r3, #0]
 800544a:	461a      	mov	r2, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005454:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	1c9a      	adds	r2, r3, #2
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	621a      	str	r2, [r3, #32]
 8005460:	e008      	b.n	8005474 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a1b      	ldr	r3, [r3, #32]
 8005466:	1c59      	adds	r1, r3, #1
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	6211      	str	r1, [r2, #32]
 800546c:	781a      	ldrb	r2, [r3, #0]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005478:	b29b      	uxth	r3, r3
 800547a:	3b01      	subs	r3, #1
 800547c:	b29b      	uxth	r3, r3
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	4619      	mov	r1, r3
 8005482:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005484:	2b00      	cmp	r3, #0
 8005486:	d10f      	bne.n	80054a8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68da      	ldr	r2, [r3, #12]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005496:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68da      	ldr	r2, [r3, #12]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80054a8:	2300      	movs	r3, #0
 80054aa:	e000      	b.n	80054ae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80054ac:	2302      	movs	r3, #2
  }
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3714      	adds	r7, #20
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr

080054ba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80054ba:	b580      	push	{r7, lr}
 80054bc:	b082      	sub	sp, #8
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68da      	ldr	r2, [r3, #12]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054d0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2220      	movs	r2, #32
 80054d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f7fb fc02 	bl	8000ce4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3708      	adds	r7, #8
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}

080054ea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80054ea:	b580      	push	{r7, lr}
 80054ec:	b08c      	sub	sp, #48	; 0x30
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	2b22      	cmp	r3, #34	; 0x22
 80054fc:	f040 80ab 	bne.w	8005656 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005508:	d117      	bne.n	800553a <UART_Receive_IT+0x50>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d113      	bne.n	800553a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005512:	2300      	movs	r3, #0
 8005514:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800551a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	b29b      	uxth	r3, r3
 8005524:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005528:	b29a      	uxth	r2, r3
 800552a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005532:	1c9a      	adds	r2, r3, #2
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	629a      	str	r2, [r3, #40]	; 0x28
 8005538:	e026      	b.n	8005588 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800553e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005540:	2300      	movs	r3, #0
 8005542:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800554c:	d007      	beq.n	800555e <UART_Receive_IT+0x74>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d10a      	bne.n	800556c <UART_Receive_IT+0x82>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d106      	bne.n	800556c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	b2da      	uxtb	r2, r3
 8005566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005568:	701a      	strb	r2, [r3, #0]
 800556a:	e008      	b.n	800557e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	b2db      	uxtb	r3, r3
 8005574:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005578:	b2da      	uxtb	r2, r3
 800557a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800557c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005582:	1c5a      	adds	r2, r3, #1
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800558c:	b29b      	uxth	r3, r3
 800558e:	3b01      	subs	r3, #1
 8005590:	b29b      	uxth	r3, r3
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	4619      	mov	r1, r3
 8005596:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005598:	2b00      	cmp	r3, #0
 800559a:	d15a      	bne.n	8005652 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68da      	ldr	r2, [r3, #12]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f022 0220 	bic.w	r2, r2, #32
 80055aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68da      	ldr	r2, [r3, #12]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	695a      	ldr	r2, [r3, #20]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f022 0201 	bic.w	r2, r2, #1
 80055ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2220      	movs	r2, #32
 80055d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d135      	bne.n	8005648 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	330c      	adds	r3, #12
 80055e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	e853 3f00 	ldrex	r3, [r3]
 80055f0:	613b      	str	r3, [r7, #16]
   return(result);
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	f023 0310 	bic.w	r3, r3, #16
 80055f8:	627b      	str	r3, [r7, #36]	; 0x24
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	330c      	adds	r3, #12
 8005600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005602:	623a      	str	r2, [r7, #32]
 8005604:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005606:	69f9      	ldr	r1, [r7, #28]
 8005608:	6a3a      	ldr	r2, [r7, #32]
 800560a:	e841 2300 	strex	r3, r2, [r1]
 800560e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1e5      	bne.n	80055e2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0310 	and.w	r3, r3, #16
 8005620:	2b10      	cmp	r3, #16
 8005622:	d10a      	bne.n	800563a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005624:	2300      	movs	r3, #0
 8005626:	60fb      	str	r3, [r7, #12]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	60fb      	str	r3, [r7, #12]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	60fb      	str	r3, [r7, #12]
 8005638:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800563e:	4619      	mov	r1, r3
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f7ff fe29 	bl	8005298 <HAL_UARTEx_RxEventCallback>
 8005646:	e002      	b.n	800564e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f7fb faf7 	bl	8000c3c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800564e:	2300      	movs	r3, #0
 8005650:	e002      	b.n	8005658 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005652:	2300      	movs	r3, #0
 8005654:	e000      	b.n	8005658 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005656:	2302      	movs	r3, #2
  }
}
 8005658:	4618      	mov	r0, r3
 800565a:	3730      	adds	r7, #48	; 0x30
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005660:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005664:	b0c0      	sub	sp, #256	; 0x100
 8005666:	af00      	add	r7, sp, #0
 8005668:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800566c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	691b      	ldr	r3, [r3, #16]
 8005674:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800567c:	68d9      	ldr	r1, [r3, #12]
 800567e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	ea40 0301 	orr.w	r3, r0, r1
 8005688:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800568a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800568e:	689a      	ldr	r2, [r3, #8]
 8005690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	431a      	orrs	r2, r3
 8005698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	431a      	orrs	r2, r3
 80056a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056a4:	69db      	ldr	r3, [r3, #28]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80056ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80056b8:	f021 010c 	bic.w	r1, r1, #12
 80056bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80056c6:	430b      	orrs	r3, r1
 80056c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	695b      	ldr	r3, [r3, #20]
 80056d2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80056d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056da:	6999      	ldr	r1, [r3, #24]
 80056dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	ea40 0301 	orr.w	r3, r0, r1
 80056e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80056e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	4b8f      	ldr	r3, [pc, #572]	; (800592c <UART_SetConfig+0x2cc>)
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d005      	beq.n	8005700 <UART_SetConfig+0xa0>
 80056f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	4b8d      	ldr	r3, [pc, #564]	; (8005930 <UART_SetConfig+0x2d0>)
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d104      	bne.n	800570a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005700:	f7ff fa5c 	bl	8004bbc <HAL_RCC_GetPCLK2Freq>
 8005704:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005708:	e003      	b.n	8005712 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800570a:	f7ff fa43 	bl	8004b94 <HAL_RCC_GetPCLK1Freq>
 800570e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005716:	69db      	ldr	r3, [r3, #28]
 8005718:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800571c:	f040 810c 	bne.w	8005938 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005720:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005724:	2200      	movs	r2, #0
 8005726:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800572a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800572e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005732:	4622      	mov	r2, r4
 8005734:	462b      	mov	r3, r5
 8005736:	1891      	adds	r1, r2, r2
 8005738:	65b9      	str	r1, [r7, #88]	; 0x58
 800573a:	415b      	adcs	r3, r3
 800573c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800573e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005742:	4621      	mov	r1, r4
 8005744:	eb12 0801 	adds.w	r8, r2, r1
 8005748:	4629      	mov	r1, r5
 800574a:	eb43 0901 	adc.w	r9, r3, r1
 800574e:	f04f 0200 	mov.w	r2, #0
 8005752:	f04f 0300 	mov.w	r3, #0
 8005756:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800575a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800575e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005762:	4690      	mov	r8, r2
 8005764:	4699      	mov	r9, r3
 8005766:	4623      	mov	r3, r4
 8005768:	eb18 0303 	adds.w	r3, r8, r3
 800576c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005770:	462b      	mov	r3, r5
 8005772:	eb49 0303 	adc.w	r3, r9, r3
 8005776:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800577a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005786:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800578a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800578e:	460b      	mov	r3, r1
 8005790:	18db      	adds	r3, r3, r3
 8005792:	653b      	str	r3, [r7, #80]	; 0x50
 8005794:	4613      	mov	r3, r2
 8005796:	eb42 0303 	adc.w	r3, r2, r3
 800579a:	657b      	str	r3, [r7, #84]	; 0x54
 800579c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80057a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80057a4:	f7fa fd10 	bl	80001c8 <__aeabi_uldivmod>
 80057a8:	4602      	mov	r2, r0
 80057aa:	460b      	mov	r3, r1
 80057ac:	4b61      	ldr	r3, [pc, #388]	; (8005934 <UART_SetConfig+0x2d4>)
 80057ae:	fba3 2302 	umull	r2, r3, r3, r2
 80057b2:	095b      	lsrs	r3, r3, #5
 80057b4:	011c      	lsls	r4, r3, #4
 80057b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057ba:	2200      	movs	r2, #0
 80057bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80057c0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80057c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80057c8:	4642      	mov	r2, r8
 80057ca:	464b      	mov	r3, r9
 80057cc:	1891      	adds	r1, r2, r2
 80057ce:	64b9      	str	r1, [r7, #72]	; 0x48
 80057d0:	415b      	adcs	r3, r3
 80057d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80057d8:	4641      	mov	r1, r8
 80057da:	eb12 0a01 	adds.w	sl, r2, r1
 80057de:	4649      	mov	r1, r9
 80057e0:	eb43 0b01 	adc.w	fp, r3, r1
 80057e4:	f04f 0200 	mov.w	r2, #0
 80057e8:	f04f 0300 	mov.w	r3, #0
 80057ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80057f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80057f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057f8:	4692      	mov	sl, r2
 80057fa:	469b      	mov	fp, r3
 80057fc:	4643      	mov	r3, r8
 80057fe:	eb1a 0303 	adds.w	r3, sl, r3
 8005802:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005806:	464b      	mov	r3, r9
 8005808:	eb4b 0303 	adc.w	r3, fp, r3
 800580c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800581c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005820:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005824:	460b      	mov	r3, r1
 8005826:	18db      	adds	r3, r3, r3
 8005828:	643b      	str	r3, [r7, #64]	; 0x40
 800582a:	4613      	mov	r3, r2
 800582c:	eb42 0303 	adc.w	r3, r2, r3
 8005830:	647b      	str	r3, [r7, #68]	; 0x44
 8005832:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005836:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800583a:	f7fa fcc5 	bl	80001c8 <__aeabi_uldivmod>
 800583e:	4602      	mov	r2, r0
 8005840:	460b      	mov	r3, r1
 8005842:	4611      	mov	r1, r2
 8005844:	4b3b      	ldr	r3, [pc, #236]	; (8005934 <UART_SetConfig+0x2d4>)
 8005846:	fba3 2301 	umull	r2, r3, r3, r1
 800584a:	095b      	lsrs	r3, r3, #5
 800584c:	2264      	movs	r2, #100	; 0x64
 800584e:	fb02 f303 	mul.w	r3, r2, r3
 8005852:	1acb      	subs	r3, r1, r3
 8005854:	00db      	lsls	r3, r3, #3
 8005856:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800585a:	4b36      	ldr	r3, [pc, #216]	; (8005934 <UART_SetConfig+0x2d4>)
 800585c:	fba3 2302 	umull	r2, r3, r3, r2
 8005860:	095b      	lsrs	r3, r3, #5
 8005862:	005b      	lsls	r3, r3, #1
 8005864:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005868:	441c      	add	r4, r3
 800586a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800586e:	2200      	movs	r2, #0
 8005870:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005874:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005878:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800587c:	4642      	mov	r2, r8
 800587e:	464b      	mov	r3, r9
 8005880:	1891      	adds	r1, r2, r2
 8005882:	63b9      	str	r1, [r7, #56]	; 0x38
 8005884:	415b      	adcs	r3, r3
 8005886:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005888:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800588c:	4641      	mov	r1, r8
 800588e:	1851      	adds	r1, r2, r1
 8005890:	6339      	str	r1, [r7, #48]	; 0x30
 8005892:	4649      	mov	r1, r9
 8005894:	414b      	adcs	r3, r1
 8005896:	637b      	str	r3, [r7, #52]	; 0x34
 8005898:	f04f 0200 	mov.w	r2, #0
 800589c:	f04f 0300 	mov.w	r3, #0
 80058a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80058a4:	4659      	mov	r1, fp
 80058a6:	00cb      	lsls	r3, r1, #3
 80058a8:	4651      	mov	r1, sl
 80058aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058ae:	4651      	mov	r1, sl
 80058b0:	00ca      	lsls	r2, r1, #3
 80058b2:	4610      	mov	r0, r2
 80058b4:	4619      	mov	r1, r3
 80058b6:	4603      	mov	r3, r0
 80058b8:	4642      	mov	r2, r8
 80058ba:	189b      	adds	r3, r3, r2
 80058bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80058c0:	464b      	mov	r3, r9
 80058c2:	460a      	mov	r2, r1
 80058c4:	eb42 0303 	adc.w	r3, r2, r3
 80058c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80058cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80058d8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80058dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80058e0:	460b      	mov	r3, r1
 80058e2:	18db      	adds	r3, r3, r3
 80058e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80058e6:	4613      	mov	r3, r2
 80058e8:	eb42 0303 	adc.w	r3, r2, r3
 80058ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80058f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80058f6:	f7fa fc67 	bl	80001c8 <__aeabi_uldivmod>
 80058fa:	4602      	mov	r2, r0
 80058fc:	460b      	mov	r3, r1
 80058fe:	4b0d      	ldr	r3, [pc, #52]	; (8005934 <UART_SetConfig+0x2d4>)
 8005900:	fba3 1302 	umull	r1, r3, r3, r2
 8005904:	095b      	lsrs	r3, r3, #5
 8005906:	2164      	movs	r1, #100	; 0x64
 8005908:	fb01 f303 	mul.w	r3, r1, r3
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	00db      	lsls	r3, r3, #3
 8005910:	3332      	adds	r3, #50	; 0x32
 8005912:	4a08      	ldr	r2, [pc, #32]	; (8005934 <UART_SetConfig+0x2d4>)
 8005914:	fba2 2303 	umull	r2, r3, r2, r3
 8005918:	095b      	lsrs	r3, r3, #5
 800591a:	f003 0207 	and.w	r2, r3, #7
 800591e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4422      	add	r2, r4
 8005926:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005928:	e105      	b.n	8005b36 <UART_SetConfig+0x4d6>
 800592a:	bf00      	nop
 800592c:	40011000 	.word	0x40011000
 8005930:	40011400 	.word	0x40011400
 8005934:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005938:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800593c:	2200      	movs	r2, #0
 800593e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005942:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005946:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800594a:	4642      	mov	r2, r8
 800594c:	464b      	mov	r3, r9
 800594e:	1891      	adds	r1, r2, r2
 8005950:	6239      	str	r1, [r7, #32]
 8005952:	415b      	adcs	r3, r3
 8005954:	627b      	str	r3, [r7, #36]	; 0x24
 8005956:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800595a:	4641      	mov	r1, r8
 800595c:	1854      	adds	r4, r2, r1
 800595e:	4649      	mov	r1, r9
 8005960:	eb43 0501 	adc.w	r5, r3, r1
 8005964:	f04f 0200 	mov.w	r2, #0
 8005968:	f04f 0300 	mov.w	r3, #0
 800596c:	00eb      	lsls	r3, r5, #3
 800596e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005972:	00e2      	lsls	r2, r4, #3
 8005974:	4614      	mov	r4, r2
 8005976:	461d      	mov	r5, r3
 8005978:	4643      	mov	r3, r8
 800597a:	18e3      	adds	r3, r4, r3
 800597c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005980:	464b      	mov	r3, r9
 8005982:	eb45 0303 	adc.w	r3, r5, r3
 8005986:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800598a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005996:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800599a:	f04f 0200 	mov.w	r2, #0
 800599e:	f04f 0300 	mov.w	r3, #0
 80059a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80059a6:	4629      	mov	r1, r5
 80059a8:	008b      	lsls	r3, r1, #2
 80059aa:	4621      	mov	r1, r4
 80059ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059b0:	4621      	mov	r1, r4
 80059b2:	008a      	lsls	r2, r1, #2
 80059b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80059b8:	f7fa fc06 	bl	80001c8 <__aeabi_uldivmod>
 80059bc:	4602      	mov	r2, r0
 80059be:	460b      	mov	r3, r1
 80059c0:	4b60      	ldr	r3, [pc, #384]	; (8005b44 <UART_SetConfig+0x4e4>)
 80059c2:	fba3 2302 	umull	r2, r3, r3, r2
 80059c6:	095b      	lsrs	r3, r3, #5
 80059c8:	011c      	lsls	r4, r3, #4
 80059ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059ce:	2200      	movs	r2, #0
 80059d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80059d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80059d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80059dc:	4642      	mov	r2, r8
 80059de:	464b      	mov	r3, r9
 80059e0:	1891      	adds	r1, r2, r2
 80059e2:	61b9      	str	r1, [r7, #24]
 80059e4:	415b      	adcs	r3, r3
 80059e6:	61fb      	str	r3, [r7, #28]
 80059e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059ec:	4641      	mov	r1, r8
 80059ee:	1851      	adds	r1, r2, r1
 80059f0:	6139      	str	r1, [r7, #16]
 80059f2:	4649      	mov	r1, r9
 80059f4:	414b      	adcs	r3, r1
 80059f6:	617b      	str	r3, [r7, #20]
 80059f8:	f04f 0200 	mov.w	r2, #0
 80059fc:	f04f 0300 	mov.w	r3, #0
 8005a00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a04:	4659      	mov	r1, fp
 8005a06:	00cb      	lsls	r3, r1, #3
 8005a08:	4651      	mov	r1, sl
 8005a0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a0e:	4651      	mov	r1, sl
 8005a10:	00ca      	lsls	r2, r1, #3
 8005a12:	4610      	mov	r0, r2
 8005a14:	4619      	mov	r1, r3
 8005a16:	4603      	mov	r3, r0
 8005a18:	4642      	mov	r2, r8
 8005a1a:	189b      	adds	r3, r3, r2
 8005a1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a20:	464b      	mov	r3, r9
 8005a22:	460a      	mov	r2, r1
 8005a24:	eb42 0303 	adc.w	r3, r2, r3
 8005a28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a36:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005a38:	f04f 0200 	mov.w	r2, #0
 8005a3c:	f04f 0300 	mov.w	r3, #0
 8005a40:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005a44:	4649      	mov	r1, r9
 8005a46:	008b      	lsls	r3, r1, #2
 8005a48:	4641      	mov	r1, r8
 8005a4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a4e:	4641      	mov	r1, r8
 8005a50:	008a      	lsls	r2, r1, #2
 8005a52:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005a56:	f7fa fbb7 	bl	80001c8 <__aeabi_uldivmod>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	4b39      	ldr	r3, [pc, #228]	; (8005b44 <UART_SetConfig+0x4e4>)
 8005a60:	fba3 1302 	umull	r1, r3, r3, r2
 8005a64:	095b      	lsrs	r3, r3, #5
 8005a66:	2164      	movs	r1, #100	; 0x64
 8005a68:	fb01 f303 	mul.w	r3, r1, r3
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	011b      	lsls	r3, r3, #4
 8005a70:	3332      	adds	r3, #50	; 0x32
 8005a72:	4a34      	ldr	r2, [pc, #208]	; (8005b44 <UART_SetConfig+0x4e4>)
 8005a74:	fba2 2303 	umull	r2, r3, r2, r3
 8005a78:	095b      	lsrs	r3, r3, #5
 8005a7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a7e:	441c      	add	r4, r3
 8005a80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a84:	2200      	movs	r2, #0
 8005a86:	673b      	str	r3, [r7, #112]	; 0x70
 8005a88:	677a      	str	r2, [r7, #116]	; 0x74
 8005a8a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005a8e:	4642      	mov	r2, r8
 8005a90:	464b      	mov	r3, r9
 8005a92:	1891      	adds	r1, r2, r2
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	415b      	adcs	r3, r3
 8005a98:	60fb      	str	r3, [r7, #12]
 8005a9a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a9e:	4641      	mov	r1, r8
 8005aa0:	1851      	adds	r1, r2, r1
 8005aa2:	6039      	str	r1, [r7, #0]
 8005aa4:	4649      	mov	r1, r9
 8005aa6:	414b      	adcs	r3, r1
 8005aa8:	607b      	str	r3, [r7, #4]
 8005aaa:	f04f 0200 	mov.w	r2, #0
 8005aae:	f04f 0300 	mov.w	r3, #0
 8005ab2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005ab6:	4659      	mov	r1, fp
 8005ab8:	00cb      	lsls	r3, r1, #3
 8005aba:	4651      	mov	r1, sl
 8005abc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ac0:	4651      	mov	r1, sl
 8005ac2:	00ca      	lsls	r2, r1, #3
 8005ac4:	4610      	mov	r0, r2
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	4603      	mov	r3, r0
 8005aca:	4642      	mov	r2, r8
 8005acc:	189b      	adds	r3, r3, r2
 8005ace:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ad0:	464b      	mov	r3, r9
 8005ad2:	460a      	mov	r2, r1
 8005ad4:	eb42 0303 	adc.w	r3, r2, r3
 8005ad8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	663b      	str	r3, [r7, #96]	; 0x60
 8005ae4:	667a      	str	r2, [r7, #100]	; 0x64
 8005ae6:	f04f 0200 	mov.w	r2, #0
 8005aea:	f04f 0300 	mov.w	r3, #0
 8005aee:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005af2:	4649      	mov	r1, r9
 8005af4:	008b      	lsls	r3, r1, #2
 8005af6:	4641      	mov	r1, r8
 8005af8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005afc:	4641      	mov	r1, r8
 8005afe:	008a      	lsls	r2, r1, #2
 8005b00:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005b04:	f7fa fb60 	bl	80001c8 <__aeabi_uldivmod>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	460b      	mov	r3, r1
 8005b0c:	4b0d      	ldr	r3, [pc, #52]	; (8005b44 <UART_SetConfig+0x4e4>)
 8005b0e:	fba3 1302 	umull	r1, r3, r3, r2
 8005b12:	095b      	lsrs	r3, r3, #5
 8005b14:	2164      	movs	r1, #100	; 0x64
 8005b16:	fb01 f303 	mul.w	r3, r1, r3
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	011b      	lsls	r3, r3, #4
 8005b1e:	3332      	adds	r3, #50	; 0x32
 8005b20:	4a08      	ldr	r2, [pc, #32]	; (8005b44 <UART_SetConfig+0x4e4>)
 8005b22:	fba2 2303 	umull	r2, r3, r2, r3
 8005b26:	095b      	lsrs	r3, r3, #5
 8005b28:	f003 020f 	and.w	r2, r3, #15
 8005b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4422      	add	r2, r4
 8005b34:	609a      	str	r2, [r3, #8]
}
 8005b36:	bf00      	nop
 8005b38:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b42:	bf00      	nop
 8005b44:	51eb851f 	.word	0x51eb851f

08005b48 <__libc_init_array>:
 8005b48:	b570      	push	{r4, r5, r6, lr}
 8005b4a:	4d0d      	ldr	r5, [pc, #52]	; (8005b80 <__libc_init_array+0x38>)
 8005b4c:	4c0d      	ldr	r4, [pc, #52]	; (8005b84 <__libc_init_array+0x3c>)
 8005b4e:	1b64      	subs	r4, r4, r5
 8005b50:	10a4      	asrs	r4, r4, #2
 8005b52:	2600      	movs	r6, #0
 8005b54:	42a6      	cmp	r6, r4
 8005b56:	d109      	bne.n	8005b6c <__libc_init_array+0x24>
 8005b58:	4d0b      	ldr	r5, [pc, #44]	; (8005b88 <__libc_init_array+0x40>)
 8005b5a:	4c0c      	ldr	r4, [pc, #48]	; (8005b8c <__libc_init_array+0x44>)
 8005b5c:	f000 f820 	bl	8005ba0 <_init>
 8005b60:	1b64      	subs	r4, r4, r5
 8005b62:	10a4      	asrs	r4, r4, #2
 8005b64:	2600      	movs	r6, #0
 8005b66:	42a6      	cmp	r6, r4
 8005b68:	d105      	bne.n	8005b76 <__libc_init_array+0x2e>
 8005b6a:	bd70      	pop	{r4, r5, r6, pc}
 8005b6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b70:	4798      	blx	r3
 8005b72:	3601      	adds	r6, #1
 8005b74:	e7ee      	b.n	8005b54 <__libc_init_array+0xc>
 8005b76:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b7a:	4798      	blx	r3
 8005b7c:	3601      	adds	r6, #1
 8005b7e:	e7f2      	b.n	8005b66 <__libc_init_array+0x1e>
 8005b80:	08005dd8 	.word	0x08005dd8
 8005b84:	08005dd8 	.word	0x08005dd8
 8005b88:	08005dd8 	.word	0x08005dd8
 8005b8c:	08005ddc 	.word	0x08005ddc

08005b90 <memset>:
 8005b90:	4402      	add	r2, r0
 8005b92:	4603      	mov	r3, r0
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d100      	bne.n	8005b9a <memset+0xa>
 8005b98:	4770      	bx	lr
 8005b9a:	f803 1b01 	strb.w	r1, [r3], #1
 8005b9e:	e7f9      	b.n	8005b94 <memset+0x4>

08005ba0 <_init>:
 8005ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ba2:	bf00      	nop
 8005ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ba6:	bc08      	pop	{r3}
 8005ba8:	469e      	mov	lr, r3
 8005baa:	4770      	bx	lr

08005bac <_fini>:
 8005bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bae:	bf00      	nop
 8005bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bb2:	bc08      	pop	{r3}
 8005bb4:	469e      	mov	lr, r3
 8005bb6:	4770      	bx	lr
